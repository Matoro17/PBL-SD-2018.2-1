// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/14/2018 17:27:52"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lcd_driver
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lcd_driver_vlg_sample_tst(
	clk,
	clk_en,
	dataa,
	datab,
	reset,
	start,
	sampler_tx
);
input  clk;
input  clk_en;
input [31:0] dataa;
input [31:0] datab;
input  reset;
input  start;
output sampler_tx;

reg sample;
time current_time;
always @(clk or clk_en or dataa or datab or reset or start)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lcd_driver_vlg_check_tst (
	db,
	done,
	en,
	result,
	rs,
	rw,
	sampler_rx
);
input [7:0] db;
input  done;
input  en;
input [31:0] result;
input  rs;
input  rw;
input sampler_rx;

reg [7:0] db_expected;
reg  done_expected;
reg  en_expected;
reg [31:0] result_expected;
reg  rs_expected;
reg  rw_expected;

reg [7:0] db_prev;
reg  done_prev;
reg  en_prev;
reg [31:0] result_prev;
reg  rs_prev;
reg  rw_prev;

reg [7:0] db_expected_prev;
reg  done_expected_prev;
reg  en_expected_prev;
reg  rs_expected_prev;
reg  rw_expected_prev;

reg [7:0] last_db_exp;
reg  last_done_exp;
reg  last_en_exp;
reg  last_rs_exp;
reg  last_rw_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	db_prev = db;
	done_prev = done;
	en_prev = en;
	result_prev = result;
	rs_prev = rs;
	rw_prev = rw;
end

// update expected /o prevs

always @(trigger)
begin
	db_expected_prev = db_expected;
	done_expected_prev = done_expected;
	en_expected_prev = en_expected;
	rs_expected_prev = rs_expected;
	rw_expected_prev = rw_expected;
end


// expected db[ 7 ]
initial
begin
	db_expected[7] = 1'bX;
end 
// expected db[ 6 ]
initial
begin
	db_expected[6] = 1'bX;
end 
// expected db[ 5 ]
initial
begin
	db_expected[5] = 1'bX;
end 
// expected db[ 4 ]
initial
begin
	db_expected[4] = 1'bX;
end 
// expected db[ 3 ]
initial
begin
	db_expected[3] = 1'bX;
end 
// expected db[ 2 ]
initial
begin
	db_expected[2] = 1'bX;
end 
// expected db[ 1 ]
initial
begin
	db_expected[1] = 1'bX;
end 
// expected db[ 0 ]
initial
begin
	db_expected[0] = 1'bX;
end 

// expected done
initial
begin
	done_expected = 1'bX;
end 

// expected en
initial
begin
	en_expected = 1'bX;
end 

// expected rs
initial
begin
	rs_expected = 1'bX;
end 

// expected rw
initial
begin
	rw_expected = 1'bX;
end 
// generate trigger
always @(db_expected or db or done_expected or done or en_expected or en or result_expected or result or rs_expected or rs or rw_expected or rw)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected db = %b | expected done = %b | expected en = %b | expected result = %b | expected rs = %b | expected rw = %b | ",db_expected_prev,done_expected_prev,en_expected_prev,result_expected_prev,rs_expected_prev,rw_expected_prev);
	$display("| real db = %b | real done = %b | real en = %b | real result = %b | real rs = %b | real rw = %b | ",db_prev,done_prev,en_prev,result_prev,rs_prev,rw_prev);
`endif
	if (
		( db_expected_prev[0] !== 1'bx ) && ( db_prev[0] !== db_expected_prev[0] )
		&& ((db_expected_prev[0] !== last_db_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port db[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", db_expected_prev);
		$display ("     Real value = %b", db_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_db_exp[0] = db_expected_prev[0];
	end
	if (
		( db_expected_prev[1] !== 1'bx ) && ( db_prev[1] !== db_expected_prev[1] )
		&& ((db_expected_prev[1] !== last_db_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port db[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", db_expected_prev);
		$display ("     Real value = %b", db_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_db_exp[1] = db_expected_prev[1];
	end
	if (
		( db_expected_prev[2] !== 1'bx ) && ( db_prev[2] !== db_expected_prev[2] )
		&& ((db_expected_prev[2] !== last_db_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port db[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", db_expected_prev);
		$display ("     Real value = %b", db_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_db_exp[2] = db_expected_prev[2];
	end
	if (
		( db_expected_prev[3] !== 1'bx ) && ( db_prev[3] !== db_expected_prev[3] )
		&& ((db_expected_prev[3] !== last_db_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port db[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", db_expected_prev);
		$display ("     Real value = %b", db_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_db_exp[3] = db_expected_prev[3];
	end
	if (
		( db_expected_prev[4] !== 1'bx ) && ( db_prev[4] !== db_expected_prev[4] )
		&& ((db_expected_prev[4] !== last_db_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port db[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", db_expected_prev);
		$display ("     Real value = %b", db_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_db_exp[4] = db_expected_prev[4];
	end
	if (
		( db_expected_prev[5] !== 1'bx ) && ( db_prev[5] !== db_expected_prev[5] )
		&& ((db_expected_prev[5] !== last_db_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port db[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", db_expected_prev);
		$display ("     Real value = %b", db_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_db_exp[5] = db_expected_prev[5];
	end
	if (
		( db_expected_prev[6] !== 1'bx ) && ( db_prev[6] !== db_expected_prev[6] )
		&& ((db_expected_prev[6] !== last_db_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port db[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", db_expected_prev);
		$display ("     Real value = %b", db_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_db_exp[6] = db_expected_prev[6];
	end
	if (
		( db_expected_prev[7] !== 1'bx ) && ( db_prev[7] !== db_expected_prev[7] )
		&& ((db_expected_prev[7] !== last_db_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port db[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", db_expected_prev);
		$display ("     Real value = %b", db_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_db_exp[7] = db_expected_prev[7];
	end
	if (
		( done_expected_prev !== 1'bx ) && ( done_prev !== done_expected_prev )
		&& ((done_expected_prev !== last_done_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port done :: @time = %t",  $realtime);
		$display ("     Expected value = %b", done_expected_prev);
		$display ("     Real value = %b", done_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_done_exp = done_expected_prev;
	end
	if (
		( en_expected_prev !== 1'bx ) && ( en_prev !== en_expected_prev )
		&& ((en_expected_prev !== last_en_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_en_exp = en_expected_prev;
	end
	if (
		( rs_expected_prev !== 1'bx ) && ( rs_prev !== rs_expected_prev )
		&& ((rs_expected_prev !== last_rs_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs_expected_prev);
		$display ("     Real value = %b", rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_rs_exp = rs_expected_prev;
	end
	if (
		( rw_expected_prev !== 1'bx ) && ( rw_prev !== rw_expected_prev )
		&& ((rw_expected_prev !== last_rw_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rw :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rw_expected_prev);
		$display ("     Real value = %b", rw_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_rw_exp = rw_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lcd_driver_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg clk_en;
reg [31:0] dataa;
reg [31:0] datab;
reg reset;
reg start;
// wires                                               
wire [7:0] db;
wire done;
wire en;
wire [31:0] result;
wire rs;
wire rw;

wire sampler;                             

// assign statements (if any)                          
lcd_driver i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.clk_en(clk_en),
	.dataa(dataa),
	.datab(datab),
	.db(db),
	.done(done),
	.en(en),
	.reset(reset),
	.result(result),
	.rs(rs),
	.rw(rw),
	.start(start)
);

// reset
initial
begin
	reset = 1'b0;
end 

// start
initial
begin
	start = 1'b0;
	start = #10000 1'b1;
	start = #50000 1'b0;
end 

// clk_en
initial
begin
	clk_en = 1'b0;
	clk_en = #30000 1'b1;
	clk_en = #140000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #12500 1'b1;
	#12500;
end 

// dataa[0]
initial
begin
	dataa[0] = 1'b0;
end 

// datab[0]
initial
begin
	datab[0] = 1'b1;
end 

// datab[1]
initial
begin
	datab[1] = 1'b0;
end 

// datab[2]
initial
begin
	datab[2] = 1'b1;
end 

// datab[3]
initial
begin
	datab[3] = 1'b0;
end 

// datab[4]
initial
begin
	datab[4] = 1'b1;
end 

// datab[5]
initial
begin
	datab[5] = 1'b0;
end 

// datab[6]
initial
begin
	datab[6] = 1'b1;
end 

// datab[7]
initial
begin
	datab[7] = 1'b0;
end 

lcd_driver_vlg_sample_tst tb_sample (
	.clk(clk),
	.clk_en(clk_en),
	.dataa(dataa),
	.datab(datab),
	.reset(reset),
	.start(start),
	.sampler_tx(sampler)
);

lcd_driver_vlg_check_tst tb_out(
	.db(db),
	.done(done),
	.en(en),
	.result(result),
	.rs(rs),
	.rw(rw),
	.sampler_rx(sampler)
);
endmodule

