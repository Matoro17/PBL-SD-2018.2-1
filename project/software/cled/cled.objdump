
cled.elf:     file format elf32-littlenios2
cled.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x000002ac memsz 0x000002ac flags r-x
    LOAD off    0x000012cc vaddr 0x000082cc paddr 0x000082d0 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x000012d4 vaddr 0x000082d4 paddr 0x000082d4 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00000294  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  000082b4  000082b4  000012b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       00000004  000082cc  000082d0  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000000c  000082d4  000082d4  000012d4  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000168  00000000  00000000  000012f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000bfc  00000000  00000000  00001460  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000006d5  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000827  00000000  00000000  00002731  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00002f58  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000053e  00000000  00000000  000030d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000001b2  00000000  00000000  00003616  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_alt_sim_info 00000010  00000000  00000000  000037c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000078  00000000  00000000  000037d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .thread_model 00000003  00000000  00000000  00004523  2**0
                  CONTENTS, READONLY
 16 .cpu          00000004  00000000  00000000  00004526  2**0
                  CONTENTS, READONLY
 17 .qsys         00000001  00000000  00000000  0000452a  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  0000452b  2**0
                  CONTENTS, READONLY
 19 .stderr_dev   00000004  00000000  00000000  0000452c  2**0
                  CONTENTS, READONLY
 20 .stdin_dev    00000004  00000000  00000000  00004530  2**0
                  CONTENTS, READONLY
 21 .stdout_dev   00000004  00000000  00000000  00004534  2**0
                  CONTENTS, READONLY
 22 .sopc_system_name 00000004  00000000  00000000  00004538  2**0
                  CONTENTS, READONLY
 23 .quartus_project_dir 00000039  00000000  00000000  0000453c  2**0
                  CONTENTS, READONLY
 24 .sopcinfo     00032bfd  00000000  00000000  00004575  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .text	00000000 .text
000082b4 l    d  .rodata	00000000 .rodata
000082cc l    d  .rwdata	00000000 .rwdata
000082d4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../cled_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 
000081c0 g     F .text	0000002c alt_main
000082d0 g       *ABS*	00000000 __flash_rwdata_start
000081ec g     F .text	00000038 alt_putstr
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
000082d8 g     O .bss	00000004 alt_argv
000102cc g       *ABS*	00000000 _gp
000082e0 g       *ABS*	00000000 __bss_end
0000827c g     F .text	00000004 alt_dcache_flush_all
000082d0 g       *ABS*	00000000 __ram_rwdata_end
000082cc g       *ABS*	00000000 __ram_rodata_end
000082e0 g       *ABS*	00000000 end
0000d388 g       *ABS*	00000000 __alt_stack_pointer
00008248 g     F .text	00000034 altera_avalon_jtag_uart_write
00008020 g     F .text	0000003c _start
00008244 g     F .text	00000004 alt_sys_init
000082cc g       *ABS*	00000000 __ram_rwdata_start
000082b4 g       *ABS*	00000000 __ram_rodata_start
000082e0 g       *ABS*	00000000 __alt_stack_base
000082d4 g       *ABS*	00000000 __bss_start
0000805c g     F .text	00000060 main
000082d4 g     O .bss	00000004 alt_envp
000082b4 g       *ABS*	00000000 __flash_rodata_start
00008224 g     F .text	00000020 alt_irq_init
000082dc g     O .bss	00000004 alt_argc
000082cc g     O .rwdata	00000004 Jtag
00008020 g       *ABS*	00000000 __ram_exceptions_start
000082d0 g       *ABS*	00000000 _edata
000082e0 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00008000 g       *ABS*	00000000 __alt_mem_memory
00008284 g     F .text	00000008 altera_nios2_qsys_irq_init
0000d388 g       *ABS*	00000000 __alt_data_end
0000800c g       .entry	00000000 _exit
0000828c g     F .text	00000028 strlen
00008280 g     F .text	00000004 alt_icache_flush_all
000080bc g     F .text	00000104 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def4e214 	ori	sp,sp,54152
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d680b314 	ori	gp,gp,716
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a0b514 	ori	r2,r2,33492

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e0b814 	ori	r3,r3,33504

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	00080bc0 	call	80bc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00081c00 	call	81c0 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <alt_after_alt_main>

0000805c <main>:

#include "sys/alt_stdio.h"
#include "io.h"
#include "system.h"
int main()
{ 
    805c:	defffa04 	addi	sp,sp,-24
  alt_putstr("Hello from Nios II!\n");
    8060:	01000074 	movhi	r4,1
    8064:	2120ad04 	addi	r4,r4,-32076

#include "sys/alt_stdio.h"
#include "io.h"
#include "system.h"
int main()
{ 
    8068:	dd000415 	stw	r20,16(sp)
    806c:	dcc00315 	stw	r19,12(sp)
    8070:	dc400115 	stw	r17,4(sp)
    8074:	dfc00515 	stw	ra,20(sp)
    8078:	dc800215 	stw	r18,8(sp)
    807c:	dc000015 	stw	r16,0(sp)
  alt_putstr("Hello from Nios II!\n");

	unsigned int input1, input2, output;
	while(1){
		input1 = IORD(PUSHBUTON_BASE,0);
    8080:	05000074 	movhi	r20,1
    8084:	a5040004 	addi	r20,r20,4096
#include "sys/alt_stdio.h"
#include "io.h"
#include "system.h"
int main()
{ 
  alt_putstr("Hello from Nios II!\n");
    8088:	00081ec0 	call	81ec <alt_putstr>

	unsigned int input1, input2, output;
	while(1){
		input1 = IORD(PUSHBUTON_BASE,0);
		input2 = IORD(PUSHBUTON_BASE,1);
    808c:	04c00074 	movhi	r19,1
    8090:	9cc40104 	addi	r19,r19,4100
		output = input1 + input2;
		alt_putstr(input1);
		alt_putstr(input2);
		IOWR(LED_BASE,0,output);
    8094:	04400074 	movhi	r17,1
    8098:	8c440404 	addi	r17,r17,4112
{ 
  alt_putstr("Hello from Nios II!\n");

	unsigned int input1, input2, output;
	while(1){
		input1 = IORD(PUSHBUTON_BASE,0);
    809c:	a1000037 	ldwio	r4,0(r20)
		input2 = IORD(PUSHBUTON_BASE,1);
    80a0:	9c000037 	ldwio	r16,0(r19)
		output = input1 + input2;
    80a4:	8125883a 	add	r18,r16,r4
		alt_putstr(input1);
    80a8:	00081ec0 	call	81ec <alt_putstr>
		alt_putstr(input2);
    80ac:	8009883a 	mov	r4,r16
    80b0:	00081ec0 	call	81ec <alt_putstr>
		IOWR(LED_BASE,0,output);
    80b4:	8c800035 	stwio	r18,0(r17)
    80b8:	003ff806 	br	809c <main+0x40>

000080bc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    80bc:	deffff04 	addi	sp,sp,-4
    80c0:	dfc00015 	stw	ra,0(sp)
    80c4:	00c00074 	movhi	r3,1
    80c8:	18e0b304 	addi	r3,r3,-32052
    80cc:	01000074 	movhi	r4,1
    80d0:	2120b404 	addi	r4,r4,-32048

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    80d4:	1900061e 	bne	r3,r4,80f0 <alt_load+0x34>
    80d8:	00c00074 	movhi	r3,1
    80dc:	18e00804 	addi	r3,r3,-32736
    80e0:	01000074 	movhi	r4,1
    80e4:	21200804 	addi	r4,r4,-32736
    80e8:	1900151e 	bne	r3,r4,8140 <alt_load+0x84>
    80ec:	00000e06 	br	8128 <alt_load+0x6c>
 * alt_load() is called when the code is executing from flash. In this case
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
    80f0:	01400074 	movhi	r5,1
    80f4:	2960b404 	addi	r5,r5,-32048
    80f8:	00bfff04 	movi	r2,-4
    80fc:	28cbc83a 	sub	r5,r5,r3
    8100:	288a703a 	and	r5,r5,r2
    8104:	0005883a 	mov	r2,zero
    8108:	00000506 	br	8120 <alt_load+0x64>
    810c:	208f883a 	add	r7,r4,r2
  {
    while( to != end )
    {
      *to++ = *from++;
    8110:	39c00017 	ldw	r7,0(r7)
    8114:	188d883a 	add	r6,r3,r2
    8118:	10800104 	addi	r2,r2,4
    811c:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8120:	117ffa1e 	bne	r2,r5,810c <alt_load+0x50>
    8124:	003fec06 	br	80d8 <alt_load+0x1c>
    8128:	00c00074 	movhi	r3,1
    812c:	18e0ad04 	addi	r3,r3,-32076
    8130:	01000074 	movhi	r4,1
    8134:	2120ad04 	addi	r4,r4,-32076

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8138:	1900131e 	bne	r3,r4,8188 <alt_load+0xcc>
    813c:	00000e06 	br	8178 <alt_load+0xbc>
    8140:	01400074 	movhi	r5,1
    8144:	29600804 	addi	r5,r5,-32736
    8148:	00bfff04 	movi	r2,-4
    814c:	28cbc83a 	sub	r5,r5,r3
    8150:	288a703a 	and	r5,r5,r2
    8154:	0005883a 	mov	r2,zero
    8158:	00000506 	br	8170 <alt_load+0xb4>
    815c:	208f883a 	add	r7,r4,r2
  {
    while( to != end )
    {
      *to++ = *from++;
    8160:	39c00017 	ldw	r7,0(r7)
    8164:	188d883a 	add	r6,r3,r2
    8168:	10800104 	addi	r2,r2,4
    816c:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8170:	117ffa1e 	bne	r2,r5,815c <alt_load+0xa0>
    8174:	003fec06 	br	8128 <alt_load+0x6c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8178:	000827c0 	call	827c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    817c:	dfc00017 	ldw	ra,0(sp)
    8180:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    8184:	00082801 	jmpi	8280 <alt_icache_flush_all>
 * alt_load() is called when the code is executing from flash. In this case
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
    8188:	01400074 	movhi	r5,1
    818c:	2960b304 	addi	r5,r5,-32052
    8190:	00bfff04 	movi	r2,-4
    8194:	28cbc83a 	sub	r5,r5,r3
    8198:	288a703a 	and	r5,r5,r2
    819c:	0005883a 	mov	r2,zero
    81a0:	00000506 	br	81b8 <alt_load+0xfc>
    81a4:	208f883a 	add	r7,r4,r2
    {
      *to++ = *from++;
    81a8:	39c00017 	ldw	r7,0(r7)
    81ac:	188d883a 	add	r6,r3,r2
    81b0:	10800104 	addi	r2,r2,4
    81b4:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    81b8:	117ffa1e 	bne	r2,r5,81a4 <alt_load+0xe8>
    81bc:	003fee06 	br	8178 <alt_load+0xbc>

000081c0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    81c0:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    81c4:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    81c8:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    81cc:	00082240 	call	8224 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    81d0:	00082440 	call	8244 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    81d4:	d1200417 	ldw	r4,-32752(gp)
    81d8:	d1600317 	ldw	r5,-32756(gp)
    81dc:	d1a00217 	ldw	r6,-32760(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    81e0:	dfc00017 	ldw	ra,0(sp)
    81e4:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    81e8:	000805c1 	jmpi	805c <main>

000081ec <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    81ec:	defffe04 	addi	sp,sp,-8
    81f0:	dc000015 	stw	r16,0(sp)
    81f4:	dfc00115 	stw	ra,4(sp)
    81f8:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    81fc:	000828c0 	call	828c <strlen>
    8200:	01000074 	movhi	r4,1
    8204:	2120b304 	addi	r4,r4,-32052
    8208:	800b883a 	mov	r5,r16
    820c:	100d883a 	mov	r6,r2
    8210:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
}
    8214:	dfc00117 	ldw	ra,4(sp)
    8218:	dc000017 	ldw	r16,0(sp)
    821c:	dec00204 	addi	sp,sp,8
int 
alt_putstr(const char* str)
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8220:	00082481 	jmpi	8248 <altera_avalon_jtag_uart_write>

00008224 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8224:	deffff04 	addi	sp,sp,-4
    8228:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS, Nios);
    822c:	00082840 	call	8284 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8230:	00800044 	movi	r2,1
    8234:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8238:	dfc00017 	ldw	ra,0(sp)
    823c:	dec00104 	addi	sp,sp,4
    8240:	f800283a 	ret

00008244 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8244:	f800283a 	ret

00008248 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    8248:	20c00017 	ldw	r3,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    824c:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    8250:	2989883a 	add	r4,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8254:	19800104 	addi	r6,r3,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    8258:	00000606 	br	8274 <altera_avalon_jtag_uart_write+0x2c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    825c:	31c00037 	ldwio	r7,0(r6)
    8260:	39ffffec 	andhi	r7,r7,65535
    8264:	383ffd26 	beq	r7,zero,825c <altera_avalon_jtag_uart_write+0x14>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    8268:	29c00007 	ldb	r7,0(r5)
    826c:	29400044 	addi	r5,r5,1
    8270:	19c00035 	stwio	r7,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    8274:	293ff936 	bltu	r5,r4,825c <altera_avalon_jtag_uart_write+0x14>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    8278:	f800283a 	ret

0000827c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    827c:	f800283a 	ret

00008280 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    8280:	f800283a 	ret

00008284 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    8284:	000170fa 	wrctl	ienable,zero
    8288:	f800283a 	ret

0000828c <strlen>:
    828c:	20800007 	ldb	r2,0(r4)
    8290:	10000626 	beq	r2,zero,82ac <strlen+0x20>
    8294:	2005883a 	mov	r2,r4
    8298:	10800044 	addi	r2,r2,1
    829c:	10c00007 	ldb	r3,0(r2)
    82a0:	183ffd1e 	bne	r3,zero,8298 <strlen+0xc>
    82a4:	1105c83a 	sub	r2,r2,r4
    82a8:	f800283a 	ret
    82ac:	0005883a 	mov	r2,zero
    82b0:	f800283a 	ret
