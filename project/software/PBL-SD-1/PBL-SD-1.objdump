
PBL-SD-1.elf:     file format elf32-littlenios2
PBL-SD-1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004020

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x000024ec memsz 0x000024ec flags r-x
    LOAD off    0x0000350c vaddr 0x0000650c paddr 0x000067e4 align 2**12
         filesz 0x000002d8 memsz 0x000002d8 flags rw-
    LOAD off    0x00003abc vaddr 0x00006abc paddr 0x00006abc align 2**12
         filesz 0x00000000 memsz 0x0000009c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00002458  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  00006478  00006478  00003478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000002d8  0000650c  000067e4  0000350c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000009c  00006abc  00006abc  00003abc  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  000037e4  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000570  00000000  00000000  00003808  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000890c  00000000  00000000  00003d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000029da  00000000  00000000  0000c684  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000031a0  00000000  00000000  0000f05e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000008a8  00000000  00000000  00012200  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001793  00000000  00000000  00012aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000020ba  00000000  00000000  0001423b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_alt_sim_info 00000040  00000000  00000000  000162f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000001f0  00000000  00000000  00016338  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .thread_model 00000003  00000000  00000000  00017d00  2**0
                  CONTENTS, READONLY
 16 .cpu          00000004  00000000  00000000  00017d03  2**0
                  CONTENTS, READONLY
 17 .qsys         00000001  00000000  00000000  00017d07  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  00017d08  2**0
                  CONTENTS, READONLY
 19 .stderr_dev   00000004  00000000  00000000  00017d09  2**0
                  CONTENTS, READONLY
 20 .stdin_dev    00000004  00000000  00000000  00017d0d  2**0
                  CONTENTS, READONLY
 21 .stdout_dev   00000004  00000000  00000000  00017d11  2**0
                  CONTENTS, READONLY
 22 .sopc_system_name 00000004  00000000  00000000  00017d15  2**0
                  CONTENTS, READONLY
 23 .quartus_project_dir 00000039  00000000  00000000  00017d19  2**0
                  CONTENTS, READONLY
 24 .sopcinfo     0005993b  00000000  00000000  00017d52  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .text	00000000 .text
00006478 l    d  .rodata	00000000 .rodata
0000650c l    d  .rwdata	00000000 .rwdata
00006abc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../PBL-SD-1_bsp//obj/HAL/src/crt0.o
00004058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000650c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00004d50 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 alt_load.c
00004e80 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00005058 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00005198 l     F .text	00000038 alt_dev_reg
000065ec l     O .rwdata	0000002c Jtag
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
000055d4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000570c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00005738 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000058fc l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00005a54 l     F .text	00000050 alt_get_errno
00005aa4 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00004f6c g     F .text	00000078 alt_main
000067e4 g       *ABS*	00000000 __flash_rwdata_start
00004438 g     F .text	0000004c printf
00004fe4 g     F .text	00000044 alt_putstr
00000000  w      *UND*	00000000 __errno
00004000 g     F .entry	0000000c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
00006abc g     O .bss	00000004 errno
00006ac4 g     O .bss	00000004 alt_argv
0000e7c0 g       *ABS*	00000000 _gp
00005028 g     F .text	00000030 usleep
00006640 g     O .rwdata	00000180 alt_fd_list
00005d8c g     F .text	00000090 alt_find_dev
000043d4 g     F .text	00000028 memcpy
000059dc g     F .text	00000078 alt_io_redirect
00006478 g       *ABS*	00000000 __DTOR_END__
000052f4 g     F .text	000000f4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000043fc g     F .text	0000003c _printf_r
00004e70 g     F .text	00000008 __udivsi3
000067dc g     O .rwdata	00000004 alt_max_fd
000067c4 g     O .rwdata	00000004 _global_impure_ptr
00006b58 g       *ABS*	00000000 __bss_end
00006618 g     O .rwdata	00000028 alt_dev_null
000056f0 g     F .text	0000001c alt_dcache_flush_all
000067e4 g       *ABS*	00000000 __ram_rwdata_end
000067d4 g     O .rwdata	00000008 alt_dev_list
000050a8 g     F .text	000000f0 write
0000650c g       *ABS*	00000000 __ram_rodata_end
00004e78 g     F .text	00000008 __umodsi3
00006b58 g       *ABS*	00000000 end
000041bc g     F .text	000000c0 printalcd
00006478 g       *ABS*	00000000 __CTOR_LIST__
00008000 g       *ABS*	00000000 __alt_stack_pointer
000053e8 g     F .text	00000098 altera_avalon_jtag_uart_write
000044ac g     F .text	00000734 ___vfprintf_internal_r
00006264 g     F .text	000001d8 __call_exitprocs
00004020 g     F .text	0000003c _start
00005204 g     F .text	00000030 alt_sys_init
000060dc g     F .text	00000188 __register_exitproc
000043ac g     F .text	00000028 __mulsi3
0000650c g       *ABS*	00000000 __ram_rwdata_start
00006478 g       *ABS*	00000000 __ram_rodata_start
00005234 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00005f30 g     F .text	000000d4 alt_get_fd
00005480 g     F .text	00000154 alt_busy_sleep
000067c0 g     O .rwdata	00000001 button_value
00006094 g     F .text	00000048 memcmp
00006b58 g       *ABS*	00000000 __alt_stack_base
00005e1c g     F .text	00000114 alt_find_file
00005788 g     F .text	000000a0 alt_dev_llist_insert
00004c04 g     F .text	000000e0 __sfvwrite_small_dev
00006abc g       *ABS*	00000000 __bss_start
000042cc g     F .text	000000e0 lcd_init
0000405c g     F .text	00000160 main
00006ac8 g     O .bss	00000004 alt_envp
00005294 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00006acc g     O .bss	0000008c _atexit0
000067e0 g     O .rwdata	00000004 alt_errno
00004dc4 g     F .text	00000050 __divsi3
00006478 g       *ABS*	00000000 __CTOR_END__
00006478 g       *ABS*	00000000 __flash_rodata_start
00006478 g       *ABS*	00000000 __DTOR_LIST__
000051d0 g     F .text	00000034 alt_irq_init
00005cec g     F .text	00000080 alt_release_fd
00006004 g     F .text	00000014 atexit
00004ce4 g     F .text	0000006c _write_r
000067c8 g     O .rwdata	00000004 _impure_ptr
00006ac0 g     O .bss	00000004 alt_argc
00005884 g     F .text	0000005c _do_dtors
000067cc g     O .rwdata	00000008 alt_fs_list
00004020 g       *ABS*	00000000 __ram_exceptions_start
000067e4 g       *ABS*	00000000 _edata
0000427c g     F .text	00000050 espera
00006b58 g       *ABS*	00000000 _end
00004020 g       *ABS*	00000000 __ram_exceptions_end
00004000 g       *ABS*	00000000 __alt_mem_memory
00005d6c g     F .text	00000020 altera_nios2_qsys_irq_init
00006018 g     F .text	00000020 exit
00004e14 g     F .text	0000005c __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
0000643c g     F .text	0000003c _exit
00004484 g     F .text	00000028 strlen
00005b94 g     F .text	00000158 open
000058e0 g     F .text	0000001c alt_icache_flush_all
00006038 g     F .text	0000005c fputs
00004be0 g     F .text	00000024 __vfprintf_internal
00005828 g     F .text	0000005c _do_ctors
00005624 g     F .text	000000cc close
00004eec g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08500814 	ori	at,at,16416
    jmp r1
    4008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00004020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4024:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
    4028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    402c:	d6b9f014 	ori	gp,gp,59328
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4034:	109aaf14 	ori	r2,r2,27324

    movhi r3, %hi(__bss_end)
    4038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    403c:	18dad614 	ori	r3,r3,27480

    beq r2, r3, 1f
    4040:	10c00326 	beq	r2,r3,4050 <_start+0x30>

0:
    stw zero, (r2)
    4044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    4048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    404c:	10fffd36 	bltu	r2,r3,4044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    4050:	0004eec0 	call	4eec <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    4054:	0004f6c0 	call	4f6c <alt_main>

00004058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    4058:	003fff06 	br	4058 <alt_after_alt_main>

0000405c <main>:
char button_value = 3;
#define UP_BUTTON 1
#define DOWN_BUTTON 2

int main()
{
    405c:	deffe504 	addi	sp,sp,-108
    4060:	dfc01a15 	stw	ra,104(sp)
    4064:	df001915 	stw	fp,100(sp)
    4068:	df001904 	addi	fp,sp,100


	lcd_init();
    406c:	00042cc0 	call	42cc <lcd_init>
	char options[5][15] = {"1 opcao","2 opcao","3 opcao","4 opcao","5 opcao"};
    4070:	00800034 	movhi	r2,0
    4074:	109926c4 	addi	r2,r2,25755
    4078:	e13fea04 	addi	r4,fp,-88
    407c:	1007883a 	mov	r3,r2
    4080:	008012c4 	movi	r2,75
    4084:	180b883a 	mov	r5,r3
    4088:	100d883a 	mov	r6,r2
    408c:	00043d40 	call	43d4 <memcpy>

	alt_putstr("Hello from Nios II!\n");
    4090:	01000034 	movhi	r4,0
    4094:	21191e04 	addi	r4,r4,25720
    4098:	0004fe40 	call	4fe4 <alt_putstr>

	char palavra[] = "outra coisa";
    409c:	00801bc4 	movi	r2,111
    40a0:	e0bffcc5 	stb	r2,-13(fp)
    40a4:	00801d44 	movi	r2,117
    40a8:	e0bffd05 	stb	r2,-12(fp)
    40ac:	00801d04 	movi	r2,116
    40b0:	e0bffd45 	stb	r2,-11(fp)
    40b4:	00801c84 	movi	r2,114
    40b8:	e0bffd85 	stb	r2,-10(fp)
    40bc:	00801844 	movi	r2,97
    40c0:	e0bffdc5 	stb	r2,-9(fp)
    40c4:	00800804 	movi	r2,32
    40c8:	e0bffe05 	stb	r2,-8(fp)
    40cc:	008018c4 	movi	r2,99
    40d0:	e0bffe45 	stb	r2,-7(fp)
    40d4:	00801bc4 	movi	r2,111
    40d8:	e0bffe85 	stb	r2,-6(fp)
    40dc:	00801a44 	movi	r2,105
    40e0:	e0bffec5 	stb	r2,-5(fp)
    40e4:	00801cc4 	movi	r2,115
    40e8:	e0bfff05 	stb	r2,-4(fp)
    40ec:	00801844 	movi	r2,97
    40f0:	e0bfff45 	stb	r2,-3(fp)
    40f4:	e03fff85 	stb	zero,-2(fp)
	printalcd(palavra);
    40f8:	e0bffcc4 	addi	r2,fp,-13
    40fc:	1009883a 	mov	r4,r2
    4100:	00041bc0 	call	41bc <printalcd>
	int input1, input2, output;

	int pos =0;
    4104:	e03fe715 	stw	zero,-100(fp)
	printalcd(options,pos);
    4108:	e0bfea04 	addi	r2,fp,-88
    410c:	1009883a 	mov	r4,r2
    4110:	e17fe717 	ldw	r5,-100(fp)
    4114:	00041bc0 	call	41bc <printalcd>
	unsigned int button;
	int i = 0, dip;
    4118:	e03fe815 	stw	zero,-96(fp)
    411c:	00000106 	br	4124 <main+0xc8>
			espera(2);
		}



	}
    4120:	0001883a 	nop
	unsigned int button;
	int i = 0, dip;

	while (1){

		input1 = IORD(PUSHBUTTON_1_BASE,0);
    4124:	00a40414 	movui	r2,36880
    4128:	10800037 	ldwio	r2,0(r2)
    412c:	e0bfe915 	stw	r2,-92(fp)

		__builtin_stwio(LED_1_BASE,1);
    4130:	00c00044 	movi	r3,1
    4134:	00a41414 	movui	r2,36944
    4138:	10c00035 	stwio	r3,0(r2)
		__builtin_stwio(LED_2_BASE,0);
    413c:	0007883a 	mov	r3,zero
    4140:	00a41014 	movui	r2,36928
    4144:	10c00035 	stwio	r3,0(r2)
		__builtin_stwio(LED_3_BASE,1);
    4148:	00c00044 	movi	r3,1
    414c:	00a40c14 	movui	r2,36912
    4150:	10c00035 	stwio	r3,0(r2)
		__builtin_stwio(LED_4_BASE,0);
    4154:	0007883a 	mov	r3,zero
    4158:	00a40814 	movui	r2,36896
    415c:	10c00035 	stwio	r3,0(r2)
		__builtin_stwio(LED_5_BASE,1);
    4160:	00c00044 	movi	r3,1
    4164:	00a40014 	movui	r2,36864
    4168:	10c00035 	stwio	r3,0(r2)



		if(input1 == 0){
    416c:	e0bfe917 	ldw	r2,-92(fp)
    4170:	103feb1e 	bne	r2,zero,4120 <main+0xc4>
			printf("APERTOU 1 ");
    4174:	01000034 	movhi	r4,0
    4178:	21192404 	addi	r4,r4,25744
    417c:	00044380 	call	4438 <printf>
			if(pos < 4){
    4180:	e0bfe717 	ldw	r2,-100(fp)
    4184:	10800108 	cmpgei	r2,r2,4
    4188:	1000041e 	bne	r2,zero,419c <main+0x140>
				pos++;
    418c:	e0bfe717 	ldw	r2,-100(fp)
    4190:	10800044 	addi	r2,r2,1
    4194:	e0bfe715 	stw	r2,-100(fp)
    4198:	00000106 	br	41a0 <main+0x144>
			}else{
				pos = 0;
    419c:	e03fe715 	stw	zero,-100(fp)
			}
			printalcd(options,pos);
    41a0:	e0bfea04 	addi	r2,fp,-88
    41a4:	1009883a 	mov	r4,r2
    41a8:	e17fe717 	ldw	r5,-100(fp)
    41ac:	00041bc0 	call	41bc <printalcd>
			espera(2);
    41b0:	01000084 	movi	r4,2
    41b4:	000427c0 	call	427c <espera>
		}



	}
    41b8:	003fd906 	br	4120 <main+0xc4>

000041bc <printalcd>:
}

/*
 * Metodo para escrever palavras no LCD
 */
void printalcd(char word[][15], int lugar){
    41bc:	defffa04 	addi	sp,sp,-24
    41c0:	dfc00515 	stw	ra,20(sp)
    41c4:	df000415 	stw	fp,16(sp)
    41c8:	dc000315 	stw	r16,12(sp)
    41cc:	df000304 	addi	fp,sp,12
    41d0:	e13ffe15 	stw	r4,-8(fp)
    41d4:	e17fff15 	stw	r5,-4(fp)
	int i;
	/* Set the Cursor to the home position */
	 ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x02);
    41d8:	0005883a 	mov	r2,zero
    41dc:	00c00084 	movi	r3,2
    41e0:	10c5c032 	custom	0,r2,r2,r3
	 usleep(2000);
    41e4:	0101f404 	movi	r4,2000
    41e8:	00050280 	call	5028 <usleep>

	 /* Display clear */
	 ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x01);
    41ec:	0005883a 	mov	r2,zero
    41f0:	00c00044 	movi	r3,1
    41f4:	10c5c032 	custom	0,r2,r2,r3
	 usleep(2000);
    41f8:	0101f404 	movi	r4,2000
    41fc:	00050280 	call	5028 <usleep>

	//printf("%i",strlen(word));
	for(i=0;i<strlen(word);i++){
    4200:	e03ffd15 	stw	zero,-12(fp)
    4204:	00001306 	br	4254 <printalcd+0x98>
		ALT_CI_LCD_0(LCD_WR_DATA_REG, word[lugar][i]);
    4208:	e0bfff17 	ldw	r2,-4(fp)
    420c:	1009883a 	mov	r4,r2
    4210:	014003c4 	movi	r5,15
    4214:	00043ac0 	call	43ac <__mulsi3>
    4218:	e0fffe17 	ldw	r3,-8(fp)
    421c:	1887883a 	add	r3,r3,r2
    4220:	e0bffd17 	ldw	r2,-12(fp)
    4224:	1885883a 	add	r2,r3,r2
    4228:	10800003 	ldbu	r2,0(r2)
    422c:	10c03fcc 	andi	r3,r2,255
    4230:	18c0201c 	xori	r3,r3,128
    4234:	18ffe004 	addi	r3,r3,-128
    4238:	00800044 	movi	r2,1
    423c:	10c5c032 	custom	0,r2,r2,r3
		usleep(100);
    4240:	01001904 	movi	r4,100
    4244:	00050280 	call	5028 <usleep>
	 /* Display clear */
	 ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x01);
	 usleep(2000);

	//printf("%i",strlen(word));
	for(i=0;i<strlen(word);i++){
    4248:	e0bffd17 	ldw	r2,-12(fp)
    424c:	10800044 	addi	r2,r2,1
    4250:	e0bffd15 	stw	r2,-12(fp)
    4254:	e43ffd17 	ldw	r16,-12(fp)
    4258:	e13ffe17 	ldw	r4,-8(fp)
    425c:	00044840 	call	4484 <strlen>
    4260:	80bfe936 	bltu	r16,r2,4208 <printalcd+0x4c>
		ALT_CI_LCD_0(LCD_WR_DATA_REG, word[lugar][i]);
		usleep(100);
	}
}
    4264:	e037883a 	mov	sp,fp
    4268:	dfc00217 	ldw	ra,8(sp)
    426c:	df000117 	ldw	fp,4(sp)
    4270:	dc000017 	ldw	r16,0(sp)
    4274:	dec00304 	addi	sp,sp,12
    4278:	f800283a 	ret

0000427c <espera>:

void espera(int a){
    427c:	defffc04 	addi	sp,sp,-16
    4280:	dfc00315 	stw	ra,12(sp)
    4284:	df000215 	stw	fp,8(sp)
    4288:	df000204 	addi	fp,sp,8
    428c:	e13fff15 	stw	r4,-4(fp)
	volatile int i = 0;
    4290:	e03ffe15 	stw	zero,-8(fp)
	while(i<a*50000){
    4294:	00000306 	br	42a4 <espera+0x28>
		i++;
    4298:	e0bffe17 	ldw	r2,-8(fp)
    429c:	10800044 	addi	r2,r2,1
    42a0:	e0bffe15 	stw	r2,-8(fp)
	}
}

void espera(int a){
	volatile int i = 0;
	while(i<a*50000){
    42a4:	e13fff17 	ldw	r4,-4(fp)
    42a8:	0170d414 	movui	r5,50000
    42ac:	00043ac0 	call	43ac <__mulsi3>
    42b0:	e0fffe17 	ldw	r3,-8(fp)
    42b4:	18bff816 	blt	r3,r2,4298 <espera+0x1c>
		i++;
	}
}
    42b8:	e037883a 	mov	sp,fp
    42bc:	dfc00117 	ldw	ra,4(sp)
    42c0:	df000017 	ldw	fp,0(sp)
    42c4:	dec00204 	addi	sp,sp,8
    42c8:	f800283a 	ret

000042cc <lcd_init>:

void lcd_init( void) {
    42cc:	defffe04 	addi	sp,sp,-8
    42d0:	dfc00115 	stw	ra,4(sp)
    42d4:	df000015 	stw	fp,0(sp)
    42d8:	d839883a 	mov	fp,sp

 usleep(15000); /* Wait for more than 15 ms before init */
    42dc:	010ea604 	movi	r4,15000
    42e0:	00050280 	call	5028 <usleep>
 /* Set function code four times -- 8-bit, 2 line, 5x7 mode */
 ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x38);
    42e4:	0005883a 	mov	r2,zero
    42e8:	00c00e04 	movi	r3,56
    42ec:	10c5c032 	custom	0,r2,r2,r3
 usleep(4100); /* Wait for more than 4.1 ms */
    42f0:	01040104 	movi	r4,4100
    42f4:	00050280 	call	5028 <usleep>
 ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x38);
    42f8:	0005883a 	mov	r2,zero
    42fc:	00c00e04 	movi	r3,56
    4300:	10c5c032 	custom	0,r2,r2,r3
 usleep(100); /* Wait for more than 100 us */
    4304:	01001904 	movi	r4,100
    4308:	00050280 	call	5028 <usleep>
 ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x38);
    430c:	0005883a 	mov	r2,zero
    4310:	00c00e04 	movi	r3,56
    4314:	10c5c032 	custom	0,r2,r2,r3
 usleep(5000); /* Wait for more than 100 us */
    4318:	0104e204 	movi	r4,5000
    431c:	00050280 	call	5028 <usleep>
 ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x38);
    4320:	0005883a 	mov	r2,zero
    4324:	00c00e04 	movi	r3,56
    4328:	10c5c032 	custom	0,r2,r2,r3
 usleep(100); /* Wait for more than 100 us */
    432c:	01001904 	movi	r4,100
    4330:	00050280 	call	5028 <usleep>

 /* Set Display to OFF*/
 ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x08);
    4334:	0005883a 	mov	r2,zero
    4338:	00c00204 	movi	r3,8
    433c:	10c5c032 	custom	0,r2,r2,r3
 usleep(100);
    4340:	01001904 	movi	r4,100
    4344:	00050280 	call	5028 <usleep>

 /* Set Display to ON */
 ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x0C);
    4348:	0005883a 	mov	r2,zero
    434c:	00c00304 	movi	r3,12
    4350:	10c5c032 	custom	0,r2,r2,r3
 usleep(100);
    4354:	01001904 	movi	r4,100
    4358:	00050280 	call	5028 <usleep>

 /* Set Entry Mode -- Cursor increment, display doesn't shift */
 ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x06);
    435c:	0005883a 	mov	r2,zero
    4360:	00c00184 	movi	r3,6
    4364:	10c5c032 	custom	0,r2,r2,r3
 usleep(100);
    4368:	01001904 	movi	r4,100
    436c:	00050280 	call	5028 <usleep>

 /* Set the Cursor to the home position */
 ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x02);
    4370:	0005883a 	mov	r2,zero
    4374:	00c00084 	movi	r3,2
    4378:	10c5c032 	custom	0,r2,r2,r3
 usleep(2000);
    437c:	0101f404 	movi	r4,2000
    4380:	00050280 	call	5028 <usleep>

 /* Display clear */
 ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x01);
    4384:	0005883a 	mov	r2,zero
    4388:	00c00044 	movi	r3,1
    438c:	10c5c032 	custom	0,r2,r2,r3
 usleep(2000);
    4390:	0101f404 	movi	r4,2000
    4394:	00050280 	call	5028 <usleep>
}
    4398:	e037883a 	mov	sp,fp
    439c:	dfc00117 	ldw	ra,4(sp)
    43a0:	df000017 	ldw	fp,0(sp)
    43a4:	dec00204 	addi	sp,sp,8
    43a8:	f800283a 	ret

000043ac <__mulsi3>:
    43ac:	0005883a 	mov	r2,zero
    43b0:	20000726 	beq	r4,zero,43d0 <__mulsi3+0x24>
    43b4:	20c0004c 	andi	r3,r4,1
    43b8:	2008d07a 	srli	r4,r4,1
    43bc:	18000126 	beq	r3,zero,43c4 <__mulsi3+0x18>
    43c0:	1145883a 	add	r2,r2,r5
    43c4:	294b883a 	add	r5,r5,r5
    43c8:	203ffa1e 	bne	r4,zero,43b4 <__mulsi3+0x8>
    43cc:	f800283a 	ret
    43d0:	f800283a 	ret

000043d4 <memcpy>:
    43d4:	2005883a 	mov	r2,r4
    43d8:	30000726 	beq	r6,zero,43f8 <memcpy+0x24>
    43dc:	218d883a 	add	r6,r4,r6
    43e0:	2007883a 	mov	r3,r4
    43e4:	29c00003 	ldbu	r7,0(r5)
    43e8:	18c00044 	addi	r3,r3,1
    43ec:	29400044 	addi	r5,r5,1
    43f0:	19ffffc5 	stb	r7,-1(r3)
    43f4:	19bffb1e 	bne	r3,r6,43e4 <memcpy+0x10>
    43f8:	f800283a 	ret

000043fc <_printf_r>:
    43fc:	defffd04 	addi	sp,sp,-12
    4400:	dfc00015 	stw	ra,0(sp)
    4404:	d9800115 	stw	r6,4(sp)
    4408:	d9c00215 	stw	r7,8(sp)
    440c:	20800217 	ldw	r2,8(r4)
    4410:	00c00034 	movhi	r3,0
    4414:	18d30104 	addi	r3,r3,19460
    4418:	280d883a 	mov	r6,r5
    441c:	10c00115 	stw	r3,4(r2)
    4420:	100b883a 	mov	r5,r2
    4424:	d9c00104 	addi	r7,sp,4
    4428:	00044ac0 	call	44ac <___vfprintf_internal_r>
    442c:	dfc00017 	ldw	ra,0(sp)
    4430:	dec00304 	addi	sp,sp,12
    4434:	f800283a 	ret

00004438 <printf>:
    4438:	defffc04 	addi	sp,sp,-16
    443c:	dfc00015 	stw	ra,0(sp)
    4440:	d9400115 	stw	r5,4(sp)
    4444:	d9800215 	stw	r6,8(sp)
    4448:	d9c00315 	stw	r7,12(sp)
    444c:	00800034 	movhi	r2,0
    4450:	1099f204 	addi	r2,r2,26568
    4454:	10800017 	ldw	r2,0(r2)
    4458:	00c00034 	movhi	r3,0
    445c:	18d30104 	addi	r3,r3,19460
    4460:	200b883a 	mov	r5,r4
    4464:	10800217 	ldw	r2,8(r2)
    4468:	d9800104 	addi	r6,sp,4
    446c:	10c00115 	stw	r3,4(r2)
    4470:	1009883a 	mov	r4,r2
    4474:	0004be00 	call	4be0 <__vfprintf_internal>
    4478:	dfc00017 	ldw	ra,0(sp)
    447c:	dec00404 	addi	sp,sp,16
    4480:	f800283a 	ret

00004484 <strlen>:
    4484:	20800007 	ldb	r2,0(r4)
    4488:	10000626 	beq	r2,zero,44a4 <strlen+0x20>
    448c:	2005883a 	mov	r2,r4
    4490:	10800044 	addi	r2,r2,1
    4494:	10c00007 	ldb	r3,0(r2)
    4498:	183ffd1e 	bne	r3,zero,4490 <strlen+0xc>
    449c:	1105c83a 	sub	r2,r2,r4
    44a0:	f800283a 	ret
    44a4:	0005883a 	mov	r2,zero
    44a8:	f800283a 	ret

000044ac <___vfprintf_internal_r>:
    44ac:	deffe004 	addi	sp,sp,-128
    44b0:	d8c00804 	addi	r3,sp,32
    44b4:	ddc01d15 	stw	r23,116(sp)
    44b8:	dd401b15 	stw	r21,108(sp)
    44bc:	dd001a15 	stw	r20,104(sp)
    44c0:	dcc01915 	stw	r19,100(sp)
    44c4:	dc801815 	stw	r18,96(sp)
    44c8:	dc001615 	stw	r16,88(sp)
    44cc:	dfc01f15 	stw	ra,124(sp)
    44d0:	df001e15 	stw	fp,120(sp)
    44d4:	dd801c15 	stw	r22,112(sp)
    44d8:	dc401715 	stw	r17,92(sp)
    44dc:	d9000f15 	stw	r4,60(sp)
    44e0:	d9c00e15 	stw	r7,56(sp)
    44e4:	3021883a 	mov	r16,r6
    44e8:	0025883a 	mov	r18,zero
    44ec:	d8001415 	stw	zero,80(sp)
    44f0:	d8000d15 	stw	zero,52(sp)
    44f4:	0029883a 	mov	r20,zero
    44f8:	d8000b15 	stw	zero,44(sp)
    44fc:	d8000c15 	stw	zero,48(sp)
    4500:	d8001315 	stw	zero,76(sp)
    4504:	d8001015 	stw	zero,64(sp)
    4508:	002b883a 	mov	r21,zero
    450c:	04c00044 	movi	r19,1
    4510:	d8c00a15 	stw	r3,40(sp)
    4514:	282f883a 	mov	r23,r5
    4518:	80c00003 	ldbu	r3,0(r16)
    451c:	84000044 	addi	r16,r16,1
    4520:	18803fcc 	andi	r2,r3,255
    4524:	1080201c 	xori	r2,r2,128
    4528:	10bfe004 	addi	r2,r2,-128
    452c:	10001426 	beq	r2,zero,4580 <___vfprintf_internal_r+0xd4>
    4530:	acc03026 	beq	r21,r19,45f4 <___vfprintf_internal_r+0x148>
    4534:	9d401f16 	blt	r19,r21,45b4 <___vfprintf_internal_r+0x108>
    4538:	a83ff71e 	bne	r21,zero,4518 <___vfprintf_internal_r+0x6c>
    453c:	01000944 	movi	r4,37
    4540:	1100d926 	beq	r2,r4,48a8 <___vfprintf_internal_r+0x3fc>
    4544:	b8800117 	ldw	r2,4(r23)
    4548:	d9000f17 	ldw	r4,60(sp)
    454c:	d8c00905 	stb	r3,36(sp)
    4550:	b80b883a 	mov	r5,r23
    4554:	d9800904 	addi	r6,sp,36
    4558:	01c00044 	movi	r7,1
    455c:	103ee83a 	callr	r2
    4560:	1000a31e 	bne	r2,zero,47f0 <___vfprintf_internal_r+0x344>
    4564:	80c00003 	ldbu	r3,0(r16)
    4568:	94800044 	addi	r18,r18,1
    456c:	84000044 	addi	r16,r16,1
    4570:	18803fcc 	andi	r2,r3,255
    4574:	1080201c 	xori	r2,r2,128
    4578:	10bfe004 	addi	r2,r2,-128
    457c:	103fec1e 	bne	r2,zero,4530 <___vfprintf_internal_r+0x84>
    4580:	9005883a 	mov	r2,r18
    4584:	dfc01f17 	ldw	ra,124(sp)
    4588:	df001e17 	ldw	fp,120(sp)
    458c:	ddc01d17 	ldw	r23,116(sp)
    4590:	dd801c17 	ldw	r22,112(sp)
    4594:	dd401b17 	ldw	r21,108(sp)
    4598:	dd001a17 	ldw	r20,104(sp)
    459c:	dcc01917 	ldw	r19,100(sp)
    45a0:	dc801817 	ldw	r18,96(sp)
    45a4:	dc401717 	ldw	r17,92(sp)
    45a8:	dc001617 	ldw	r16,88(sp)
    45ac:	dec02004 	addi	sp,sp,128
    45b0:	f800283a 	ret
    45b4:	01000084 	movi	r4,2
    45b8:	a9001226 	beq	r21,r4,4604 <___vfprintf_internal_r+0x158>
    45bc:	010000c4 	movi	r4,3
    45c0:	a93fd51e 	bne	r21,r4,4518 <___vfprintf_internal_r+0x6c>
    45c4:	1c7ff404 	addi	r17,r3,-48
    45c8:	8c403fcc 	andi	r17,r17,255
    45cc:	01000244 	movi	r4,9
    45d0:	24401b36 	bltu	r4,r17,4640 <___vfprintf_internal_r+0x194>
    45d4:	d9000b17 	ldw	r4,44(sp)
    45d8:	00bfffc4 	movi	r2,-1
    45dc:	2080ea26 	beq	r4,r2,4988 <___vfprintf_internal_r+0x4dc>
    45e0:	01400284 	movi	r5,10
    45e4:	00043ac0 	call	43ac <__mulsi3>
    45e8:	88a3883a 	add	r17,r17,r2
    45ec:	dc400b15 	stw	r17,44(sp)
    45f0:	003fc906 	br	4518 <___vfprintf_internal_r+0x6c>
    45f4:	01000c04 	movi	r4,48
    45f8:	1100de26 	beq	r2,r4,4974 <___vfprintf_internal_r+0x4c8>
    45fc:	01000944 	movi	r4,37
    4600:	1100fd26 	beq	r2,r4,49f8 <___vfprintf_internal_r+0x54c>
    4604:	1c7ff404 	addi	r17,r3,-48
    4608:	8c403fcc 	andi	r17,r17,255
    460c:	01000244 	movi	r4,9
    4610:	24400936 	bltu	r4,r17,4638 <___vfprintf_internal_r+0x18c>
    4614:	d9000c17 	ldw	r4,48(sp)
    4618:	00bfffc4 	movi	r2,-1
    461c:	2080d826 	beq	r4,r2,4980 <___vfprintf_internal_r+0x4d4>
    4620:	01400284 	movi	r5,10
    4624:	00043ac0 	call	43ac <__mulsi3>
    4628:	88a3883a 	add	r17,r17,r2
    462c:	dc400c15 	stw	r17,48(sp)
    4630:	05400084 	movi	r21,2
    4634:	003fb806 	br	4518 <___vfprintf_internal_r+0x6c>
    4638:	01000b84 	movi	r4,46
    463c:	1100a726 	beq	r2,r4,48dc <___vfprintf_internal_r+0x430>
    4640:	01401b04 	movi	r5,108
    4644:	1140a326 	beq	r2,r5,48d4 <___vfprintf_internal_r+0x428>
    4648:	d9000b17 	ldw	r4,44(sp)
    464c:	00bfffc4 	movi	r2,-1
    4650:	2080e626 	beq	r4,r2,49ec <___vfprintf_internal_r+0x540>
    4654:	d8001015 	stw	zero,64(sp)
    4658:	18ffea04 	addi	r3,r3,-88
    465c:	18c03fcc 	andi	r3,r3,255
    4660:	00800804 	movi	r2,32
    4664:	10c0022e 	bgeu	r2,r3,4670 <___vfprintf_internal_r+0x1c4>
    4668:	002b883a 	mov	r21,zero
    466c:	003faa06 	br	4518 <___vfprintf_internal_r+0x6c>
    4670:	18c7883a 	add	r3,r3,r3
    4674:	18c7883a 	add	r3,r3,r3
    4678:	01400034 	movhi	r5,0
    467c:	2951a304 	addi	r5,r5,18060
    4680:	1947883a 	add	r3,r3,r5
    4684:	18800017 	ldw	r2,0(r3)
    4688:	1000683a 	jmp	r2
    468c:	00004a24 	muli	zero,zero,296
    4690:	00004668 	cmpgeui	zero,zero,281
    4694:	00004668 	cmpgeui	zero,zero,281
    4698:	00004668 	cmpgeui	zero,zero,281
    469c:	00004668 	cmpgeui	zero,zero,281
    46a0:	00004668 	cmpgeui	zero,zero,281
    46a4:	00004668 	cmpgeui	zero,zero,281
    46a8:	00004668 	cmpgeui	zero,zero,281
    46ac:	00004668 	cmpgeui	zero,zero,281
    46b0:	00004668 	cmpgeui	zero,zero,281
    46b4:	00004668 	cmpgeui	zero,zero,281
    46b8:	00004a34 	movhi	zero,296
    46bc:	00004710 	cmplti	zero,zero,284
    46c0:	00004668 	cmpgeui	zero,zero,281
    46c4:	00004668 	cmpgeui	zero,zero,281
    46c8:	00004668 	cmpgeui	zero,zero,281
    46cc:	00004668 	cmpgeui	zero,zero,281
    46d0:	00004710 	cmplti	zero,zero,284
    46d4:	00004668 	cmpgeui	zero,zero,281
    46d8:	00004668 	cmpgeui	zero,zero,281
    46dc:	00004668 	cmpgeui	zero,zero,281
    46e0:	00004668 	cmpgeui	zero,zero,281
    46e4:	00004668 	cmpgeui	zero,zero,281
    46e8:	000047f8 	rdprs	zero,zero,287
    46ec:	00004668 	cmpgeui	zero,zero,281
    46f0:	00004668 	cmpgeui	zero,zero,281
    46f4:	00004668 	cmpgeui	zero,zero,281
    46f8:	00004a80 	call	4a8 <__alt_mem_memory-0x3b58>
    46fc:	00004668 	cmpgeui	zero,zero,281
    4700:	000047fc 	xorhi	zero,zero,287
    4704:	00004668 	cmpgeui	zero,zero,281
    4708:	00004668 	cmpgeui	zero,zero,281
    470c:	00004a2c 	andhi	zero,zero,296
    4710:	d8c00d17 	ldw	r3,52(sp)
    4714:	18003926 	beq	r3,zero,47fc <___vfprintf_internal_r+0x350>
    4718:	d9000e17 	ldw	r4,56(sp)
    471c:	00c00044 	movi	r3,1
    4720:	25400017 	ldw	r21,0(r4)
    4724:	21000104 	addi	r4,r4,4
    4728:	d9000e15 	stw	r4,56(sp)
    472c:	d8c00d15 	stw	r3,52(sp)
    4730:	a8012116 	blt	r21,zero,4bb8 <___vfprintf_internal_r+0x70c>
    4734:	d8001215 	stw	zero,72(sp)
    4738:	d823883a 	mov	r17,sp
    473c:	a800371e 	bne	r21,zero,481c <___vfprintf_internal_r+0x370>
    4740:	d9400b17 	ldw	r5,44(sp)
    4744:	d809883a 	mov	r4,sp
    4748:	01400b0e 	bge	zero,r5,4778 <___vfprintf_internal_r+0x2cc>
    474c:	d8800b17 	ldw	r2,44(sp)
    4750:	d823883a 	mov	r17,sp
    4754:	00c00c04 	movi	r3,48
    4758:	00000206 	br	4764 <___vfprintf_internal_r+0x2b8>
    475c:	d9400a17 	ldw	r5,40(sp)
    4760:	89400426 	beq	r17,r5,4774 <___vfprintf_internal_r+0x2c8>
    4764:	88c00005 	stb	r3,0(r17)
    4768:	10bfffc4 	addi	r2,r2,-1
    476c:	8c400044 	addi	r17,r17,1
    4770:	103ffa1e 	bne	r2,zero,475c <___vfprintf_internal_r+0x2b0>
    4774:	892bc83a 	sub	r21,r17,r4
    4778:	d8c01217 	ldw	r3,72(sp)
    477c:	d9000c17 	ldw	r4,48(sp)
    4780:	a8c5883a 	add	r2,r21,r3
    4784:	d8c01017 	ldw	r3,64(sp)
    4788:	2085c83a 	sub	r2,r4,r2
    478c:	d8801115 	stw	r2,68(sp)
    4790:	18007f26 	beq	r3,zero,4990 <___vfprintf_internal_r+0x4e4>
    4794:	d8c01217 	ldw	r3,72(sp)
    4798:	1800fa1e 	bne	r3,zero,4b84 <___vfprintf_internal_r+0x6d8>
    479c:	d8c01117 	ldw	r3,68(sp)
    47a0:	00c0620e 	bge	zero,r3,492c <___vfprintf_internal_r+0x480>
    47a4:	00800c04 	movi	r2,48
    47a8:	d88008c5 	stb	r2,35(sp)
    47ac:	b805883a 	mov	r2,r23
    47b0:	dc001215 	stw	r16,72(sp)
    47b4:	882f883a 	mov	r23,r17
    47b8:	1f3fffc4 	addi	fp,r3,-1
    47bc:	05bfffc4 	movi	r22,-1
    47c0:	dc000f17 	ldw	r16,60(sp)
    47c4:	1023883a 	mov	r17,r2
    47c8:	00000206 	br	47d4 <___vfprintf_internal_r+0x328>
    47cc:	e73fffc4 	addi	fp,fp,-1
    47d0:	e580fc26 	beq	fp,r22,4bc4 <___vfprintf_internal_r+0x718>
    47d4:	88800117 	ldw	r2,4(r17)
    47d8:	8009883a 	mov	r4,r16
    47dc:	880b883a 	mov	r5,r17
    47e0:	d98008c4 	addi	r6,sp,35
    47e4:	01c00044 	movi	r7,1
    47e8:	103ee83a 	callr	r2
    47ec:	103ff726 	beq	r2,zero,47cc <___vfprintf_internal_r+0x320>
    47f0:	04bfffc4 	movi	r18,-1
    47f4:	003f6206 	br	4580 <___vfprintf_internal_r+0xd4>
    47f8:	05000204 	movi	r20,8
    47fc:	d9400e17 	ldw	r5,56(sp)
    4800:	2d400017 	ldw	r21,0(r5)
    4804:	29400104 	addi	r5,r5,4
    4808:	d9400e15 	stw	r5,56(sp)
    480c:	d8000d15 	stw	zero,52(sp)
    4810:	d8001215 	stw	zero,72(sp)
    4814:	d823883a 	mov	r17,sp
    4818:	a83fc926 	beq	r21,zero,4740 <___vfprintf_internal_r+0x294>
    481c:	05800244 	movi	r22,9
    4820:	dc001115 	stw	r16,68(sp)
    4824:	df001417 	ldw	fp,80(sp)
    4828:	00000506 	br	4840 <___vfprintf_internal_r+0x394>
    482c:	15400c04 	addi	r21,r2,48
    4830:	8d400005 	stb	r21,0(r17)
    4834:	802b883a 	mov	r21,r16
    4838:	8c400044 	addi	r17,r17,1
    483c:	80000f26 	beq	r16,zero,487c <___vfprintf_internal_r+0x3d0>
    4840:	a809883a 	mov	r4,r21
    4844:	a00b883a 	mov	r5,r20
    4848:	0004e700 	call	4e70 <__udivsi3>
    484c:	a009883a 	mov	r4,r20
    4850:	100b883a 	mov	r5,r2
    4854:	1021883a 	mov	r16,r2
    4858:	00043ac0 	call	43ac <__mulsi3>
    485c:	a885c83a 	sub	r2,r21,r2
    4860:	b0bff20e 	bge	r22,r2,482c <___vfprintf_internal_r+0x380>
    4864:	e0000e26 	beq	fp,zero,48a0 <___vfprintf_internal_r+0x3f4>
    4868:	15400dc4 	addi	r21,r2,55
    486c:	8d400005 	stb	r21,0(r17)
    4870:	802b883a 	mov	r21,r16
    4874:	8c400044 	addi	r17,r17,1
    4878:	803ff11e 	bne	r16,zero,4840 <___vfprintf_internal_r+0x394>
    487c:	d9000b17 	ldw	r4,44(sp)
    4880:	8eebc83a 	sub	r21,r17,sp
    4884:	dc001117 	ldw	r16,68(sp)
    4888:	2545c83a 	sub	r2,r4,r21
    488c:	d809883a 	mov	r4,sp
    4890:	00bfb90e 	bge	zero,r2,4778 <___vfprintf_internal_r+0x2cc>
    4894:	d8c00a17 	ldw	r3,40(sp)
    4898:	88ffae36 	bltu	r17,r3,4754 <___vfprintf_internal_r+0x2a8>
    489c:	003fb606 	br	4778 <___vfprintf_internal_r+0x2cc>
    48a0:	154015c4 	addi	r21,r2,87
    48a4:	003fe206 	br	4830 <___vfprintf_internal_r+0x384>
    48a8:	00c00044 	movi	r3,1
    48ac:	013fffc4 	movi	r4,-1
    48b0:	d8c00d15 	stw	r3,52(sp)
    48b4:	d9000b15 	stw	r4,44(sp)
    48b8:	d8001415 	stw	zero,80(sp)
    48bc:	05000284 	movi	r20,10
    48c0:	d9000c15 	stw	r4,48(sp)
    48c4:	d8001315 	stw	zero,76(sp)
    48c8:	d8001015 	stw	zero,64(sp)
    48cc:	182b883a 	mov	r21,r3
    48d0:	003f1106 	br	4518 <___vfprintf_internal_r+0x6c>
    48d4:	00c00044 	movi	r3,1
    48d8:	d8c01315 	stw	r3,76(sp)
    48dc:	054000c4 	movi	r21,3
    48e0:	003f0d06 	br	4518 <___vfprintf_internal_r+0x6c>
    48e4:	d8c01117 	ldw	r3,68(sp)
    48e8:	dc001517 	ldw	r16,84(sp)
    48ec:	8805883a 	mov	r2,r17
    48f0:	90e5883a 	add	r18,r18,r3
    48f4:	b823883a 	mov	r17,r23
    48f8:	102f883a 	mov	r23,r2
    48fc:	d8c01217 	ldw	r3,72(sp)
    4900:	18000a26 	beq	r3,zero,492c <___vfprintf_internal_r+0x480>
    4904:	b8800117 	ldw	r2,4(r23)
    4908:	d9000f17 	ldw	r4,60(sp)
    490c:	00c00b44 	movi	r3,45
    4910:	d8c00905 	stb	r3,36(sp)
    4914:	b80b883a 	mov	r5,r23
    4918:	d9800904 	addi	r6,sp,36
    491c:	01c00044 	movi	r7,1
    4920:	103ee83a 	callr	r2
    4924:	103fb21e 	bne	r2,zero,47f0 <___vfprintf_internal_r+0x344>
    4928:	94800044 	addi	r18,r18,1
    492c:	8d6dc83a 	sub	r22,r17,r21
    4930:	057f4d0e 	bge	zero,r21,4668 <___vfprintf_internal_r+0x1bc>
    4934:	dd400f17 	ldw	r21,60(sp)
    4938:	00000206 	br	4944 <___vfprintf_internal_r+0x498>
    493c:	94800044 	addi	r18,r18,1
    4940:	8dbf4926 	beq	r17,r22,4668 <___vfprintf_internal_r+0x1bc>
    4944:	8c7fffc4 	addi	r17,r17,-1
    4948:	88c00003 	ldbu	r3,0(r17)
    494c:	b8800117 	ldw	r2,4(r23)
    4950:	a809883a 	mov	r4,r21
    4954:	d8c00905 	stb	r3,36(sp)
    4958:	b80b883a 	mov	r5,r23
    495c:	d9800904 	addi	r6,sp,36
    4960:	01c00044 	movi	r7,1
    4964:	103ee83a 	callr	r2
    4968:	103ff426 	beq	r2,zero,493c <___vfprintf_internal_r+0x490>
    496c:	04bfffc4 	movi	r18,-1
    4970:	003f0306 	br	4580 <___vfprintf_internal_r+0xd4>
    4974:	dd401015 	stw	r21,64(sp)
    4978:	05400084 	movi	r21,2
    497c:	003ee606 	br	4518 <___vfprintf_internal_r+0x6c>
    4980:	0005883a 	mov	r2,zero
    4984:	003f2806 	br	4628 <___vfprintf_internal_r+0x17c>
    4988:	0005883a 	mov	r2,zero
    498c:	003f1606 	br	45e8 <___vfprintf_internal_r+0x13c>
    4990:	d8c01117 	ldw	r3,68(sp)
    4994:	00ffd90e 	bge	zero,r3,48fc <___vfprintf_internal_r+0x450>
    4998:	00800804 	movi	r2,32
    499c:	d8800885 	stb	r2,34(sp)
    49a0:	b805883a 	mov	r2,r23
    49a4:	dc001515 	stw	r16,84(sp)
    49a8:	882f883a 	mov	r23,r17
    49ac:	1f3fffc4 	addi	fp,r3,-1
    49b0:	05bfffc4 	movi	r22,-1
    49b4:	dc000f17 	ldw	r16,60(sp)
    49b8:	1023883a 	mov	r17,r2
    49bc:	00000206 	br	49c8 <___vfprintf_internal_r+0x51c>
    49c0:	e73fffc4 	addi	fp,fp,-1
    49c4:	e5bfc726 	beq	fp,r22,48e4 <___vfprintf_internal_r+0x438>
    49c8:	88800117 	ldw	r2,4(r17)
    49cc:	8009883a 	mov	r4,r16
    49d0:	880b883a 	mov	r5,r17
    49d4:	d9800884 	addi	r6,sp,34
    49d8:	01c00044 	movi	r7,1
    49dc:	103ee83a 	callr	r2
    49e0:	103ff726 	beq	r2,zero,49c0 <___vfprintf_internal_r+0x514>
    49e4:	04bfffc4 	movi	r18,-1
    49e8:	003ee506 	br	4580 <___vfprintf_internal_r+0xd4>
    49ec:	01000044 	movi	r4,1
    49f0:	d9000b15 	stw	r4,44(sp)
    49f4:	003f1806 	br	4658 <___vfprintf_internal_r+0x1ac>
    49f8:	b8c00117 	ldw	r3,4(r23)
    49fc:	d9000f17 	ldw	r4,60(sp)
    4a00:	d8800905 	stb	r2,36(sp)
    4a04:	b80b883a 	mov	r5,r23
    4a08:	d9800904 	addi	r6,sp,36
    4a0c:	a80f883a 	mov	r7,r21
    4a10:	183ee83a 	callr	r3
    4a14:	103f761e 	bne	r2,zero,47f0 <___vfprintf_internal_r+0x344>
    4a18:	94800044 	addi	r18,r18,1
    4a1c:	002b883a 	mov	r21,zero
    4a20:	003ebd06 	br	4518 <___vfprintf_internal_r+0x6c>
    4a24:	00c00044 	movi	r3,1
    4a28:	d8c01415 	stw	r3,80(sp)
    4a2c:	05000404 	movi	r20,16
    4a30:	003f7206 	br	47fc <___vfprintf_internal_r+0x350>
    4a34:	d9000c17 	ldw	r4,48(sp)
    4a38:	9900420e 	bge	r19,r4,4b44 <___vfprintf_internal_r+0x698>
    4a3c:	df000f17 	ldw	fp,60(sp)
    4a40:	25bfffc4 	addi	r22,r4,-1
    4a44:	00800804 	movi	r2,32
    4a48:	d8800845 	stb	r2,33(sp)
    4a4c:	b023883a 	mov	r17,r22
    4a50:	057fffc4 	movi	r21,-1
    4a54:	8c7fffc4 	addi	r17,r17,-1
    4a58:	8d403926 	beq	r17,r21,4b40 <___vfprintf_internal_r+0x694>
    4a5c:	b8800117 	ldw	r2,4(r23)
    4a60:	e009883a 	mov	r4,fp
    4a64:	b80b883a 	mov	r5,r23
    4a68:	d9800844 	addi	r6,sp,33
    4a6c:	01c00044 	movi	r7,1
    4a70:	103ee83a 	callr	r2
    4a74:	103ff726 	beq	r2,zero,4a54 <___vfprintf_internal_r+0x5a8>
    4a78:	04bfffc4 	movi	r18,-1
    4a7c:	003ec006 	br	4580 <___vfprintf_internal_r+0xd4>
    4a80:	d9000e17 	ldw	r4,56(sp)
    4a84:	d8c00e17 	ldw	r3,56(sp)
    4a88:	21000017 	ldw	r4,0(r4)
    4a8c:	18c00104 	addi	r3,r3,4
    4a90:	d8c00e15 	stw	r3,56(sp)
    4a94:	d9001215 	stw	r4,72(sp)
    4a98:	00044840 	call	4484 <strlen>
    4a9c:	d9000c17 	ldw	r4,48(sp)
    4aa0:	102d883a 	mov	r22,r2
    4aa4:	20b9c83a 	sub	fp,r4,r2
    4aa8:	07001b0e 	bge	zero,fp,4b18 <___vfprintf_internal_r+0x66c>
    4aac:	00800804 	movi	r2,32
    4ab0:	d8800805 	stb	r2,32(sp)
    4ab4:	b805883a 	mov	r2,r23
    4ab8:	dc001115 	stw	r16,68(sp)
    4abc:	b02f883a 	mov	r23,r22
    4ac0:	e47fffc4 	addi	r17,fp,-1
    4ac4:	902d883a 	mov	r22,r18
    4ac8:	057fffc4 	movi	r21,-1
    4acc:	dc000f17 	ldw	r16,60(sp)
    4ad0:	1025883a 	mov	r18,r2
    4ad4:	00000206 	br	4ae0 <___vfprintf_internal_r+0x634>
    4ad8:	8c7fffc4 	addi	r17,r17,-1
    4adc:	8d400826 	beq	r17,r21,4b00 <___vfprintf_internal_r+0x654>
    4ae0:	90800117 	ldw	r2,4(r18)
    4ae4:	8009883a 	mov	r4,r16
    4ae8:	900b883a 	mov	r5,r18
    4aec:	d9800804 	addi	r6,sp,32
    4af0:	01c00044 	movi	r7,1
    4af4:	103ee83a 	callr	r2
    4af8:	103ff726 	beq	r2,zero,4ad8 <___vfprintf_internal_r+0x62c>
    4afc:	003f3c06 	br	47f0 <___vfprintf_internal_r+0x344>
    4b00:	dc001117 	ldw	r16,68(sp)
    4b04:	9005883a 	mov	r2,r18
    4b08:	b025883a 	mov	r18,r22
    4b0c:	9725883a 	add	r18,r18,fp
    4b10:	b82d883a 	mov	r22,r23
    4b14:	102f883a 	mov	r23,r2
    4b18:	b8800117 	ldw	r2,4(r23)
    4b1c:	d9000f17 	ldw	r4,60(sp)
    4b20:	d9801217 	ldw	r6,72(sp)
    4b24:	b80b883a 	mov	r5,r23
    4b28:	b00f883a 	mov	r7,r22
    4b2c:	103ee83a 	callr	r2
    4b30:	103f2f1e 	bne	r2,zero,47f0 <___vfprintf_internal_r+0x344>
    4b34:	95a5883a 	add	r18,r18,r22
    4b38:	002b883a 	mov	r21,zero
    4b3c:	003e7606 	br	4518 <___vfprintf_internal_r+0x6c>
    4b40:	95a5883a 	add	r18,r18,r22
    4b44:	d9400e17 	ldw	r5,56(sp)
    4b48:	b8800117 	ldw	r2,4(r23)
    4b4c:	d9000f17 	ldw	r4,60(sp)
    4b50:	28c00017 	ldw	r3,0(r5)
    4b54:	d9800904 	addi	r6,sp,36
    4b58:	b80b883a 	mov	r5,r23
    4b5c:	d8c00905 	stb	r3,36(sp)
    4b60:	d8c00e17 	ldw	r3,56(sp)
    4b64:	01c00044 	movi	r7,1
    4b68:	1c400104 	addi	r17,r3,4
    4b6c:	103ee83a 	callr	r2
    4b70:	103f1f1e 	bne	r2,zero,47f0 <___vfprintf_internal_r+0x344>
    4b74:	94800044 	addi	r18,r18,1
    4b78:	dc400e15 	stw	r17,56(sp)
    4b7c:	002b883a 	mov	r21,zero
    4b80:	003e6506 	br	4518 <___vfprintf_internal_r+0x6c>
    4b84:	b8800117 	ldw	r2,4(r23)
    4b88:	d9000f17 	ldw	r4,60(sp)
    4b8c:	00c00b44 	movi	r3,45
    4b90:	d8c00905 	stb	r3,36(sp)
    4b94:	b80b883a 	mov	r5,r23
    4b98:	d9800904 	addi	r6,sp,36
    4b9c:	01c00044 	movi	r7,1
    4ba0:	103ee83a 	callr	r2
    4ba4:	103f121e 	bne	r2,zero,47f0 <___vfprintf_internal_r+0x344>
    4ba8:	d8c01117 	ldw	r3,68(sp)
    4bac:	94800044 	addi	r18,r18,1
    4bb0:	00fefc16 	blt	zero,r3,47a4 <___vfprintf_internal_r+0x2f8>
    4bb4:	003f5d06 	br	492c <___vfprintf_internal_r+0x480>
    4bb8:	056bc83a 	sub	r21,zero,r21
    4bbc:	d8c01215 	stw	r3,72(sp)
    4bc0:	003f1406 	br	4814 <___vfprintf_internal_r+0x368>
    4bc4:	d8c01117 	ldw	r3,68(sp)
    4bc8:	8805883a 	mov	r2,r17
    4bcc:	dc001217 	ldw	r16,72(sp)
    4bd0:	b823883a 	mov	r17,r23
    4bd4:	90e5883a 	add	r18,r18,r3
    4bd8:	102f883a 	mov	r23,r2
    4bdc:	003f5306 	br	492c <___vfprintf_internal_r+0x480>

00004be0 <__vfprintf_internal>:
    4be0:	00800034 	movhi	r2,0
    4be4:	1099f204 	addi	r2,r2,26568
    4be8:	2007883a 	mov	r3,r4
    4bec:	11000017 	ldw	r4,0(r2)
    4bf0:	2805883a 	mov	r2,r5
    4bf4:	300f883a 	mov	r7,r6
    4bf8:	180b883a 	mov	r5,r3
    4bfc:	100d883a 	mov	r6,r2
    4c00:	00044ac1 	jmpi	44ac <___vfprintf_internal_r>

00004c04 <__sfvwrite_small_dev>:
    4c04:	2880000b 	ldhu	r2,0(r5)
    4c08:	defffa04 	addi	sp,sp,-24
    4c0c:	dcc00315 	stw	r19,12(sp)
    4c10:	10c0020c 	andi	r3,r2,8
    4c14:	18ffffcc 	andi	r3,r3,65535
    4c18:	18e0001c 	xori	r3,r3,32768
    4c1c:	dc800215 	stw	r18,8(sp)
    4c20:	dc400115 	stw	r17,4(sp)
    4c24:	dfc00515 	stw	ra,20(sp)
    4c28:	dd000415 	stw	r20,16(sp)
    4c2c:	dc000015 	stw	r16,0(sp)
    4c30:	18e00004 	addi	r3,r3,-32768
    4c34:	2825883a 	mov	r18,r5
    4c38:	2027883a 	mov	r19,r4
    4c3c:	3023883a 	mov	r17,r6
    4c40:	18002626 	beq	r3,zero,4cdc <__sfvwrite_small_dev+0xd8>
    4c44:	2940008f 	ldh	r5,2(r5)
    4c48:	28001016 	blt	r5,zero,4c8c <__sfvwrite_small_dev+0x88>
    4c4c:	01c01a0e 	bge	zero,r7,4cb8 <__sfvwrite_small_dev+0xb4>
    4c50:	3821883a 	mov	r16,r7
    4c54:	05010004 	movi	r20,1024
    4c58:	00000306 	br	4c68 <__sfvwrite_small_dev+0x64>
    4c5c:	88a3883a 	add	r17,r17,r2
    4c60:	0400150e 	bge	zero,r16,4cb8 <__sfvwrite_small_dev+0xb4>
    4c64:	9140008f 	ldh	r5,2(r18)
    4c68:	880d883a 	mov	r6,r17
    4c6c:	9809883a 	mov	r4,r19
    4c70:	800f883a 	mov	r7,r16
    4c74:	a400010e 	bge	r20,r16,4c7c <__sfvwrite_small_dev+0x78>
    4c78:	01c10004 	movi	r7,1024
    4c7c:	0004ce40 	call	4ce4 <_write_r>
    4c80:	80a1c83a 	sub	r16,r16,r2
    4c84:	00bff516 	blt	zero,r2,4c5c <__sfvwrite_small_dev+0x58>
    4c88:	9080000b 	ldhu	r2,0(r18)
    4c8c:	10801014 	ori	r2,r2,64
    4c90:	9080000d 	sth	r2,0(r18)
    4c94:	00bfffc4 	movi	r2,-1
    4c98:	dfc00517 	ldw	ra,20(sp)
    4c9c:	dd000417 	ldw	r20,16(sp)
    4ca0:	dcc00317 	ldw	r19,12(sp)
    4ca4:	dc800217 	ldw	r18,8(sp)
    4ca8:	dc400117 	ldw	r17,4(sp)
    4cac:	dc000017 	ldw	r16,0(sp)
    4cb0:	dec00604 	addi	sp,sp,24
    4cb4:	f800283a 	ret
    4cb8:	0005883a 	mov	r2,zero
    4cbc:	dfc00517 	ldw	ra,20(sp)
    4cc0:	dd000417 	ldw	r20,16(sp)
    4cc4:	dcc00317 	ldw	r19,12(sp)
    4cc8:	dc800217 	ldw	r18,8(sp)
    4ccc:	dc400117 	ldw	r17,4(sp)
    4cd0:	dc000017 	ldw	r16,0(sp)
    4cd4:	dec00604 	addi	sp,sp,24
    4cd8:	f800283a 	ret
    4cdc:	00bfffc4 	movi	r2,-1
    4ce0:	003fed06 	br	4c98 <__sfvwrite_small_dev+0x94>

00004ce4 <_write_r>:
    4ce4:	defffd04 	addi	sp,sp,-12
    4ce8:	dc400115 	stw	r17,4(sp)
    4cec:	dc000015 	stw	r16,0(sp)
    4cf0:	2023883a 	mov	r17,r4
    4cf4:	04000034 	movhi	r16,0
    4cf8:	841aaf04 	addi	r16,r16,27324
    4cfc:	2809883a 	mov	r4,r5
    4d00:	300b883a 	mov	r5,r6
    4d04:	380d883a 	mov	r6,r7
    4d08:	dfc00215 	stw	ra,8(sp)
    4d0c:	80000015 	stw	zero,0(r16)
    4d10:	00050a80 	call	50a8 <write>
    4d14:	00ffffc4 	movi	r3,-1
    4d18:	10c00526 	beq	r2,r3,4d30 <_write_r+0x4c>
    4d1c:	dfc00217 	ldw	ra,8(sp)
    4d20:	dc400117 	ldw	r17,4(sp)
    4d24:	dc000017 	ldw	r16,0(sp)
    4d28:	dec00304 	addi	sp,sp,12
    4d2c:	f800283a 	ret
    4d30:	80c00017 	ldw	r3,0(r16)
    4d34:	183ff926 	beq	r3,zero,4d1c <_write_r+0x38>
    4d38:	88c00015 	stw	r3,0(r17)
    4d3c:	dfc00217 	ldw	ra,8(sp)
    4d40:	dc400117 	ldw	r17,4(sp)
    4d44:	dc000017 	ldw	r16,0(sp)
    4d48:	dec00304 	addi	sp,sp,12
    4d4c:	f800283a 	ret

00004d50 <udivmodsi4>:
    4d50:	2005883a 	mov	r2,r4
    4d54:	2900182e 	bgeu	r5,r4,4db8 <udivmodsi4+0x68>
    4d58:	28001716 	blt	r5,zero,4db8 <udivmodsi4+0x68>
    4d5c:	01000804 	movi	r4,32
    4d60:	00c00044 	movi	r3,1
    4d64:	00000206 	br	4d70 <udivmodsi4+0x20>
    4d68:	20001126 	beq	r4,zero,4db0 <udivmodsi4+0x60>
    4d6c:	28000516 	blt	r5,zero,4d84 <udivmodsi4+0x34>
    4d70:	294b883a 	add	r5,r5,r5
    4d74:	213fffc4 	addi	r4,r4,-1
    4d78:	18c7883a 	add	r3,r3,r3
    4d7c:	28bffa36 	bltu	r5,r2,4d68 <udivmodsi4+0x18>
    4d80:	18000b26 	beq	r3,zero,4db0 <udivmodsi4+0x60>
    4d84:	0009883a 	mov	r4,zero
    4d88:	11400236 	bltu	r2,r5,4d94 <udivmodsi4+0x44>
    4d8c:	1145c83a 	sub	r2,r2,r5
    4d90:	20c8b03a 	or	r4,r4,r3
    4d94:	1806d07a 	srli	r3,r3,1
    4d98:	280ad07a 	srli	r5,r5,1
    4d9c:	183ffa1e 	bne	r3,zero,4d88 <udivmodsi4+0x38>
    4da0:	3000021e 	bne	r6,zero,4dac <udivmodsi4+0x5c>
    4da4:	2005883a 	mov	r2,r4
    4da8:	f800283a 	ret
    4dac:	f800283a 	ret
    4db0:	0009883a 	mov	r4,zero
    4db4:	003ffa06 	br	4da0 <udivmodsi4+0x50>
    4db8:	00c00044 	movi	r3,1
    4dbc:	0009883a 	mov	r4,zero
    4dc0:	003ff106 	br	4d88 <udivmodsi4+0x38>

00004dc4 <__divsi3>:
    4dc4:	defffe04 	addi	sp,sp,-8
    4dc8:	dfc00115 	stw	ra,4(sp)
    4dcc:	dc000015 	stw	r16,0(sp)
    4dd0:	20000a16 	blt	r4,zero,4dfc <__divsi3+0x38>
    4dd4:	0021883a 	mov	r16,zero
    4dd8:	28000b16 	blt	r5,zero,4e08 <__divsi3+0x44>
    4ddc:	000d883a 	mov	r6,zero
    4de0:	0004d500 	call	4d50 <udivmodsi4>
    4de4:	80000126 	beq	r16,zero,4dec <__divsi3+0x28>
    4de8:	0085c83a 	sub	r2,zero,r2
    4dec:	dfc00117 	ldw	ra,4(sp)
    4df0:	dc000017 	ldw	r16,0(sp)
    4df4:	dec00204 	addi	sp,sp,8
    4df8:	f800283a 	ret
    4dfc:	0109c83a 	sub	r4,zero,r4
    4e00:	04000044 	movi	r16,1
    4e04:	283ff50e 	bge	r5,zero,4ddc <__divsi3+0x18>
    4e08:	014bc83a 	sub	r5,zero,r5
    4e0c:	8400005c 	xori	r16,r16,1
    4e10:	003ff206 	br	4ddc <__divsi3+0x18>

00004e14 <__modsi3>:
    4e14:	deffff04 	addi	sp,sp,-4
    4e18:	dfc00015 	stw	ra,0(sp)
    4e1c:	20000516 	blt	r4,zero,4e34 <__modsi3+0x20>
    4e20:	28000c16 	blt	r5,zero,4e54 <__modsi3+0x40>
    4e24:	01800044 	movi	r6,1
    4e28:	dfc00017 	ldw	ra,0(sp)
    4e2c:	dec00104 	addi	sp,sp,4
    4e30:	0004d501 	jmpi	4d50 <udivmodsi4>
    4e34:	0109c83a 	sub	r4,zero,r4
    4e38:	28000b16 	blt	r5,zero,4e68 <__modsi3+0x54>
    4e3c:	01800044 	movi	r6,1
    4e40:	0004d500 	call	4d50 <udivmodsi4>
    4e44:	0085c83a 	sub	r2,zero,r2
    4e48:	dfc00017 	ldw	ra,0(sp)
    4e4c:	dec00104 	addi	sp,sp,4
    4e50:	f800283a 	ret
    4e54:	014bc83a 	sub	r5,zero,r5
    4e58:	01800044 	movi	r6,1
    4e5c:	dfc00017 	ldw	ra,0(sp)
    4e60:	dec00104 	addi	sp,sp,4
    4e64:	0004d501 	jmpi	4d50 <udivmodsi4>
    4e68:	014bc83a 	sub	r5,zero,r5
    4e6c:	003ff306 	br	4e3c <__modsi3+0x28>

00004e70 <__udivsi3>:
    4e70:	000d883a 	mov	r6,zero
    4e74:	0004d501 	jmpi	4d50 <udivmodsi4>

00004e78 <__umodsi3>:
    4e78:	01800044 	movi	r6,1
    4e7c:	0004d501 	jmpi	4d50 <udivmodsi4>

00004e80 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    4e80:	defffc04 	addi	sp,sp,-16
    4e84:	df000315 	stw	fp,12(sp)
    4e88:	df000304 	addi	fp,sp,12
    4e8c:	e13ffd15 	stw	r4,-12(fp)
    4e90:	e17ffe15 	stw	r5,-8(fp)
    4e94:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    4e98:	e0fffe17 	ldw	r3,-8(fp)
    4e9c:	e0bffd17 	ldw	r2,-12(fp)
    4ea0:	18800e26 	beq	r3,r2,4edc <alt_load_section+0x5c>
  {
    while( to != end )
    4ea4:	00000a06 	br	4ed0 <alt_load_section+0x50>
    {
      *to++ = *from++;
    4ea8:	e0bffd17 	ldw	r2,-12(fp)
    4eac:	10c00017 	ldw	r3,0(r2)
    4eb0:	e0bffe17 	ldw	r2,-8(fp)
    4eb4:	10c00015 	stw	r3,0(r2)
    4eb8:	e0bffe17 	ldw	r2,-8(fp)
    4ebc:	10800104 	addi	r2,r2,4
    4ec0:	e0bffe15 	stw	r2,-8(fp)
    4ec4:	e0bffd17 	ldw	r2,-12(fp)
    4ec8:	10800104 	addi	r2,r2,4
    4ecc:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    4ed0:	e0fffe17 	ldw	r3,-8(fp)
    4ed4:	e0bfff17 	ldw	r2,-4(fp)
    4ed8:	18bff31e 	bne	r3,r2,4ea8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    4edc:	e037883a 	mov	sp,fp
    4ee0:	df000017 	ldw	fp,0(sp)
    4ee4:	dec00104 	addi	sp,sp,4
    4ee8:	f800283a 	ret

00004eec <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    4eec:	defffe04 	addi	sp,sp,-8
    4ef0:	dfc00115 	stw	ra,4(sp)
    4ef4:	df000015 	stw	fp,0(sp)
    4ef8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    4efc:	01000034 	movhi	r4,0
    4f00:	2119f904 	addi	r4,r4,26596
    4f04:	01400034 	movhi	r5,0
    4f08:	29594304 	addi	r5,r5,25868
    4f0c:	01800034 	movhi	r6,0
    4f10:	3199f904 	addi	r6,r6,26596
    4f14:	0004e800 	call	4e80 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    4f18:	01000034 	movhi	r4,0
    4f1c:	21100804 	addi	r4,r4,16416
    4f20:	01400034 	movhi	r5,0
    4f24:	29500804 	addi	r5,r5,16416
    4f28:	01800034 	movhi	r6,0
    4f2c:	31900804 	addi	r6,r6,16416
    4f30:	0004e800 	call	4e80 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    4f34:	01000034 	movhi	r4,0
    4f38:	21191e04 	addi	r4,r4,25720
    4f3c:	01400034 	movhi	r5,0
    4f40:	29591e04 	addi	r5,r5,25720
    4f44:	01800034 	movhi	r6,0
    4f48:	31994304 	addi	r6,r6,25868
    4f4c:	0004e800 	call	4e80 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    4f50:	00056f00 	call	56f0 <alt_dcache_flush_all>
  alt_icache_flush_all();
    4f54:	00058e00 	call	58e0 <alt_icache_flush_all>
}
    4f58:	e037883a 	mov	sp,fp
    4f5c:	dfc00117 	ldw	ra,4(sp)
    4f60:	df000017 	ldw	fp,0(sp)
    4f64:	dec00204 	addi	sp,sp,8
    4f68:	f800283a 	ret

00004f6c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4f6c:	defffd04 	addi	sp,sp,-12
    4f70:	dfc00215 	stw	ra,8(sp)
    4f74:	df000115 	stw	fp,4(sp)
    4f78:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    4f7c:	0009883a 	mov	r4,zero
    4f80:	00051d00 	call	51d0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    4f84:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    4f88:	00052040 	call	5204 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    4f8c:	01000034 	movhi	r4,0
    4f90:	21193a04 	addi	r4,r4,25832
    4f94:	01400034 	movhi	r5,0
    4f98:	29593a04 	addi	r5,r5,25832
    4f9c:	01800034 	movhi	r6,0
    4fa0:	31993a04 	addi	r6,r6,25832
    4fa4:	00059dc0 	call	59dc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    4fa8:	00058280 	call	5828 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    4fac:	01000034 	movhi	r4,0
    4fb0:	21162104 	addi	r4,r4,22660
    4fb4:	00060040 	call	6004 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    4fb8:	d120c017 	ldw	r4,-32000(gp)
    4fbc:	d0e0c117 	ldw	r3,-31996(gp)
    4fc0:	d0a0c217 	ldw	r2,-31992(gp)
    4fc4:	180b883a 	mov	r5,r3
    4fc8:	100d883a 	mov	r6,r2
    4fcc:	000405c0 	call	405c <main>
    4fd0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    4fd4:	01000044 	movi	r4,1
    4fd8:	00056240 	call	5624 <close>
  exit (result);
    4fdc:	e13fff17 	ldw	r4,-4(fp)
    4fe0:	00060180 	call	6018 <exit>

00004fe4 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    4fe4:	defffd04 	addi	sp,sp,-12
    4fe8:	dfc00215 	stw	ra,8(sp)
    4fec:	df000115 	stw	fp,4(sp)
    4ff0:	df000104 	addi	fp,sp,4
    4ff4:	e13fff15 	stw	r4,-4(fp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
    4ff8:	00800034 	movhi	r2,0
    4ffc:	1099f204 	addi	r2,r2,26568
    5000:	10800017 	ldw	r2,0(r2)
    5004:	10800217 	ldw	r2,8(r2)
    5008:	e13fff17 	ldw	r4,-4(fp)
    500c:	100b883a 	mov	r5,r2
    5010:	00060380 	call	6038 <fputs>
#endif
}
    5014:	e037883a 	mov	sp,fp
    5018:	dfc00117 	ldw	ra,4(sp)
    501c:	df000017 	ldw	fp,0(sp)
    5020:	dec00204 	addi	sp,sp,8
    5024:	f800283a 	ret

00005028 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    5028:	defffd04 	addi	sp,sp,-12
    502c:	dfc00215 	stw	ra,8(sp)
    5030:	df000115 	stw	fp,4(sp)
    5034:	df000104 	addi	fp,sp,4
    5038:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    503c:	e13fff17 	ldw	r4,-4(fp)
    5040:	00054800 	call	5480 <alt_busy_sleep>
}
    5044:	e037883a 	mov	sp,fp
    5048:	dfc00117 	ldw	ra,4(sp)
    504c:	df000017 	ldw	fp,0(sp)
    5050:	dec00204 	addi	sp,sp,8
    5054:	f800283a 	ret

00005058 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5058:	defffe04 	addi	sp,sp,-8
    505c:	dfc00115 	stw	ra,4(sp)
    5060:	df000015 	stw	fp,0(sp)
    5064:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5068:	00800034 	movhi	r2,0
    506c:	1099f804 	addi	r2,r2,26592
    5070:	10800017 	ldw	r2,0(r2)
    5074:	10000526 	beq	r2,zero,508c <alt_get_errno+0x34>
    5078:	00800034 	movhi	r2,0
    507c:	1099f804 	addi	r2,r2,26592
    5080:	10800017 	ldw	r2,0(r2)
    5084:	103ee83a 	callr	r2
    5088:	00000206 	br	5094 <alt_get_errno+0x3c>
    508c:	00800034 	movhi	r2,0
    5090:	109aaf04 	addi	r2,r2,27324
}
    5094:	e037883a 	mov	sp,fp
    5098:	dfc00117 	ldw	ra,4(sp)
    509c:	df000017 	ldw	fp,0(sp)
    50a0:	dec00204 	addi	sp,sp,8
    50a4:	f800283a 	ret

000050a8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    50a8:	defff904 	addi	sp,sp,-28
    50ac:	dfc00615 	stw	ra,24(sp)
    50b0:	df000515 	stw	fp,20(sp)
    50b4:	df000504 	addi	fp,sp,20
    50b8:	e13ffd15 	stw	r4,-12(fp)
    50bc:	e17ffe15 	stw	r5,-8(fp)
    50c0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    50c4:	e0bffd17 	ldw	r2,-12(fp)
    50c8:	10000716 	blt	r2,zero,50e8 <write+0x40>
    50cc:	e13ffd17 	ldw	r4,-12(fp)
    50d0:	01400304 	movi	r5,12
    50d4:	00043ac0 	call	43ac <__mulsi3>
    50d8:	00c00034 	movhi	r3,0
    50dc:	18d99004 	addi	r3,r3,26176
    50e0:	10c5883a 	add	r2,r2,r3
    50e4:	00000106 	br	50ec <write+0x44>
    50e8:	0005883a 	mov	r2,zero
    50ec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    50f0:	e0bffb17 	ldw	r2,-20(fp)
    50f4:	10001f26 	beq	r2,zero,5174 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    50f8:	e0bffb17 	ldw	r2,-20(fp)
    50fc:	10800217 	ldw	r2,8(r2)
    5100:	108000cc 	andi	r2,r2,3
    5104:	10001726 	beq	r2,zero,5164 <write+0xbc>
    5108:	e0bffb17 	ldw	r2,-20(fp)
    510c:	10800017 	ldw	r2,0(r2)
    5110:	10800617 	ldw	r2,24(r2)
    5114:	10001326 	beq	r2,zero,5164 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    5118:	e0bffb17 	ldw	r2,-20(fp)
    511c:	10800017 	ldw	r2,0(r2)
    5120:	10c00617 	ldw	r3,24(r2)
    5124:	e0bfff17 	ldw	r2,-4(fp)
    5128:	e13ffb17 	ldw	r4,-20(fp)
    512c:	e17ffe17 	ldw	r5,-8(fp)
    5130:	100d883a 	mov	r6,r2
    5134:	183ee83a 	callr	r3
    5138:	e0bffc15 	stw	r2,-16(fp)
    513c:	e0bffc17 	ldw	r2,-16(fp)
    5140:	1000060e 	bge	r2,zero,515c <write+0xb4>
      {
        ALT_ERRNO = -rval;
    5144:	00050580 	call	5058 <alt_get_errno>
    5148:	e0fffc17 	ldw	r3,-16(fp)
    514c:	00c7c83a 	sub	r3,zero,r3
    5150:	10c00015 	stw	r3,0(r2)
        return -1;
    5154:	00bfffc4 	movi	r2,-1
    5158:	00000a06 	br	5184 <write+0xdc>
      }
      return rval;
    515c:	e0bffc17 	ldw	r2,-16(fp)
    5160:	00000806 	br	5184 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
    5164:	00050580 	call	5058 <alt_get_errno>
    5168:	00c00344 	movi	r3,13
    516c:	10c00015 	stw	r3,0(r2)
    5170:	00000306 	br	5180 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    5174:	00050580 	call	5058 <alt_get_errno>
    5178:	00c01444 	movi	r3,81
    517c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    5180:	00bfffc4 	movi	r2,-1
}
    5184:	e037883a 	mov	sp,fp
    5188:	dfc00117 	ldw	ra,4(sp)
    518c:	df000017 	ldw	fp,0(sp)
    5190:	dec00204 	addi	sp,sp,8
    5194:	f800283a 	ret

00005198 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    5198:	defffd04 	addi	sp,sp,-12
    519c:	dfc00215 	stw	ra,8(sp)
    51a0:	df000115 	stw	fp,4(sp)
    51a4:	df000104 	addi	fp,sp,4
    51a8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    51ac:	e13fff17 	ldw	r4,-4(fp)
    51b0:	01400034 	movhi	r5,0
    51b4:	2959f504 	addi	r5,r5,26580
    51b8:	00057880 	call	5788 <alt_dev_llist_insert>
}
    51bc:	e037883a 	mov	sp,fp
    51c0:	dfc00117 	ldw	ra,4(sp)
    51c4:	df000017 	ldw	fp,0(sp)
    51c8:	dec00204 	addi	sp,sp,8
    51cc:	f800283a 	ret

000051d0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    51d0:	defffd04 	addi	sp,sp,-12
    51d4:	dfc00215 	stw	ra,8(sp)
    51d8:	df000115 	stw	fp,4(sp)
    51dc:	df000104 	addi	fp,sp,4
    51e0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS, Nios);
    51e4:	0005d6c0 	call	5d6c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    51e8:	00800044 	movi	r2,1
    51ec:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    51f0:	e037883a 	mov	sp,fp
    51f4:	dfc00117 	ldw	ra,4(sp)
    51f8:	df000017 	ldw	fp,0(sp)
    51fc:	dec00204 	addi	sp,sp,8
    5200:	f800283a 	ret

00005204 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    5204:	defffe04 	addi	sp,sp,-8
    5208:	dfc00115 	stw	ra,4(sp)
    520c:	df000015 	stw	fp,0(sp)
    5210:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, Jtag);
    5214:	01000034 	movhi	r4,0
    5218:	21197b04 	addi	r4,r4,26092
    521c:	00051980 	call	5198 <alt_dev_reg>
}
    5220:	e037883a 	mov	sp,fp
    5224:	dfc00117 	ldw	ra,4(sp)
    5228:	df000017 	ldw	fp,0(sp)
    522c:	dec00204 	addi	sp,sp,8
    5230:	f800283a 	ret

00005234 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    5234:	defffa04 	addi	sp,sp,-24
    5238:	dfc00515 	stw	ra,20(sp)
    523c:	df000415 	stw	fp,16(sp)
    5240:	df000404 	addi	fp,sp,16
    5244:	e13ffd15 	stw	r4,-12(fp)
    5248:	e17ffe15 	stw	r5,-8(fp)
    524c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    5250:	e0bffd17 	ldw	r2,-12(fp)
    5254:	10800017 	ldw	r2,0(r2)
    5258:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    525c:	e0bffc17 	ldw	r2,-16(fp)
    5260:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    5264:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    5268:	10800217 	ldw	r2,8(r2)
    526c:	1809883a 	mov	r4,r3
    5270:	e17ffe17 	ldw	r5,-8(fp)
    5274:	e1bfff17 	ldw	r6,-4(fp)
    5278:	100f883a 	mov	r7,r2
    527c:	00052f40 	call	52f4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    5280:	e037883a 	mov	sp,fp
    5284:	dfc00117 	ldw	ra,4(sp)
    5288:	df000017 	ldw	fp,0(sp)
    528c:	dec00204 	addi	sp,sp,8
    5290:	f800283a 	ret

00005294 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    5294:	defffa04 	addi	sp,sp,-24
    5298:	dfc00515 	stw	ra,20(sp)
    529c:	df000415 	stw	fp,16(sp)
    52a0:	df000404 	addi	fp,sp,16
    52a4:	e13ffd15 	stw	r4,-12(fp)
    52a8:	e17ffe15 	stw	r5,-8(fp)
    52ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    52b0:	e0bffd17 	ldw	r2,-12(fp)
    52b4:	10800017 	ldw	r2,0(r2)
    52b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    52bc:	e0bffc17 	ldw	r2,-16(fp)
    52c0:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    52c4:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    52c8:	10800217 	ldw	r2,8(r2)
    52cc:	1809883a 	mov	r4,r3
    52d0:	e17ffe17 	ldw	r5,-8(fp)
    52d4:	e1bfff17 	ldw	r6,-4(fp)
    52d8:	100f883a 	mov	r7,r2
    52dc:	00053e80 	call	53e8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    52e0:	e037883a 	mov	sp,fp
    52e4:	dfc00117 	ldw	ra,4(sp)
    52e8:	df000017 	ldw	fp,0(sp)
    52ec:	dec00204 	addi	sp,sp,8
    52f0:	f800283a 	ret

000052f4 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    52f4:	defff704 	addi	sp,sp,-36
    52f8:	df000815 	stw	fp,32(sp)
    52fc:	df000804 	addi	fp,sp,32
    5300:	e13ffc15 	stw	r4,-16(fp)
    5304:	e17ffd15 	stw	r5,-12(fp)
    5308:	e1bffe15 	stw	r6,-8(fp)
    530c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    5310:	e0bffc17 	ldw	r2,-16(fp)
    5314:	10800017 	ldw	r2,0(r2)
    5318:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    531c:	e0bffd17 	ldw	r2,-12(fp)
    5320:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    5324:	e0bffe17 	ldw	r2,-8(fp)
    5328:	e0fffd17 	ldw	r3,-12(fp)
    532c:	1885883a 	add	r2,r3,r2
    5330:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    5334:	00001406 	br	5388 <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    5338:	e0bff917 	ldw	r2,-28(fp)
    533c:	10800037 	ldwio	r2,0(r2)
    5340:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    5344:	e0bffb17 	ldw	r2,-20(fp)
    5348:	10a0000c 	andi	r2,r2,32768
    534c:	10000826 	beq	r2,zero,5370 <altera_avalon_jtag_uart_read+0x7c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    5350:	e0bffb17 	ldw	r2,-20(fp)
    5354:	1007883a 	mov	r3,r2
    5358:	e0bff817 	ldw	r2,-32(fp)
    535c:	10c00005 	stb	r3,0(r2)
    5360:	e0bff817 	ldw	r2,-32(fp)
    5364:	10800044 	addi	r2,r2,1
    5368:	e0bff815 	stw	r2,-32(fp)
    536c:	00000606 	br	5388 <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
    5370:	e0fff817 	ldw	r3,-32(fp)
    5374:	e0bffd17 	ldw	r2,-12(fp)
    5378:	1880071e 	bne	r3,r2,5398 <altera_avalon_jtag_uart_read+0xa4>
      break;
    else if(flags & O_NONBLOCK)
    537c:	e0bfff17 	ldw	r2,-4(fp)
    5380:	1090000c 	andi	r2,r2,16384
    5384:	1000061e 	bne	r2,zero,53a0 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    5388:	e0fff817 	ldw	r3,-32(fp)
    538c:	e0bffa17 	ldw	r2,-24(fp)
    5390:	18bfe936 	bltu	r3,r2,5338 <altera_avalon_jtag_uart_read+0x44>
    5394:	00000306 	br	53a4 <altera_avalon_jtag_uart_read+0xb0>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    5398:	0001883a 	nop
    539c:	00000106 	br	53a4 <altera_avalon_jtag_uart_read+0xb0>
    else if(flags & O_NONBLOCK)
      break;   
    53a0:	0001883a 	nop
    
  }

  if (ptr != buffer)
    53a4:	e0fff817 	ldw	r3,-32(fp)
    53a8:	e0bffd17 	ldw	r2,-12(fp)
    53ac:	18800426 	beq	r3,r2,53c0 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
    53b0:	e0fff817 	ldw	r3,-32(fp)
    53b4:	e0bffd17 	ldw	r2,-12(fp)
    53b8:	1885c83a 	sub	r2,r3,r2
    53bc:	00000606 	br	53d8 <altera_avalon_jtag_uart_read+0xe4>
  else if (flags & O_NONBLOCK)
    53c0:	e0bfff17 	ldw	r2,-4(fp)
    53c4:	1090000c 	andi	r2,r2,16384
    53c8:	10000226 	beq	r2,zero,53d4 <altera_avalon_jtag_uart_read+0xe0>
    return -EWOULDBLOCK;
    53cc:	00bffd44 	movi	r2,-11
    53d0:	00000106 	br	53d8 <altera_avalon_jtag_uart_read+0xe4>
  else
    return -EIO;
    53d4:	00bffec4 	movi	r2,-5
}
    53d8:	e037883a 	mov	sp,fp
    53dc:	df000017 	ldw	fp,0(sp)
    53e0:	dec00104 	addi	sp,sp,4
    53e4:	f800283a 	ret

000053e8 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    53e8:	defff904 	addi	sp,sp,-28
    53ec:	df000615 	stw	fp,24(sp)
    53f0:	df000604 	addi	fp,sp,24
    53f4:	e13ffc15 	stw	r4,-16(fp)
    53f8:	e17ffd15 	stw	r5,-12(fp)
    53fc:	e1bffe15 	stw	r6,-8(fp)
    5400:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    5404:	e0bffc17 	ldw	r2,-16(fp)
    5408:	10800017 	ldw	r2,0(r2)
    540c:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    5410:	e0bffe17 	ldw	r2,-8(fp)
    5414:	e0fffd17 	ldw	r3,-12(fp)
    5418:	1885883a 	add	r2,r3,r2
    541c:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    5420:	00000f06 	br	5460 <altera_avalon_jtag_uart_write+0x78>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    5424:	e0bffa17 	ldw	r2,-24(fp)
    5428:	10800104 	addi	r2,r2,4
    542c:	10800037 	ldwio	r2,0(r2)
    5430:	10bfffec 	andhi	r2,r2,65535
    5434:	10000a26 	beq	r2,zero,5460 <altera_avalon_jtag_uart_write+0x78>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    5438:	e0bffa17 	ldw	r2,-24(fp)
    543c:	e0fffd17 	ldw	r3,-12(fp)
    5440:	18c00003 	ldbu	r3,0(r3)
    5444:	18c03fcc 	andi	r3,r3,255
    5448:	18c0201c 	xori	r3,r3,128
    544c:	18ffe004 	addi	r3,r3,-128
    5450:	e13ffd17 	ldw	r4,-12(fp)
    5454:	21000044 	addi	r4,r4,1
    5458:	e13ffd15 	stw	r4,-12(fp)
    545c:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    5460:	e0fffd17 	ldw	r3,-12(fp)
    5464:	e0bffb17 	ldw	r2,-20(fp)
    5468:	18bfee36 	bltu	r3,r2,5424 <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    546c:	e0bffe17 	ldw	r2,-8(fp)
}
    5470:	e037883a 	mov	sp,fp
    5474:	df000017 	ldw	fp,0(sp)
    5478:	dec00104 	addi	sp,sp,4
    547c:	f800283a 	ret

00005480 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    5480:	defffa04 	addi	sp,sp,-24
    5484:	dfc00515 	stw	ra,20(sp)
    5488:	df000415 	stw	fp,16(sp)
    548c:	df000404 	addi	fp,sp,16
    5490:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    5494:	00800244 	movi	r2,9
    5498:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    549c:	e13ffd17 	ldw	r4,-12(fp)
    54a0:	014003f4 	movhi	r5,15
    54a4:	29509004 	addi	r5,r5,16960
    54a8:	00043ac0 	call	43ac <__mulsi3>
    54ac:	0100bef4 	movhi	r4,763
    54b0:	213c2004 	addi	r4,r4,-3968
    54b4:	100b883a 	mov	r5,r2
    54b8:	0004e700 	call	4e70 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    54bc:	01200034 	movhi	r4,32768
    54c0:	213fffc4 	addi	r4,r4,-1
    54c4:	100b883a 	mov	r5,r2
    54c8:	0004e700 	call	4e70 <__udivsi3>
    54cc:	e13fff17 	ldw	r4,-4(fp)
    54d0:	100b883a 	mov	r5,r2
    54d4:	0004e700 	call	4e70 <__udivsi3>
    54d8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    54dc:	e0bffe17 	ldw	r2,-8(fp)
    54e0:	10002926 	beq	r2,zero,5588 <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
    54e4:	e03ffc15 	stw	zero,-16(fp)
    54e8:	00001606 	br	5544 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    54ec:	00a00034 	movhi	r2,32768
    54f0:	10bfffc4 	addi	r2,r2,-1
    54f4:	10bfffc4 	addi	r2,r2,-1
    54f8:	103ffe1e 	bne	r2,zero,54f4 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    54fc:	e13ffd17 	ldw	r4,-12(fp)
    5500:	014003f4 	movhi	r5,15
    5504:	29509004 	addi	r5,r5,16960
    5508:	00043ac0 	call	43ac <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    550c:	0100bef4 	movhi	r4,763
    5510:	213c2004 	addi	r4,r4,-3968
    5514:	100b883a 	mov	r5,r2
    5518:	0004e700 	call	4e70 <__udivsi3>
    551c:	01200034 	movhi	r4,32768
    5520:	213fffc4 	addi	r4,r4,-1
    5524:	100b883a 	mov	r5,r2
    5528:	0004e700 	call	4e70 <__udivsi3>
    552c:	e0ffff17 	ldw	r3,-4(fp)
    5530:	1885c83a 	sub	r2,r3,r2
    5534:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    5538:	e0bffc17 	ldw	r2,-16(fp)
    553c:	10800044 	addi	r2,r2,1
    5540:	e0bffc15 	stw	r2,-16(fp)
    5544:	e0fffc17 	ldw	r3,-16(fp)
    5548:	e0bffe17 	ldw	r2,-8(fp)
    554c:	18bfe716 	blt	r3,r2,54ec <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    5550:	e13ffd17 	ldw	r4,-12(fp)
    5554:	014003f4 	movhi	r5,15
    5558:	29509004 	addi	r5,r5,16960
    555c:	00043ac0 	call	43ac <__mulsi3>
    5560:	0100bef4 	movhi	r4,763
    5564:	213c2004 	addi	r4,r4,-3968
    5568:	100b883a 	mov	r5,r2
    556c:	0004e700 	call	4e70 <__udivsi3>
    5570:	1009883a 	mov	r4,r2
    5574:	e17fff17 	ldw	r5,-4(fp)
    5578:	00043ac0 	call	43ac <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    557c:	10bfffc4 	addi	r2,r2,-1
    5580:	103ffe1e 	bne	r2,zero,557c <alt_busy_sleep+0xfc>
    5584:	00000d06 	br	55bc <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    5588:	e13ffd17 	ldw	r4,-12(fp)
    558c:	014003f4 	movhi	r5,15
    5590:	29509004 	addi	r5,r5,16960
    5594:	00043ac0 	call	43ac <__mulsi3>
    5598:	0100bef4 	movhi	r4,763
    559c:	213c2004 	addi	r4,r4,-3968
    55a0:	100b883a 	mov	r5,r2
    55a4:	0004e700 	call	4e70 <__udivsi3>
    55a8:	1009883a 	mov	r4,r2
    55ac:	e17fff17 	ldw	r5,-4(fp)
    55b0:	00043ac0 	call	43ac <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    55b4:	10bfffc4 	addi	r2,r2,-1
    55b8:	00bffe16 	blt	zero,r2,55b4 <alt_busy_sleep+0x134>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    55bc:	0005883a 	mov	r2,zero
}
    55c0:	e037883a 	mov	sp,fp
    55c4:	dfc00117 	ldw	ra,4(sp)
    55c8:	df000017 	ldw	fp,0(sp)
    55cc:	dec00204 	addi	sp,sp,8
    55d0:	f800283a 	ret

000055d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    55d4:	defffe04 	addi	sp,sp,-8
    55d8:	dfc00115 	stw	ra,4(sp)
    55dc:	df000015 	stw	fp,0(sp)
    55e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    55e4:	00800034 	movhi	r2,0
    55e8:	1099f804 	addi	r2,r2,26592
    55ec:	10800017 	ldw	r2,0(r2)
    55f0:	10000526 	beq	r2,zero,5608 <alt_get_errno+0x34>
    55f4:	00800034 	movhi	r2,0
    55f8:	1099f804 	addi	r2,r2,26592
    55fc:	10800017 	ldw	r2,0(r2)
    5600:	103ee83a 	callr	r2
    5604:	00000206 	br	5610 <alt_get_errno+0x3c>
    5608:	00800034 	movhi	r2,0
    560c:	109aaf04 	addi	r2,r2,27324
}
    5610:	e037883a 	mov	sp,fp
    5614:	dfc00117 	ldw	ra,4(sp)
    5618:	df000017 	ldw	fp,0(sp)
    561c:	dec00204 	addi	sp,sp,8
    5620:	f800283a 	ret

00005624 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    5624:	defffb04 	addi	sp,sp,-20
    5628:	dfc00415 	stw	ra,16(sp)
    562c:	df000315 	stw	fp,12(sp)
    5630:	df000304 	addi	fp,sp,12
    5634:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    5638:	e0bfff17 	ldw	r2,-4(fp)
    563c:	10000716 	blt	r2,zero,565c <close+0x38>
    5640:	e13fff17 	ldw	r4,-4(fp)
    5644:	01400304 	movi	r5,12
    5648:	00043ac0 	call	43ac <__mulsi3>
    564c:	00c00034 	movhi	r3,0
    5650:	18d99004 	addi	r3,r3,26176
    5654:	10c5883a 	add	r2,r2,r3
    5658:	00000106 	br	5660 <close+0x3c>
    565c:	0005883a 	mov	r2,zero
    5660:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    5664:	e0bffd17 	ldw	r2,-12(fp)
    5668:	10001826 	beq	r2,zero,56cc <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    566c:	e0bffd17 	ldw	r2,-12(fp)
    5670:	10800017 	ldw	r2,0(r2)
    5674:	10800417 	ldw	r2,16(r2)
    5678:	10000626 	beq	r2,zero,5694 <close+0x70>
    567c:	e0bffd17 	ldw	r2,-12(fp)
    5680:	10800017 	ldw	r2,0(r2)
    5684:	10800417 	ldw	r2,16(r2)
    5688:	e13ffd17 	ldw	r4,-12(fp)
    568c:	103ee83a 	callr	r2
    5690:	00000106 	br	5698 <close+0x74>
    5694:	0005883a 	mov	r2,zero
    5698:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    569c:	e13fff17 	ldw	r4,-4(fp)
    56a0:	0005cec0 	call	5cec <alt_release_fd>
    if (rval < 0)
    56a4:	e0bffe17 	ldw	r2,-8(fp)
    56a8:	1000060e 	bge	r2,zero,56c4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    56ac:	00055d40 	call	55d4 <alt_get_errno>
    56b0:	e0fffe17 	ldw	r3,-8(fp)
    56b4:	00c7c83a 	sub	r3,zero,r3
    56b8:	10c00015 	stw	r3,0(r2)
      return -1;
    56bc:	00bfffc4 	movi	r2,-1
    56c0:	00000606 	br	56dc <close+0xb8>
    }
    return 0;
    56c4:	0005883a 	mov	r2,zero
    56c8:	00000406 	br	56dc <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    56cc:	00055d40 	call	55d4 <alt_get_errno>
    56d0:	00c01444 	movi	r3,81
    56d4:	10c00015 	stw	r3,0(r2)
    return -1;
    56d8:	00bfffc4 	movi	r2,-1
  }
}
    56dc:	e037883a 	mov	sp,fp
    56e0:	dfc00117 	ldw	ra,4(sp)
    56e4:	df000017 	ldw	fp,0(sp)
    56e8:	dec00204 	addi	sp,sp,8
    56ec:	f800283a 	ret

000056f0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    56f0:	deffff04 	addi	sp,sp,-4
    56f4:	df000015 	stw	fp,0(sp)
    56f8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    56fc:	e037883a 	mov	sp,fp
    5700:	df000017 	ldw	fp,0(sp)
    5704:	dec00104 	addi	sp,sp,4
    5708:	f800283a 	ret

0000570c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    570c:	defffc04 	addi	sp,sp,-16
    5710:	df000315 	stw	fp,12(sp)
    5714:	df000304 	addi	fp,sp,12
    5718:	e13ffd15 	stw	r4,-12(fp)
    571c:	e17ffe15 	stw	r5,-8(fp)
    5720:	e1bfff15 	stw	r6,-4(fp)
  return len;
    5724:	e0bfff17 	ldw	r2,-4(fp)
}
    5728:	e037883a 	mov	sp,fp
    572c:	df000017 	ldw	fp,0(sp)
    5730:	dec00104 	addi	sp,sp,4
    5734:	f800283a 	ret

00005738 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5738:	defffe04 	addi	sp,sp,-8
    573c:	dfc00115 	stw	ra,4(sp)
    5740:	df000015 	stw	fp,0(sp)
    5744:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5748:	00800034 	movhi	r2,0
    574c:	1099f804 	addi	r2,r2,26592
    5750:	10800017 	ldw	r2,0(r2)
    5754:	10000526 	beq	r2,zero,576c <alt_get_errno+0x34>
    5758:	00800034 	movhi	r2,0
    575c:	1099f804 	addi	r2,r2,26592
    5760:	10800017 	ldw	r2,0(r2)
    5764:	103ee83a 	callr	r2
    5768:	00000206 	br	5774 <alt_get_errno+0x3c>
    576c:	00800034 	movhi	r2,0
    5770:	109aaf04 	addi	r2,r2,27324
}
    5774:	e037883a 	mov	sp,fp
    5778:	dfc00117 	ldw	ra,4(sp)
    577c:	df000017 	ldw	fp,0(sp)
    5780:	dec00204 	addi	sp,sp,8
    5784:	f800283a 	ret

00005788 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    5788:	defffa04 	addi	sp,sp,-24
    578c:	dfc00515 	stw	ra,20(sp)
    5790:	df000415 	stw	fp,16(sp)
    5794:	df000404 	addi	fp,sp,16
    5798:	e13ffe15 	stw	r4,-8(fp)
    579c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    57a0:	e0bffe17 	ldw	r2,-8(fp)
    57a4:	10000326 	beq	r2,zero,57b4 <alt_dev_llist_insert+0x2c>
    57a8:	e0bffe17 	ldw	r2,-8(fp)
    57ac:	10800217 	ldw	r2,8(r2)
    57b0:	1000051e 	bne	r2,zero,57c8 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
    57b4:	00057380 	call	5738 <alt_get_errno>
    57b8:	00c00584 	movi	r3,22
    57bc:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    57c0:	00bffa84 	movi	r2,-22
    57c4:	00001306 	br	5814 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    57c8:	e0bffe17 	ldw	r2,-8(fp)
    57cc:	e0ffff17 	ldw	r3,-4(fp)
    57d0:	e0fffc15 	stw	r3,-16(fp)
    57d4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    57d8:	e0bffd17 	ldw	r2,-12(fp)
    57dc:	e0fffc17 	ldw	r3,-16(fp)
    57e0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    57e4:	e0bffc17 	ldw	r2,-16(fp)
    57e8:	10c00017 	ldw	r3,0(r2)
    57ec:	e0bffd17 	ldw	r2,-12(fp)
    57f0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    57f4:	e0bffc17 	ldw	r2,-16(fp)
    57f8:	10800017 	ldw	r2,0(r2)
    57fc:	e0fffd17 	ldw	r3,-12(fp)
    5800:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    5804:	e0bffc17 	ldw	r2,-16(fp)
    5808:	e0fffd17 	ldw	r3,-12(fp)
    580c:	10c00015 	stw	r3,0(r2)

  return 0;  
    5810:	0005883a 	mov	r2,zero
}
    5814:	e037883a 	mov	sp,fp
    5818:	dfc00117 	ldw	ra,4(sp)
    581c:	df000017 	ldw	fp,0(sp)
    5820:	dec00204 	addi	sp,sp,8
    5824:	f800283a 	ret

00005828 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    5828:	defffd04 	addi	sp,sp,-12
    582c:	dfc00215 	stw	ra,8(sp)
    5830:	df000115 	stw	fp,4(sp)
    5834:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    5838:	00800034 	movhi	r2,0
    583c:	10991d04 	addi	r2,r2,25716
    5840:	e0bfff15 	stw	r2,-4(fp)
    5844:	00000606 	br	5860 <_do_ctors+0x38>
        (*ctor) (); 
    5848:	e0bfff17 	ldw	r2,-4(fp)
    584c:	10800017 	ldw	r2,0(r2)
    5850:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    5854:	e0bfff17 	ldw	r2,-4(fp)
    5858:	10bfff04 	addi	r2,r2,-4
    585c:	e0bfff15 	stw	r2,-4(fp)
    5860:	e0ffff17 	ldw	r3,-4(fp)
    5864:	00800034 	movhi	r2,0
    5868:	10991e04 	addi	r2,r2,25720
    586c:	18bff62e 	bgeu	r3,r2,5848 <_do_ctors+0x20>
        (*ctor) (); 
}
    5870:	e037883a 	mov	sp,fp
    5874:	dfc00117 	ldw	ra,4(sp)
    5878:	df000017 	ldw	fp,0(sp)
    587c:	dec00204 	addi	sp,sp,8
    5880:	f800283a 	ret

00005884 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    5884:	defffd04 	addi	sp,sp,-12
    5888:	dfc00215 	stw	ra,8(sp)
    588c:	df000115 	stw	fp,4(sp)
    5890:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    5894:	00800034 	movhi	r2,0
    5898:	10991d04 	addi	r2,r2,25716
    589c:	e0bfff15 	stw	r2,-4(fp)
    58a0:	00000606 	br	58bc <_do_dtors+0x38>
        (*dtor) (); 
    58a4:	e0bfff17 	ldw	r2,-4(fp)
    58a8:	10800017 	ldw	r2,0(r2)
    58ac:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    58b0:	e0bfff17 	ldw	r2,-4(fp)
    58b4:	10bfff04 	addi	r2,r2,-4
    58b8:	e0bfff15 	stw	r2,-4(fp)
    58bc:	e0ffff17 	ldw	r3,-4(fp)
    58c0:	00800034 	movhi	r2,0
    58c4:	10991e04 	addi	r2,r2,25720
    58c8:	18bff62e 	bgeu	r3,r2,58a4 <_do_dtors+0x20>
        (*dtor) (); 
}
    58cc:	e037883a 	mov	sp,fp
    58d0:	dfc00117 	ldw	ra,4(sp)
    58d4:	df000017 	ldw	fp,0(sp)
    58d8:	dec00204 	addi	sp,sp,8
    58dc:	f800283a 	ret

000058e0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    58e0:	deffff04 	addi	sp,sp,-4
    58e4:	df000015 	stw	fp,0(sp)
    58e8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    58ec:	e037883a 	mov	sp,fp
    58f0:	df000017 	ldw	fp,0(sp)
    58f4:	dec00104 	addi	sp,sp,4
    58f8:	f800283a 	ret

000058fc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    58fc:	defff804 	addi	sp,sp,-32
    5900:	dfc00715 	stw	ra,28(sp)
    5904:	df000615 	stw	fp,24(sp)
    5908:	dc000515 	stw	r16,20(sp)
    590c:	df000504 	addi	fp,sp,20
    5910:	e13ffc15 	stw	r4,-16(fp)
    5914:	e17ffd15 	stw	r5,-12(fp)
    5918:	e1bffe15 	stw	r6,-8(fp)
    591c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    5920:	e13ffd17 	ldw	r4,-12(fp)
    5924:	e17ffe17 	ldw	r5,-8(fp)
    5928:	e1bfff17 	ldw	r6,-4(fp)
    592c:	0005b940 	call	5b94 <open>
    5930:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    5934:	e0bffb17 	ldw	r2,-20(fp)
    5938:	10002216 	blt	r2,zero,59c4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    593c:	04000034 	movhi	r16,0
    5940:	84199004 	addi	r16,r16,26176
    5944:	e0bffb17 	ldw	r2,-20(fp)
    5948:	1009883a 	mov	r4,r2
    594c:	01400304 	movi	r5,12
    5950:	00043ac0 	call	43ac <__mulsi3>
    5954:	8085883a 	add	r2,r16,r2
    5958:	10c00017 	ldw	r3,0(r2)
    595c:	e0bffc17 	ldw	r2,-16(fp)
    5960:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    5964:	04000034 	movhi	r16,0
    5968:	84199004 	addi	r16,r16,26176
    596c:	e0bffb17 	ldw	r2,-20(fp)
    5970:	1009883a 	mov	r4,r2
    5974:	01400304 	movi	r5,12
    5978:	00043ac0 	call	43ac <__mulsi3>
    597c:	8085883a 	add	r2,r16,r2
    5980:	10800104 	addi	r2,r2,4
    5984:	10c00017 	ldw	r3,0(r2)
    5988:	e0bffc17 	ldw	r2,-16(fp)
    598c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    5990:	04000034 	movhi	r16,0
    5994:	84199004 	addi	r16,r16,26176
    5998:	e0bffb17 	ldw	r2,-20(fp)
    599c:	1009883a 	mov	r4,r2
    59a0:	01400304 	movi	r5,12
    59a4:	00043ac0 	call	43ac <__mulsi3>
    59a8:	8085883a 	add	r2,r16,r2
    59ac:	10800204 	addi	r2,r2,8
    59b0:	10c00017 	ldw	r3,0(r2)
    59b4:	e0bffc17 	ldw	r2,-16(fp)
    59b8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    59bc:	e13ffb17 	ldw	r4,-20(fp)
    59c0:	0005cec0 	call	5cec <alt_release_fd>
  }
} 
    59c4:	e037883a 	mov	sp,fp
    59c8:	dfc00217 	ldw	ra,8(sp)
    59cc:	df000117 	ldw	fp,4(sp)
    59d0:	dc000017 	ldw	r16,0(sp)
    59d4:	dec00304 	addi	sp,sp,12
    59d8:	f800283a 	ret

000059dc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    59dc:	defffb04 	addi	sp,sp,-20
    59e0:	dfc00415 	stw	ra,16(sp)
    59e4:	df000315 	stw	fp,12(sp)
    59e8:	df000304 	addi	fp,sp,12
    59ec:	e13ffd15 	stw	r4,-12(fp)
    59f0:	e17ffe15 	stw	r5,-8(fp)
    59f4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    59f8:	01000034 	movhi	r4,0
    59fc:	21199304 	addi	r4,r4,26188
    5a00:	e17ffd17 	ldw	r5,-12(fp)
    5a04:	01800044 	movi	r6,1
    5a08:	01c07fc4 	movi	r7,511
    5a0c:	00058fc0 	call	58fc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    5a10:	01000034 	movhi	r4,0
    5a14:	21199004 	addi	r4,r4,26176
    5a18:	e17ffe17 	ldw	r5,-8(fp)
    5a1c:	000d883a 	mov	r6,zero
    5a20:	01c07fc4 	movi	r7,511
    5a24:	00058fc0 	call	58fc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    5a28:	01000034 	movhi	r4,0
    5a2c:	21199604 	addi	r4,r4,26200
    5a30:	e17fff17 	ldw	r5,-4(fp)
    5a34:	01800044 	movi	r6,1
    5a38:	01c07fc4 	movi	r7,511
    5a3c:	00058fc0 	call	58fc <alt_open_fd>
}  
    5a40:	e037883a 	mov	sp,fp
    5a44:	dfc00117 	ldw	ra,4(sp)
    5a48:	df000017 	ldw	fp,0(sp)
    5a4c:	dec00204 	addi	sp,sp,8
    5a50:	f800283a 	ret

00005a54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5a54:	defffe04 	addi	sp,sp,-8
    5a58:	dfc00115 	stw	ra,4(sp)
    5a5c:	df000015 	stw	fp,0(sp)
    5a60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5a64:	00800034 	movhi	r2,0
    5a68:	1099f804 	addi	r2,r2,26592
    5a6c:	10800017 	ldw	r2,0(r2)
    5a70:	10000526 	beq	r2,zero,5a88 <alt_get_errno+0x34>
    5a74:	00800034 	movhi	r2,0
    5a78:	1099f804 	addi	r2,r2,26592
    5a7c:	10800017 	ldw	r2,0(r2)
    5a80:	103ee83a 	callr	r2
    5a84:	00000206 	br	5a90 <alt_get_errno+0x3c>
    5a88:	00800034 	movhi	r2,0
    5a8c:	109aaf04 	addi	r2,r2,27324
}
    5a90:	e037883a 	mov	sp,fp
    5a94:	dfc00117 	ldw	ra,4(sp)
    5a98:	df000017 	ldw	fp,0(sp)
    5a9c:	dec00204 	addi	sp,sp,8
    5aa0:	f800283a 	ret

00005aa4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    5aa4:	defffb04 	addi	sp,sp,-20
    5aa8:	dfc00415 	stw	ra,16(sp)
    5aac:	df000315 	stw	fp,12(sp)
    5ab0:	dc000215 	stw	r16,8(sp)
    5ab4:	df000204 	addi	fp,sp,8
    5ab8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    5abc:	e0bfff17 	ldw	r2,-4(fp)
    5ac0:	10800217 	ldw	r2,8(r2)
    5ac4:	10d00034 	orhi	r3,r2,16384
    5ac8:	e0bfff17 	ldw	r2,-4(fp)
    5acc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    5ad0:	e03ffe15 	stw	zero,-8(fp)
    5ad4:	00002206 	br	5b60 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    5ad8:	04000034 	movhi	r16,0
    5adc:	84199004 	addi	r16,r16,26176
    5ae0:	e0bffe17 	ldw	r2,-8(fp)
    5ae4:	1009883a 	mov	r4,r2
    5ae8:	01400304 	movi	r5,12
    5aec:	00043ac0 	call	43ac <__mulsi3>
    5af0:	8085883a 	add	r2,r16,r2
    5af4:	10c00017 	ldw	r3,0(r2)
    5af8:	e0bfff17 	ldw	r2,-4(fp)
    5afc:	10800017 	ldw	r2,0(r2)
    5b00:	1880141e 	bne	r3,r2,5b54 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    5b04:	04000034 	movhi	r16,0
    5b08:	84199004 	addi	r16,r16,26176
    5b0c:	e0bffe17 	ldw	r2,-8(fp)
    5b10:	1009883a 	mov	r4,r2
    5b14:	01400304 	movi	r5,12
    5b18:	00043ac0 	call	43ac <__mulsi3>
    5b1c:	8085883a 	add	r2,r16,r2
    5b20:	10800204 	addi	r2,r2,8
    5b24:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    5b28:	10000a0e 	bge	r2,zero,5b54 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    5b2c:	e13ffe17 	ldw	r4,-8(fp)
    5b30:	01400304 	movi	r5,12
    5b34:	00043ac0 	call	43ac <__mulsi3>
    5b38:	00c00034 	movhi	r3,0
    5b3c:	18d99004 	addi	r3,r3,26176
    5b40:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    5b44:	e0bfff17 	ldw	r2,-4(fp)
    5b48:	18800226 	beq	r3,r2,5b54 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    5b4c:	00bffcc4 	movi	r2,-13
    5b50:	00000a06 	br	5b7c <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    5b54:	e0bffe17 	ldw	r2,-8(fp)
    5b58:	10800044 	addi	r2,r2,1
    5b5c:	e0bffe15 	stw	r2,-8(fp)
    5b60:	00800034 	movhi	r2,0
    5b64:	1099f704 	addi	r2,r2,26588
    5b68:	10800017 	ldw	r2,0(r2)
    5b6c:	1007883a 	mov	r3,r2
    5b70:	e0bffe17 	ldw	r2,-8(fp)
    5b74:	18bfd82e 	bgeu	r3,r2,5ad8 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    5b78:	0005883a 	mov	r2,zero
}
    5b7c:	e037883a 	mov	sp,fp
    5b80:	dfc00217 	ldw	ra,8(sp)
    5b84:	df000117 	ldw	fp,4(sp)
    5b88:	dc000017 	ldw	r16,0(sp)
    5b8c:	dec00304 	addi	sp,sp,12
    5b90:	f800283a 	ret

00005b94 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    5b94:	defff604 	addi	sp,sp,-40
    5b98:	dfc00915 	stw	ra,36(sp)
    5b9c:	df000815 	stw	fp,32(sp)
    5ba0:	df000804 	addi	fp,sp,32
    5ba4:	e13ffd15 	stw	r4,-12(fp)
    5ba8:	e17ffe15 	stw	r5,-8(fp)
    5bac:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    5bb0:	00bfffc4 	movi	r2,-1
    5bb4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    5bb8:	00bffb44 	movi	r2,-19
    5bbc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    5bc0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    5bc4:	e13ffd17 	ldw	r4,-12(fp)
    5bc8:	01400034 	movhi	r5,0
    5bcc:	2959f504 	addi	r5,r5,26580
    5bd0:	0005d8c0 	call	5d8c <alt_find_dev>
    5bd4:	e0bff815 	stw	r2,-32(fp)
    5bd8:	e0bff817 	ldw	r2,-32(fp)
    5bdc:	1000051e 	bne	r2,zero,5bf4 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    5be0:	e13ffd17 	ldw	r4,-12(fp)
    5be4:	0005e1c0 	call	5e1c <alt_find_file>
    5be8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    5bec:	00800044 	movi	r2,1
    5bf0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    5bf4:	e0bff817 	ldw	r2,-32(fp)
    5bf8:	10002a26 	beq	r2,zero,5ca4 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    5bfc:	e13ff817 	ldw	r4,-32(fp)
    5c00:	0005f300 	call	5f30 <alt_get_fd>
    5c04:	e0bff915 	stw	r2,-28(fp)
    5c08:	e0bff917 	ldw	r2,-28(fp)
    5c0c:	1000030e 	bge	r2,zero,5c1c <open+0x88>
    {
      status = index;
    5c10:	e0bff917 	ldw	r2,-28(fp)
    5c14:	e0bffa15 	stw	r2,-24(fp)
    5c18:	00002406 	br	5cac <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    5c1c:	e13ff917 	ldw	r4,-28(fp)
    5c20:	01400304 	movi	r5,12
    5c24:	00043ac0 	call	43ac <__mulsi3>
    5c28:	00c00034 	movhi	r3,0
    5c2c:	18d99004 	addi	r3,r3,26176
    5c30:	10c5883a 	add	r2,r2,r3
    5c34:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    5c38:	e0fffe17 	ldw	r3,-8(fp)
    5c3c:	00900034 	movhi	r2,16384
    5c40:	10bfffc4 	addi	r2,r2,-1
    5c44:	1886703a 	and	r3,r3,r2
    5c48:	e0bffc17 	ldw	r2,-16(fp)
    5c4c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    5c50:	e0bffb17 	ldw	r2,-20(fp)
    5c54:	1000051e 	bne	r2,zero,5c6c <open+0xd8>
    5c58:	e13ffc17 	ldw	r4,-16(fp)
    5c5c:	0005aa40 	call	5aa4 <alt_file_locked>
    5c60:	e0bffa15 	stw	r2,-24(fp)
    5c64:	e0bffa17 	ldw	r2,-24(fp)
    5c68:	10001016 	blt	r2,zero,5cac <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    5c6c:	e0bff817 	ldw	r2,-32(fp)
    5c70:	10800317 	ldw	r2,12(r2)
    5c74:	10000826 	beq	r2,zero,5c98 <open+0x104>
    5c78:	e0bff817 	ldw	r2,-32(fp)
    5c7c:	10800317 	ldw	r2,12(r2)
    5c80:	e13ffc17 	ldw	r4,-16(fp)
    5c84:	e17ffd17 	ldw	r5,-12(fp)
    5c88:	e1bffe17 	ldw	r6,-8(fp)
    5c8c:	e1ffff17 	ldw	r7,-4(fp)
    5c90:	103ee83a 	callr	r2
    5c94:	00000106 	br	5c9c <open+0x108>
    5c98:	0005883a 	mov	r2,zero
    5c9c:	e0bffa15 	stw	r2,-24(fp)
    5ca0:	00000206 	br	5cac <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    5ca4:	00bffb44 	movi	r2,-19
    5ca8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    5cac:	e0bffa17 	ldw	r2,-24(fp)
    5cb0:	1000080e 	bge	r2,zero,5cd4 <open+0x140>
  {
    alt_release_fd (index);  
    5cb4:	e13ff917 	ldw	r4,-28(fp)
    5cb8:	0005cec0 	call	5cec <alt_release_fd>
    ALT_ERRNO = -status;
    5cbc:	0005a540 	call	5a54 <alt_get_errno>
    5cc0:	e0fffa17 	ldw	r3,-24(fp)
    5cc4:	00c7c83a 	sub	r3,zero,r3
    5cc8:	10c00015 	stw	r3,0(r2)
    return -1;
    5ccc:	00bfffc4 	movi	r2,-1
    5cd0:	00000106 	br	5cd8 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    5cd4:	e0bff917 	ldw	r2,-28(fp)
}
    5cd8:	e037883a 	mov	sp,fp
    5cdc:	dfc00117 	ldw	ra,4(sp)
    5ce0:	df000017 	ldw	fp,0(sp)
    5ce4:	dec00204 	addi	sp,sp,8
    5ce8:	f800283a 	ret

00005cec <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    5cec:	defffc04 	addi	sp,sp,-16
    5cf0:	dfc00315 	stw	ra,12(sp)
    5cf4:	df000215 	stw	fp,8(sp)
    5cf8:	dc000115 	stw	r16,4(sp)
    5cfc:	df000104 	addi	fp,sp,4
    5d00:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    5d04:	e0bfff17 	ldw	r2,-4(fp)
    5d08:	108000d0 	cmplti	r2,r2,3
    5d0c:	1000111e 	bne	r2,zero,5d54 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    5d10:	04000034 	movhi	r16,0
    5d14:	84199004 	addi	r16,r16,26176
    5d18:	e0bfff17 	ldw	r2,-4(fp)
    5d1c:	1009883a 	mov	r4,r2
    5d20:	01400304 	movi	r5,12
    5d24:	00043ac0 	call	43ac <__mulsi3>
    5d28:	8085883a 	add	r2,r16,r2
    5d2c:	10800204 	addi	r2,r2,8
    5d30:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    5d34:	04000034 	movhi	r16,0
    5d38:	84199004 	addi	r16,r16,26176
    5d3c:	e0bfff17 	ldw	r2,-4(fp)
    5d40:	1009883a 	mov	r4,r2
    5d44:	01400304 	movi	r5,12
    5d48:	00043ac0 	call	43ac <__mulsi3>
    5d4c:	8085883a 	add	r2,r16,r2
    5d50:	10000015 	stw	zero,0(r2)
  }
}
    5d54:	e037883a 	mov	sp,fp
    5d58:	dfc00217 	ldw	ra,8(sp)
    5d5c:	df000117 	ldw	fp,4(sp)
    5d60:	dc000017 	ldw	r16,0(sp)
    5d64:	dec00304 	addi	sp,sp,12
    5d68:	f800283a 	ret

00005d6c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    5d6c:	deffff04 	addi	sp,sp,-4
    5d70:	df000015 	stw	fp,0(sp)
    5d74:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    5d78:	000170fa 	wrctl	ienable,zero
}
    5d7c:	e037883a 	mov	sp,fp
    5d80:	df000017 	ldw	fp,0(sp)
    5d84:	dec00104 	addi	sp,sp,4
    5d88:	f800283a 	ret

00005d8c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    5d8c:	defffa04 	addi	sp,sp,-24
    5d90:	dfc00515 	stw	ra,20(sp)
    5d94:	df000415 	stw	fp,16(sp)
    5d98:	df000404 	addi	fp,sp,16
    5d9c:	e13ffe15 	stw	r4,-8(fp)
    5da0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    5da4:	e0bfff17 	ldw	r2,-4(fp)
    5da8:	10800017 	ldw	r2,0(r2)
    5dac:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    5db0:	e13ffe17 	ldw	r4,-8(fp)
    5db4:	00044840 	call	4484 <strlen>
    5db8:	10800044 	addi	r2,r2,1
    5dbc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    5dc0:	00000d06 	br	5df8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    5dc4:	e0bffc17 	ldw	r2,-16(fp)
    5dc8:	10c00217 	ldw	r3,8(r2)
    5dcc:	e0bffd17 	ldw	r2,-12(fp)
    5dd0:	1809883a 	mov	r4,r3
    5dd4:	e17ffe17 	ldw	r5,-8(fp)
    5dd8:	100d883a 	mov	r6,r2
    5ddc:	00060940 	call	6094 <memcmp>
    5de0:	1000021e 	bne	r2,zero,5dec <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    5de4:	e0bffc17 	ldw	r2,-16(fp)
    5de8:	00000706 	br	5e08 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    5dec:	e0bffc17 	ldw	r2,-16(fp)
    5df0:	10800017 	ldw	r2,0(r2)
    5df4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    5df8:	e0fffc17 	ldw	r3,-16(fp)
    5dfc:	e0bfff17 	ldw	r2,-4(fp)
    5e00:	18bff01e 	bne	r3,r2,5dc4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    5e04:	0005883a 	mov	r2,zero
}
    5e08:	e037883a 	mov	sp,fp
    5e0c:	dfc00117 	ldw	ra,4(sp)
    5e10:	df000017 	ldw	fp,0(sp)
    5e14:	dec00204 	addi	sp,sp,8
    5e18:	f800283a 	ret

00005e1c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    5e1c:	defffb04 	addi	sp,sp,-20
    5e20:	dfc00415 	stw	ra,16(sp)
    5e24:	df000315 	stw	fp,12(sp)
    5e28:	df000304 	addi	fp,sp,12
    5e2c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    5e30:	00800034 	movhi	r2,0
    5e34:	1099f304 	addi	r2,r2,26572
    5e38:	10800017 	ldw	r2,0(r2)
    5e3c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    5e40:	00003106 	br	5f08 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    5e44:	e0bffd17 	ldw	r2,-12(fp)
    5e48:	10800217 	ldw	r2,8(r2)
    5e4c:	1009883a 	mov	r4,r2
    5e50:	00044840 	call	4484 <strlen>
    5e54:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    5e58:	e0bffd17 	ldw	r2,-12(fp)
    5e5c:	10c00217 	ldw	r3,8(r2)
    5e60:	e0bffe17 	ldw	r2,-8(fp)
    5e64:	10bfffc4 	addi	r2,r2,-1
    5e68:	1885883a 	add	r2,r3,r2
    5e6c:	10800003 	ldbu	r2,0(r2)
    5e70:	10803fcc 	andi	r2,r2,255
    5e74:	1080201c 	xori	r2,r2,128
    5e78:	10bfe004 	addi	r2,r2,-128
    5e7c:	10800bd8 	cmpnei	r2,r2,47
    5e80:	1000031e 	bne	r2,zero,5e90 <alt_find_file+0x74>
    {
      len -= 1;
    5e84:	e0bffe17 	ldw	r2,-8(fp)
    5e88:	10bfffc4 	addi	r2,r2,-1
    5e8c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    5e90:	e0bffe17 	ldw	r2,-8(fp)
    5e94:	e0ffff17 	ldw	r3,-4(fp)
    5e98:	1885883a 	add	r2,r3,r2
    5e9c:	10800003 	ldbu	r2,0(r2)
    5ea0:	10803fcc 	andi	r2,r2,255
    5ea4:	1080201c 	xori	r2,r2,128
    5ea8:	10bfe004 	addi	r2,r2,-128
    5eac:	10800be0 	cmpeqi	r2,r2,47
    5eb0:	1000081e 	bne	r2,zero,5ed4 <alt_find_file+0xb8>
    5eb4:	e0bffe17 	ldw	r2,-8(fp)
    5eb8:	e0ffff17 	ldw	r3,-4(fp)
    5ebc:	1885883a 	add	r2,r3,r2
    5ec0:	10800003 	ldbu	r2,0(r2)
    5ec4:	10803fcc 	andi	r2,r2,255
    5ec8:	1080201c 	xori	r2,r2,128
    5ecc:	10bfe004 	addi	r2,r2,-128
    5ed0:	10000a1e 	bne	r2,zero,5efc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    5ed4:	e0bffd17 	ldw	r2,-12(fp)
    5ed8:	10c00217 	ldw	r3,8(r2)
    5edc:	e0bffe17 	ldw	r2,-8(fp)
    5ee0:	1809883a 	mov	r4,r3
    5ee4:	e17fff17 	ldw	r5,-4(fp)
    5ee8:	100d883a 	mov	r6,r2
    5eec:	00060940 	call	6094 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    5ef0:	1000021e 	bne	r2,zero,5efc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    5ef4:	e0bffd17 	ldw	r2,-12(fp)
    5ef8:	00000806 	br	5f1c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    5efc:	e0bffd17 	ldw	r2,-12(fp)
    5f00:	10800017 	ldw	r2,0(r2)
    5f04:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    5f08:	e0fffd17 	ldw	r3,-12(fp)
    5f0c:	00800034 	movhi	r2,0
    5f10:	1099f304 	addi	r2,r2,26572
    5f14:	18bfcb1e 	bne	r3,r2,5e44 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    5f18:	0005883a 	mov	r2,zero
}
    5f1c:	e037883a 	mov	sp,fp
    5f20:	dfc00117 	ldw	ra,4(sp)
    5f24:	df000017 	ldw	fp,0(sp)
    5f28:	dec00204 	addi	sp,sp,8
    5f2c:	f800283a 	ret

00005f30 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    5f30:	defffa04 	addi	sp,sp,-24
    5f34:	dfc00515 	stw	ra,20(sp)
    5f38:	df000415 	stw	fp,16(sp)
    5f3c:	dc000315 	stw	r16,12(sp)
    5f40:	df000304 	addi	fp,sp,12
    5f44:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    5f48:	00bffa04 	movi	r2,-24
    5f4c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    5f50:	e03ffd15 	stw	zero,-12(fp)
    5f54:	00002106 	br	5fdc <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
    5f58:	04000034 	movhi	r16,0
    5f5c:	84199004 	addi	r16,r16,26176
    5f60:	e0bffd17 	ldw	r2,-12(fp)
    5f64:	1009883a 	mov	r4,r2
    5f68:	01400304 	movi	r5,12
    5f6c:	00043ac0 	call	43ac <__mulsi3>
    5f70:	8085883a 	add	r2,r16,r2
    5f74:	10800017 	ldw	r2,0(r2)
    5f78:	1000151e 	bne	r2,zero,5fd0 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
    5f7c:	04000034 	movhi	r16,0
    5f80:	84199004 	addi	r16,r16,26176
    5f84:	e0bffd17 	ldw	r2,-12(fp)
    5f88:	1009883a 	mov	r4,r2
    5f8c:	01400304 	movi	r5,12
    5f90:	00043ac0 	call	43ac <__mulsi3>
    5f94:	8085883a 	add	r2,r16,r2
    5f98:	e0ffff17 	ldw	r3,-4(fp)
    5f9c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    5fa0:	00800034 	movhi	r2,0
    5fa4:	1099f704 	addi	r2,r2,26588
    5fa8:	10c00017 	ldw	r3,0(r2)
    5fac:	e0bffd17 	ldw	r2,-12(fp)
    5fb0:	1880040e 	bge	r3,r2,5fc4 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
    5fb4:	00800034 	movhi	r2,0
    5fb8:	1099f704 	addi	r2,r2,26588
    5fbc:	e0fffd17 	ldw	r3,-12(fp)
    5fc0:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    5fc4:	e0bffd17 	ldw	r2,-12(fp)
    5fc8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    5fcc:	00000606 	br	5fe8 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    5fd0:	e0bffd17 	ldw	r2,-12(fp)
    5fd4:	10800044 	addi	r2,r2,1
    5fd8:	e0bffd15 	stw	r2,-12(fp)
    5fdc:	e0bffd17 	ldw	r2,-12(fp)
    5fe0:	10800810 	cmplti	r2,r2,32
    5fe4:	103fdc1e 	bne	r2,zero,5f58 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    5fe8:	e0bffe17 	ldw	r2,-8(fp)
}
    5fec:	e037883a 	mov	sp,fp
    5ff0:	dfc00217 	ldw	ra,8(sp)
    5ff4:	df000117 	ldw	fp,4(sp)
    5ff8:	dc000017 	ldw	r16,0(sp)
    5ffc:	dec00304 	addi	sp,sp,12
    6000:	f800283a 	ret

00006004 <atexit>:
    6004:	200b883a 	mov	r5,r4
    6008:	000d883a 	mov	r6,zero
    600c:	0009883a 	mov	r4,zero
    6010:	000f883a 	mov	r7,zero
    6014:	00060dc1 	jmpi	60dc <__register_exitproc>

00006018 <exit>:
    6018:	defffe04 	addi	sp,sp,-8
    601c:	000b883a 	mov	r5,zero
    6020:	dc000015 	stw	r16,0(sp)
    6024:	dfc00115 	stw	ra,4(sp)
    6028:	2021883a 	mov	r16,r4
    602c:	00062640 	call	6264 <__call_exitprocs>
    6030:	8009883a 	mov	r4,r16
    6034:	000643c0 	call	643c <_exit>

00006038 <fputs>:
    6038:	defffd04 	addi	sp,sp,-12
    603c:	dfc00215 	stw	ra,8(sp)
    6040:	dc000115 	stw	r16,4(sp)
    6044:	d9400015 	stw	r5,0(sp)
    6048:	2021883a 	mov	r16,r4
    604c:	00044840 	call	4484 <strlen>
    6050:	00c00034 	movhi	r3,0
    6054:	18d9f204 	addi	r3,r3,26568
    6058:	d9400017 	ldw	r5,0(sp)
    605c:	19000017 	ldw	r4,0(r3)
    6060:	00c00034 	movhi	r3,0
    6064:	18d30104 	addi	r3,r3,19460
    6068:	28c00115 	stw	r3,4(r5)
    606c:	800d883a 	mov	r6,r16
    6070:	100f883a 	mov	r7,r2
    6074:	183ee83a 	callr	r3
    6078:	00ffffc4 	movi	r3,-1
    607c:	10c00126 	beq	r2,r3,6084 <fputs+0x4c>
    6080:	0005883a 	mov	r2,zero
    6084:	dfc00217 	ldw	ra,8(sp)
    6088:	dc000117 	ldw	r16,4(sp)
    608c:	dec00304 	addi	sp,sp,12
    6090:	f800283a 	ret

00006094 <memcmp>:
    6094:	30000d26 	beq	r6,zero,60cc <memcmp+0x38>
    6098:	20c00003 	ldbu	r3,0(r4)
    609c:	28800003 	ldbu	r2,0(r5)
    60a0:	18800c1e 	bne	r3,r2,60d4 <memcmp+0x40>
    60a4:	31bfff84 	addi	r6,r6,-2
    60a8:	01ffffc4 	movi	r7,-1
    60ac:	00000406 	br	60c0 <memcmp+0x2c>
    60b0:	20c00003 	ldbu	r3,0(r4)
    60b4:	28800003 	ldbu	r2,0(r5)
    60b8:	31bfffc4 	addi	r6,r6,-1
    60bc:	1880051e 	bne	r3,r2,60d4 <memcmp+0x40>
    60c0:	21000044 	addi	r4,r4,1
    60c4:	29400044 	addi	r5,r5,1
    60c8:	31fff91e 	bne	r6,r7,60b0 <memcmp+0x1c>
    60cc:	0005883a 	mov	r2,zero
    60d0:	f800283a 	ret
    60d4:	1885c83a 	sub	r2,r3,r2
    60d8:	f800283a 	ret

000060dc <__register_exitproc>:
    60dc:	defff904 	addi	sp,sp,-28
    60e0:	00800034 	movhi	r2,0
    60e4:	1099f104 	addi	r2,r2,26564
    60e8:	dc400415 	stw	r17,16(sp)
    60ec:	14400017 	ldw	r17,0(r2)
    60f0:	dc000315 	stw	r16,12(sp)
    60f4:	dc800515 	stw	r18,20(sp)
    60f8:	8c000c17 	ldw	r16,48(r17)
    60fc:	dfc00615 	stw	ra,24(sp)
    6100:	2025883a 	mov	r18,r4
    6104:	80004226 	beq	r16,zero,6210 <__register_exitproc+0x134>
    6108:	80800117 	ldw	r2,4(r16)
    610c:	00c007c4 	movi	r3,31
    6110:	1880180e 	bge	r3,r2,6174 <__register_exitproc+0x98>
    6114:	00800034 	movhi	r2,0
    6118:	10800004 	addi	r2,r2,0
    611c:	1000071e 	bne	r2,zero,613c <__register_exitproc+0x60>
    6120:	00bfffc4 	movi	r2,-1
    6124:	dfc00617 	ldw	ra,24(sp)
    6128:	dc800517 	ldw	r18,20(sp)
    612c:	dc400417 	ldw	r17,16(sp)
    6130:	dc000317 	ldw	r16,12(sp)
    6134:	dec00704 	addi	sp,sp,28
    6138:	f800283a 	ret
    613c:	01002304 	movi	r4,140
    6140:	d9400015 	stw	r5,0(sp)
    6144:	d9800115 	stw	r6,4(sp)
    6148:	d9c00215 	stw	r7,8(sp)
    614c:	00000000 	call	0 <__alt_mem_memory-0x4000>
    6150:	1021883a 	mov	r16,r2
    6154:	d9400017 	ldw	r5,0(sp)
    6158:	d9800117 	ldw	r6,4(sp)
    615c:	d9c00217 	ldw	r7,8(sp)
    6160:	103fef26 	beq	r2,zero,6120 <__register_exitproc+0x44>
    6164:	88800c17 	ldw	r2,48(r17)
    6168:	80000115 	stw	zero,4(r16)
    616c:	80800015 	stw	r2,0(r16)
    6170:	8c000c15 	stw	r16,48(r17)
    6174:	90001726 	beq	r18,zero,61d4 <__register_exitproc+0xf8>
    6178:	80802217 	ldw	r2,136(r16)
    617c:	10002826 	beq	r2,zero,6220 <__register_exitproc+0x144>
    6180:	12804017 	ldw	r10,256(r2)
    6184:	80c00117 	ldw	r3,4(r16)
    6188:	02400044 	movi	r9,1
    618c:	48d2983a 	sll	r9,r9,r3
    6190:	19000804 	addi	r4,r3,32
    6194:	18d1883a 	add	r8,r3,r3
    6198:	2109883a 	add	r4,r4,r4
    619c:	4211883a 	add	r8,r8,r8
    61a0:	2109883a 	add	r4,r4,r4
    61a4:	1109883a 	add	r4,r2,r4
    61a8:	1211883a 	add	r8,r2,r8
    61ac:	5254b03a 	or	r10,r10,r9
    61b0:	21c00015 	stw	r7,0(r4)
    61b4:	41800015 	stw	r6,0(r8)
    61b8:	12804015 	stw	r10,256(r2)
    61bc:	01000084 	movi	r4,2
    61c0:	9100051e 	bne	r18,r4,61d8 <__register_exitproc+0xfc>
    61c4:	11004117 	ldw	r4,260(r2)
    61c8:	2252b03a 	or	r9,r4,r9
    61cc:	12404115 	stw	r9,260(r2)
    61d0:	00000106 	br	61d8 <__register_exitproc+0xfc>
    61d4:	80c00117 	ldw	r3,4(r16)
    61d8:	18800084 	addi	r2,r3,2
    61dc:	1085883a 	add	r2,r2,r2
    61e0:	1085883a 	add	r2,r2,r2
    61e4:	8085883a 	add	r2,r16,r2
    61e8:	18c00044 	addi	r3,r3,1
    61ec:	11400015 	stw	r5,0(r2)
    61f0:	0005883a 	mov	r2,zero
    61f4:	80c00115 	stw	r3,4(r16)
    61f8:	dfc00617 	ldw	ra,24(sp)
    61fc:	dc800517 	ldw	r18,20(sp)
    6200:	dc400417 	ldw	r17,16(sp)
    6204:	dc000317 	ldw	r16,12(sp)
    6208:	dec00704 	addi	sp,sp,28
    620c:	f800283a 	ret
    6210:	04000034 	movhi	r16,0
    6214:	841ab304 	addi	r16,r16,27340
    6218:	8c000c15 	stw	r16,48(r17)
    621c:	003fba06 	br	6108 <__register_exitproc+0x2c>
    6220:	00800034 	movhi	r2,0
    6224:	10800004 	addi	r2,r2,0
    6228:	103fbd26 	beq	r2,zero,6120 <__register_exitproc+0x44>
    622c:	d9400015 	stw	r5,0(sp)
    6230:	d9800115 	stw	r6,4(sp)
    6234:	d9c00215 	stw	r7,8(sp)
    6238:	01004204 	movi	r4,264
    623c:	103ee83a 	callr	r2
    6240:	d9400017 	ldw	r5,0(sp)
    6244:	d9800117 	ldw	r6,4(sp)
    6248:	d9c00217 	ldw	r7,8(sp)
    624c:	103fb426 	beq	r2,zero,6120 <__register_exitproc+0x44>
    6250:	10004015 	stw	zero,256(r2)
    6254:	10004115 	stw	zero,260(r2)
    6258:	80802215 	stw	r2,136(r16)
    625c:	0015883a 	mov	r10,zero
    6260:	003fc806 	br	6184 <__register_exitproc+0xa8>

00006264 <__call_exitprocs>:
    6264:	00800034 	movhi	r2,0
    6268:	1099f104 	addi	r2,r2,26564
    626c:	10800017 	ldw	r2,0(r2)
    6270:	defff204 	addi	sp,sp,-56
    6274:	df000c15 	stw	fp,48(sp)
    6278:	d8800015 	stw	r2,0(sp)
    627c:	10800c04 	addi	r2,r2,48
    6280:	dd400915 	stw	r21,36(sp)
    6284:	dfc00d15 	stw	ra,52(sp)
    6288:	ddc00b15 	stw	r23,44(sp)
    628c:	dd800a15 	stw	r22,40(sp)
    6290:	dd000815 	stw	r20,32(sp)
    6294:	dcc00715 	stw	r19,28(sp)
    6298:	dc800615 	stw	r18,24(sp)
    629c:	dc400515 	stw	r17,20(sp)
    62a0:	dc000415 	stw	r16,16(sp)
    62a4:	d9000115 	stw	r4,4(sp)
    62a8:	2839883a 	mov	fp,r5
    62ac:	d8800215 	stw	r2,8(sp)
    62b0:	057fffc4 	movi	r21,-1
    62b4:	d8800017 	ldw	r2,0(sp)
    62b8:	dd800217 	ldw	r22,8(sp)
    62bc:	15c00c17 	ldw	r23,48(r2)
    62c0:	b8001b26 	beq	r23,zero,6330 <__call_exitprocs+0xcc>
    62c4:	b9000117 	ldw	r4,4(r23)
    62c8:	bd002217 	ldw	r20,136(r23)
    62cc:	243fffc4 	addi	r16,r4,-1
    62d0:	80001416 	blt	r16,zero,6324 <__call_exitprocs+0xc0>
    62d4:	244007c4 	addi	r17,r4,31
    62d8:	21000044 	addi	r4,r4,1
    62dc:	8c63883a 	add	r17,r17,r17
    62e0:	8427883a 	add	r19,r16,r16
    62e4:	2109883a 	add	r4,r4,r4
    62e8:	8c63883a 	add	r17,r17,r17
    62ec:	9ce7883a 	add	r19,r19,r19
    62f0:	2109883a 	add	r4,r4,r4
    62f4:	a463883a 	add	r17,r20,r17
    62f8:	a4e7883a 	add	r19,r20,r19
    62fc:	b925883a 	add	r18,r23,r4
    6300:	e0001726 	beq	fp,zero,6360 <__call_exitprocs+0xfc>
    6304:	a0000226 	beq	r20,zero,6310 <__call_exitprocs+0xac>
    6308:	89400017 	ldw	r5,0(r17)
    630c:	2f001426 	beq	r5,fp,6360 <__call_exitprocs+0xfc>
    6310:	843fffc4 	addi	r16,r16,-1
    6314:	8c7fff04 	addi	r17,r17,-4
    6318:	9cffff04 	addi	r19,r19,-4
    631c:	94bfff04 	addi	r18,r18,-4
    6320:	857ff71e 	bne	r16,r21,6300 <__call_exitprocs+0x9c>
    6324:	00800034 	movhi	r2,0
    6328:	10800004 	addi	r2,r2,0
    632c:	1000311e 	bne	r2,zero,63f4 <__call_exitprocs+0x190>
    6330:	dfc00d17 	ldw	ra,52(sp)
    6334:	df000c17 	ldw	fp,48(sp)
    6338:	ddc00b17 	ldw	r23,44(sp)
    633c:	dd800a17 	ldw	r22,40(sp)
    6340:	dd400917 	ldw	r21,36(sp)
    6344:	dd000817 	ldw	r20,32(sp)
    6348:	dcc00717 	ldw	r19,28(sp)
    634c:	dc800617 	ldw	r18,24(sp)
    6350:	dc400517 	ldw	r17,20(sp)
    6354:	dc000417 	ldw	r16,16(sp)
    6358:	dec00e04 	addi	sp,sp,56
    635c:	f800283a 	ret
    6360:	b9000117 	ldw	r4,4(r23)
    6364:	92000017 	ldw	r8,0(r18)
    6368:	213fffc4 	addi	r4,r4,-1
    636c:	24001a26 	beq	r4,r16,63d8 <__call_exitprocs+0x174>
    6370:	90000015 	stw	zero,0(r18)
    6374:	403fe626 	beq	r8,zero,6310 <__call_exitprocs+0xac>
    6378:	ba400117 	ldw	r9,4(r23)
    637c:	a0001226 	beq	r20,zero,63c8 <__call_exitprocs+0x164>
    6380:	00800044 	movi	r2,1
    6384:	1408983a 	sll	r4,r2,r16
    6388:	a1404017 	ldw	r5,256(r20)
    638c:	214a703a 	and	r5,r4,r5
    6390:	28000d26 	beq	r5,zero,63c8 <__call_exitprocs+0x164>
    6394:	a1404117 	ldw	r5,260(r20)
    6398:	2148703a 	and	r4,r4,r5
    639c:	2000101e 	bne	r4,zero,63e0 <__call_exitprocs+0x17c>
    63a0:	99400017 	ldw	r5,0(r19)
    63a4:	d9000117 	ldw	r4,4(sp)
    63a8:	da400315 	stw	r9,12(sp)
    63ac:	403ee83a 	callr	r8
    63b0:	da400317 	ldw	r9,12(sp)
    63b4:	b9000117 	ldw	r4,4(r23)
    63b8:	227fbe1e 	bne	r4,r9,62b4 <__call_exitprocs+0x50>
    63bc:	b1000017 	ldw	r4,0(r22)
    63c0:	25ffd326 	beq	r4,r23,6310 <__call_exitprocs+0xac>
    63c4:	003fbb06 	br	62b4 <__call_exitprocs+0x50>
    63c8:	da400315 	stw	r9,12(sp)
    63cc:	403ee83a 	callr	r8
    63d0:	da400317 	ldw	r9,12(sp)
    63d4:	003ff706 	br	63b4 <__call_exitprocs+0x150>
    63d8:	bc000115 	stw	r16,4(r23)
    63dc:	003fe506 	br	6374 <__call_exitprocs+0x110>
    63e0:	99000017 	ldw	r4,0(r19)
    63e4:	da400315 	stw	r9,12(sp)
    63e8:	403ee83a 	callr	r8
    63ec:	da400317 	ldw	r9,12(sp)
    63f0:	003ff006 	br	63b4 <__call_exitprocs+0x150>
    63f4:	b9000117 	ldw	r4,4(r23)
    63f8:	20000e1e 	bne	r4,zero,6434 <__call_exitprocs+0x1d0>
    63fc:	b9000017 	ldw	r4,0(r23)
    6400:	20000826 	beq	r4,zero,6424 <__call_exitprocs+0x1c0>
    6404:	b1000015 	stw	r4,0(r22)
    6408:	a0000226 	beq	r20,zero,6414 <__call_exitprocs+0x1b0>
    640c:	a009883a 	mov	r4,r20
    6410:	00000000 	call	0 <__alt_mem_memory-0x4000>
    6414:	b809883a 	mov	r4,r23
    6418:	00000000 	call	0 <__alt_mem_memory-0x4000>
    641c:	b5c00017 	ldw	r23,0(r22)
    6420:	003fa706 	br	62c0 <__call_exitprocs+0x5c>
    6424:	0007883a 	mov	r3,zero
    6428:	b82d883a 	mov	r22,r23
    642c:	182f883a 	mov	r23,r3
    6430:	003fa306 	br	62c0 <__call_exitprocs+0x5c>
    6434:	b8c00017 	ldw	r3,0(r23)
    6438:	003ffb06 	br	6428 <__call_exitprocs+0x1c4>

0000643c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    643c:	defffc04 	addi	sp,sp,-16
    6440:	df000315 	stw	fp,12(sp)
    6444:	df000304 	addi	fp,sp,12
    6448:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    644c:	0001883a 	nop
    6450:	e0bfff17 	ldw	r2,-4(fp)
    6454:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
    6458:	e0bffd17 	ldw	r2,-12(fp)
    645c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    6460:	e0bffe17 	ldw	r2,-8(fp)
    6464:	10000226 	beq	r2,zero,6470 <_exit+0x34>
    ALT_SIM_FAIL();
    6468:	002af070 	cmpltui	zero,zero,43969
    646c:	00000106 	br	6474 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
    6470:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    6474:	003fff06 	br	6474 <_exit+0x38>
