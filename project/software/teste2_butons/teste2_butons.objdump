
teste2_butons.elf:     file format elf32-littlenios2
teste2_butons.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00001100 memsz 0x00001100 flags r-x
    LOAD off    0x00002120 vaddr 0x00009120 paddr 0x00009214 align 2**12
         filesz 0x000000f4 memsz 0x000000f4 flags rw-
    LOAD off    0x00002308 vaddr 0x00009308 paddr 0x00009308 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00001078  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  00009098  00009098  00002098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000000f4  00009120  00009214  00002120  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000010  00009308  00009308  00002308  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  00002214  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002f8  00000000  00000000  00002238  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000406d  00000000  00000000  00002530  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000160e  00000000  00000000  0000659d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001ba4  00000000  00000000  00007bab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003e0  00000000  00000000  00009750  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000f48  00000000  00000000  00009b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000196b  00000000  00000000  0000aa78  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_alt_sim_info 00000040  00000000  00000000  0000c3e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000220  00000000  00000000  0000c428  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .thread_model 00000003  00000000  00000000  0000d753  2**0
                  CONTENTS, READONLY
 16 .cpu          00000004  00000000  00000000  0000d756  2**0
                  CONTENTS, READONLY
 17 .qsys         00000001  00000000  00000000  0000d75a  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  0000d75b  2**0
                  CONTENTS, READONLY
 19 .stderr_dev   00000004  00000000  00000000  0000d75c  2**0
                  CONTENTS, READONLY
 20 .stdin_dev    00000004  00000000  00000000  0000d760  2**0
                  CONTENTS, READONLY
 21 .stdout_dev   00000004  00000000  00000000  0000d764  2**0
                  CONTENTS, READONLY
 22 .sopc_system_name 00000004  00000000  00000000  0000d768  2**0
                  CONTENTS, READONLY
 23 .quartus_project_dir 00000039  00000000  00000000  0000d76c  2**0
                  CONTENTS, READONLY
 24 .sopcinfo     00043545  00000000  00000000  0000d7a5  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .text	00000000 .text
00009098 l    d  .rodata	00000000 .rodata
00009120 l    d  .rwdata	00000000 .rwdata
00009308 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../teste2_butons_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00009120 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00008ca4 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 
00008ed8 g     F .text	0000002c alt_main
00009214 g       *ABS*	00000000 __flash_rwdata_start
0000838c g     F .text	0000004c printf
00008f04 g     F .text	00000038 alt_putstr
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
00009308 g     O .bss	00000004 errno
00009310 g     O .bss	00000004 alt_argv
00011200 g       *ABS*	00000000 _gp
00008f3c g     F .text	00000004 usleep
00008328 g     F .text	00000028 memcpy
00008350 g     F .text	0000003c _printf_r
00008dc4 g     F .text	00000008 __udivsi3
00009204 g     O .rwdata	00000004 _global_impure_ptr
00009318 g       *ABS*	00000000 __bss_end
00009088 g     F .text	00000004 alt_dcache_flush_all
00009214 g       *ABS*	00000000 __ram_rwdata_end
00008f40 g     F .text	00000068 write
00009120 g       *ABS*	00000000 __ram_rodata_end
00008dcc g     F .text	00000008 __umodsi3
00009318 g       *ABS*	00000000 end
0000805c g     F .text	000000a8 printalcd
0000c000 g       *ABS*	00000000 __alt_stack_pointer
00008fcc g     F .text	00000034 altera_avalon_jtag_uart_write
00008400 g     F .text	00000734 ___vfprintf_internal_r
00008020 g     F .text	0000003c _start
00008fc8 g     F .text	00000004 alt_sys_init
00008300 g     F .text	00000028 __mulsi3
00009120 g       *ABS*	00000000 __ram_rwdata_start
00009098 g       *ABS*	00000000 __ram_rodata_start
00009000 g     F .text	00000088 alt_busy_sleep
00009200 g     O .rwdata	00000001 button_value
00009318 g       *ABS*	00000000 __alt_stack_base
00008b58 g     F .text	000000e0 __sfvwrite_small_dev
00009308 g       *ABS*	00000000 __bss_start
0000813c g     F .text	000000c4 lcd_init
00008200 g     F .text	00000100 main
0000930c g     O .bss	00000004 alt_envp
00009210 g     O .rwdata	00000004 alt_errno
00008d18 g     F .text	00000050 __divsi3
00009098 g       *ABS*	00000000 __flash_rodata_start
00008fa8 g     F .text	00000020 alt_irq_init
00008c38 g     F .text	0000006c _write_r
00009208 g     O .rwdata	00000004 _impure_ptr
00009314 g     O .bss	00000004 alt_argc
0000920c g     O .rwdata	00000004 Jtag
00008020 g       *ABS*	00000000 __ram_exceptions_start
00009214 g       *ABS*	00000000 _edata
00008104 g     F .text	00000038 espera
00009318 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00008000 g       *ABS*	00000000 __alt_mem_memory
00009090 g     F .text	00000008 altera_nios2_qsys_irq_init
00008d68 g     F .text	0000005c __modsi3
0000c000 g       *ABS*	00000000 __alt_data_end
0000800c g       .entry	00000000 _exit
000083d8 g     F .text	00000028 strlen
0000908c g     F .text	00000004 alt_icache_flush_all
00008b34 g     F .text	00000024 __vfprintf_internal
00008dd4 g     F .text	00000104 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def00014 	ori	sp,sp,49152
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6848014 	ori	gp,gp,4608
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a4c214 	ori	r2,r2,37640

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e4c614 	ori	r3,r3,37656

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	0008dd40 	call	8dd4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	0008ed80 	call	8ed8 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <alt_after_alt_main>

0000805c <printalcd>:
}

/*
 * Metodo para escrever palavras no LCD
 */
void printalcd(char word[][15], int lugar){
    805c:	defffb04 	addi	sp,sp,-20
    8060:	dc800215 	stw	r18,8(sp)
    8064:	dc400115 	stw	r17,4(sp)
    8068:	dc000015 	stw	r16,0(sp)
    806c:	dfc00415 	stw	ra,16(sp)
    8070:	dcc00315 	stw	r19,12(sp)
    8074:	2025883a 	mov	r18,r4
    8078:	2823883a 	mov	r17,r5
	int i;
	/* Set the Cursor to the home position */
	 IOWR(LCD_16207_0_BASE, LCD_WR_COMMAND_REG, 0x02);
    807c:	04000074 	movhi	r16,1
    8080:	84040404 	addi	r16,r16,4112
    8084:	00800084 	movi	r2,2
    8088:	80800035 	stwio	r2,0(r16)
	 usleep(2000);
    808c:	0101f404 	movi	r4,2000
    8090:	0008f3c0 	call	8f3c <usleep>

	 /* Display clear */
	 IOWR(LCD_16207_0_BASE, LCD_WR_COMMAND_REG, 0x01);
    8094:	00800044 	movi	r2,1
    8098:	80800035 	stwio	r2,0(r16)
	 usleep(2000);
    809c:	0101f404 	movi	r4,2000
    80a0:	0008f3c0 	call	8f3c <usleep>

	//printf("%i",strlen(word));
	for(i=0;i<strlen(word);i++){
		IOWR(LCD_16207_0_BASE, 2, word[lugar][i]);
    80a4:	8809883a 	mov	r4,r17
    80a8:	014003c4 	movi	r5,15
    80ac:	00083000 	call	8300 <__mulsi3>
    80b0:	90a3883a 	add	r17,r18,r2
	 /* Display clear */
	 IOWR(LCD_16207_0_BASE, LCD_WR_COMMAND_REG, 0x01);
	 usleep(2000);

	//printf("%i",strlen(word));
	for(i=0;i<strlen(word);i++){
    80b4:	8821883a 	mov	r16,r17
		IOWR(LCD_16207_0_BASE, 2, word[lugar][i]);
    80b8:	04c00074 	movhi	r19,1
    80bc:	9cc40604 	addi	r19,r19,4120
	 /* Display clear */
	 IOWR(LCD_16207_0_BASE, LCD_WR_COMMAND_REG, 0x01);
	 usleep(2000);

	//printf("%i",strlen(word));
	for(i=0;i<strlen(word);i++){
    80c0:	00000506 	br	80d8 <printalcd+0x7c>
		IOWR(LCD_16207_0_BASE, 2, word[lugar][i]);
    80c4:	80800007 	ldb	r2,0(r16)
    80c8:	98800035 	stwio	r2,0(r19)
		usleep(100);
    80cc:	01001904 	movi	r4,100
    80d0:	0008f3c0 	call	8f3c <usleep>
    80d4:	84000044 	addi	r16,r16,1
	 /* Display clear */
	 IOWR(LCD_16207_0_BASE, LCD_WR_COMMAND_REG, 0x01);
	 usleep(2000);

	//printf("%i",strlen(word));
	for(i=0;i<strlen(word);i++){
    80d8:	9009883a 	mov	r4,r18
    80dc:	00083d80 	call	83d8 <strlen>
}

/*
 * Metodo para escrever palavras no LCD
 */
void printalcd(char word[][15], int lugar){
    80e0:	8447c83a 	sub	r3,r16,r17
	 /* Display clear */
	 IOWR(LCD_16207_0_BASE, LCD_WR_COMMAND_REG, 0x01);
	 usleep(2000);

	//printf("%i",strlen(word));
	for(i=0;i<strlen(word);i++){
    80e4:	18bff736 	bltu	r3,r2,80c4 <printalcd+0x68>
		IOWR(LCD_16207_0_BASE, 2, word[lugar][i]);
		usleep(100);
	}
}
    80e8:	dfc00417 	ldw	ra,16(sp)
    80ec:	dcc00317 	ldw	r19,12(sp)
    80f0:	dc800217 	ldw	r18,8(sp)
    80f4:	dc400117 	ldw	r17,4(sp)
    80f8:	dc000017 	ldw	r16,0(sp)
    80fc:	dec00504 	addi	sp,sp,20
    8100:	f800283a 	ret

00008104 <espera>:

void espera(int a){
    8104:	defffe04 	addi	sp,sp,-8
	volatile int i = 0;
	while(i<a*50000){
    8108:	0170d414 	movui	r5,50000
		IOWR(LCD_16207_0_BASE, 2, word[lugar][i]);
		usleep(100);
	}
}

void espera(int a){
    810c:	dfc00115 	stw	ra,4(sp)
	volatile int i = 0;
    8110:	d8000015 	stw	zero,0(sp)
	while(i<a*50000){
    8114:	00083000 	call	8300 <__mulsi3>
    8118:	00000306 	br	8128 <espera+0x24>
		i++;
    811c:	d8c00017 	ldw	r3,0(sp)
    8120:	18c00044 	addi	r3,r3,1
    8124:	d8c00015 	stw	r3,0(sp)
	}
}

void espera(int a){
	volatile int i = 0;
	while(i<a*50000){
    8128:	d8c00017 	ldw	r3,0(sp)
    812c:	18bffb16 	blt	r3,r2,811c <espera+0x18>
		i++;
	}
}
    8130:	dfc00117 	ldw	ra,4(sp)
    8134:	dec00204 	addi	sp,sp,8
    8138:	f800283a 	ret

0000813c <lcd_init>:


void lcd_init( void) {
    813c:	defffc04 	addi	sp,sp,-16

 usleep(15000); /* Wait for more than 15 ms before init */
    8140:	010ea604 	movi	r4,15000
		i++;
	}
}


void lcd_init( void) {
    8144:	dc800215 	stw	r18,8(sp)
    8148:	dc000015 	stw	r16,0(sp)
    814c:	dfc00315 	stw	ra,12(sp)
    8150:	dc400115 	stw	r17,4(sp)

 usleep(15000); /* Wait for more than 15 ms before init */
 /* Set function code four times -- 8-bit, 2 line, 5x7 mode */
 IOWR(LCD_16207_0_BASE, LCD_WR_COMMAND_REG, 0x38);
    8154:	04800e04 	movi	r18,56
}


void lcd_init( void) {

 usleep(15000); /* Wait for more than 15 ms before init */
    8158:	0008f3c0 	call	8f3c <usleep>
 /* Set function code four times -- 8-bit, 2 line, 5x7 mode */
 IOWR(LCD_16207_0_BASE, LCD_WR_COMMAND_REG, 0x38);
    815c:	04000074 	movhi	r16,1
    8160:	84040404 	addi	r16,r16,4112
    8164:	84800035 	stwio	r18,0(r16)
 usleep(4100); /* Wait for more than 4.1 ms */
    8168:	01040104 	movi	r4,4100
    816c:	0008f3c0 	call	8f3c <usleep>
 IOWR(LCD_16207_0_BASE, LCD_WR_COMMAND_REG, 0x38);
    8170:	84800035 	stwio	r18,0(r16)
 usleep(100); /* Wait for more than 100 us */
    8174:	04401904 	movi	r17,100
    8178:	8809883a 	mov	r4,r17
    817c:	0008f3c0 	call	8f3c <usleep>
 IOWR(LCD_16207_0_BASE, LCD_WR_COMMAND_REG, 0x38);
    8180:	84800035 	stwio	r18,0(r16)
 usleep(5000); /* Wait for more than 100 us */
    8184:	0104e204 	movi	r4,5000
    8188:	0008f3c0 	call	8f3c <usleep>
 IOWR(LCD_16207_0_BASE, LCD_WR_COMMAND_REG, 0x38);
    818c:	84800035 	stwio	r18,0(r16)
 usleep(100); /* Wait for more than 100 us */
    8190:	8809883a 	mov	r4,r17
    8194:	0008f3c0 	call	8f3c <usleep>

 /* Set Display to OFF*/
 IOWR(LCD_16207_0_BASE, LCD_WR_COMMAND_REG, 0x08);
    8198:	00800204 	movi	r2,8
    819c:	80800035 	stwio	r2,0(r16)
 usleep(100);
    81a0:	8809883a 	mov	r4,r17
    81a4:	0008f3c0 	call	8f3c <usleep>

 /* Set Display to ON */
 IOWR(LCD_16207_0_BASE, LCD_WR_COMMAND_REG, 0x0C);
    81a8:	00800304 	movi	r2,12
    81ac:	80800035 	stwio	r2,0(r16)
 usleep(100);
    81b0:	8809883a 	mov	r4,r17
    81b4:	0008f3c0 	call	8f3c <usleep>

 /* Set Entry Mode -- Cursor increment, display doesn't shift */
 IOWR(LCD_16207_0_BASE, LCD_WR_COMMAND_REG, 0x06);
    81b8:	00800184 	movi	r2,6
    81bc:	80800035 	stwio	r2,0(r16)
 usleep(100);
    81c0:	8809883a 	mov	r4,r17
    81c4:	0008f3c0 	call	8f3c <usleep>

 /* Set the Cursor to the home position */
 IOWR(LCD_16207_0_BASE, LCD_WR_COMMAND_REG, 0x02);
    81c8:	00800084 	movi	r2,2
    81cc:	80800035 	stwio	r2,0(r16)
 usleep(2000);
    81d0:	0441f404 	movi	r17,2000
    81d4:	8809883a 	mov	r4,r17
    81d8:	0008f3c0 	call	8f3c <usleep>

 /* Display clear */
 IOWR(LCD_16207_0_BASE, LCD_WR_COMMAND_REG, 0x01);
    81dc:	00800044 	movi	r2,1
    81e0:	80800035 	stwio	r2,0(r16)
 usleep(2000);
    81e4:	8809883a 	mov	r4,r17
}
    81e8:	dfc00317 	ldw	ra,12(sp)
    81ec:	dc800217 	ldw	r18,8(sp)
    81f0:	dc400117 	ldw	r17,4(sp)
    81f4:	dc000017 	ldw	r16,0(sp)
    81f8:	dec00404 	addi	sp,sp,16
 IOWR(LCD_16207_0_BASE, LCD_WR_COMMAND_REG, 0x02);
 usleep(2000);

 /* Display clear */
 IOWR(LCD_16207_0_BASE, LCD_WR_COMMAND_REG, 0x01);
 usleep(2000);
    81fc:	0008f3c1 	jmpi	8f3c <usleep>

00008200 <main>:
char button_value = 3;
#define UP_BUTTON 1
#define DOWN_BUTTON 2

int main()
{
    8200:	deffe204 	addi	sp,sp,-120
    8204:	dfc01d15 	stw	ra,116(sp)
    8208:	dd001a15 	stw	r20,104(sp)
    820c:	dcc01915 	stw	r19,100(sp)
    8210:	dc801815 	stw	r18,96(sp)
    8214:	dc401715 	stw	r17,92(sp)
    8218:	dc001615 	stw	r16,88(sp)
    821c:	dd801c15 	stw	r22,112(sp)
    8220:	dd401b15 	stw	r21,108(sp)


	lcd_init();
    8224:	000813c0 	call	813c <lcd_init>
	char options[5][15] = {"1 opcao","2 opcao","3 opcao","4 opcao","5 opcao"};
    8228:	01400074 	movhi	r5,1
    822c:	29643504 	addi	r5,r5,-28460
    8230:	018012c4 	movi	r6,75
    8234:	d809883a 	mov	r4,sp
    8238:	00083280 	call	8328 <memcpy>

	alt_putstr("Hello from Nios II!\n");
    823c:	01000074 	movhi	r4,1
    8240:	21242604 	addi	r4,r4,-28520
    8244:	0008f040 	call	8f04 <alt_putstr>

	char palavra[] = "outra coisa";
    8248:	01400074 	movhi	r5,1
    824c:	29643204 	addi	r5,r5,-28472
    8250:	01800304 	movi	r6,12
    8254:	d90012c4 	addi	r4,sp,75
    8258:	00083280 	call	8328 <memcpy>
	printalcd(palavra);
    825c:	d90012c4 	addi	r4,sp,75
    8260:	000805c0 	call	805c <printalcd>
	unsigned int input1, input2, output;

	int pos =0;
	printalcd(options,pos);
    8264:	d809883a 	mov	r4,sp
    8268:	000b883a 	mov	r5,zero
    826c:	000805c0 	call	805c <printalcd>

	char palavra[] = "outra coisa";
	printalcd(palavra);
	unsigned int input1, input2, output;

	int pos =0;
    8270:	0021883a 	mov	r16,zero
	unsigned int button;
	int i = 0, dip;

	while (1){

		input1 = IORD(PUSHBUTON1_BASE,0);
    8274:	04c00074 	movhi	r19,1
    8278:	9cc40804 	addi	r19,r19,4128
		input2 = IORD(PUSHBUTON2_BASE,0);

		dip = IORD(DIP_BASE, 0);
    827c:	05000074 	movhi	r20,1
    8280:	a5040004 	addi	r20,r20,4096
			espera(10);
		}

		if(input2 == 0){
			printf("APERTOU 2 ");
			IOWR(LED_BASE,1,pos);
    8284:	04800074 	movhi	r18,1
    8288:	94840d04 	addi	r18,r18,4148
			IOWR(LED_BASE,0,pos);
    828c:	04400074 	movhi	r17,1
    8290:	8c440c04 	addi	r17,r17,4144
	unsigned int button;
	int i = 0, dip;

	while (1){

		input1 = IORD(PUSHBUTON1_BASE,0);
    8294:	9d800037 	ldwio	r22,0(r19)
		input2 = IORD(PUSHBUTON2_BASE,0);
    8298:	0005883a 	mov	r2,zero
    829c:	15400037 	ldwio	r21,0(r2)

		dip = IORD(DIP_BASE, 0);
    82a0:	a0800037 	ldwio	r2,0(r20)




		//printf(" value: %i ", i);
		espera(5);
    82a4:	01000144 	movi	r4,5
    82a8:	00081040 	call	8104 <espera>
		if(input1 == 0){
    82ac:	b0000d1e 	bne	r22,zero,82e4 <main+0xe4>
			printf("APERTOU 1 ");
    82b0:	01000074 	movhi	r4,1
    82b4:	21242c04 	addi	r4,r4,-28496
    82b8:	000838c0 	call	838c <printf>
			if(pos < 4){
    82bc:	008000c4 	movi	r2,3
    82c0:	14000216 	blt	r2,r16,82cc <main+0xcc>
				pos++;
    82c4:	84000044 	addi	r16,r16,1
    82c8:	00000106 	br	82d0 <main+0xd0>
			}else{
				pos = 0;
    82cc:	0021883a 	mov	r16,zero
			}
			printalcd(options,pos);
    82d0:	d809883a 	mov	r4,sp
    82d4:	800b883a 	mov	r5,r16
    82d8:	000805c0 	call	805c <printalcd>
			espera(10);
    82dc:	01000284 	movi	r4,10
    82e0:	00081040 	call	8104 <espera>
		}

		if(input2 == 0){
    82e4:	a83feb1e 	bne	r21,zero,8294 <main+0x94>
			printf("APERTOU 2 ");
    82e8:	01000074 	movhi	r4,1
    82ec:	21242f04 	addi	r4,r4,-28484
    82f0:	000838c0 	call	838c <printf>
			IOWR(LED_BASE,1,pos);
    82f4:	94000035 	stwio	r16,0(r18)
			IOWR(LED_BASE,0,pos);
    82f8:	8c000035 	stwio	r16,0(r17)
    82fc:	003fe506 	br	8294 <main+0x94>

00008300 <__mulsi3>:
    8300:	0005883a 	mov	r2,zero
    8304:	20000726 	beq	r4,zero,8324 <__mulsi3+0x24>
    8308:	20c0004c 	andi	r3,r4,1
    830c:	2008d07a 	srli	r4,r4,1
    8310:	18000126 	beq	r3,zero,8318 <__mulsi3+0x18>
    8314:	1145883a 	add	r2,r2,r5
    8318:	294b883a 	add	r5,r5,r5
    831c:	203ffa1e 	bne	r4,zero,8308 <__mulsi3+0x8>
    8320:	f800283a 	ret
    8324:	f800283a 	ret

00008328 <memcpy>:
    8328:	2005883a 	mov	r2,r4
    832c:	30000726 	beq	r6,zero,834c <memcpy+0x24>
    8330:	218d883a 	add	r6,r4,r6
    8334:	2007883a 	mov	r3,r4
    8338:	29c00003 	ldbu	r7,0(r5)
    833c:	18c00044 	addi	r3,r3,1
    8340:	29400044 	addi	r5,r5,1
    8344:	19ffffc5 	stb	r7,-1(r3)
    8348:	19bffb1e 	bne	r3,r6,8338 <memcpy+0x10>
    834c:	f800283a 	ret

00008350 <_printf_r>:
    8350:	defffd04 	addi	sp,sp,-12
    8354:	dfc00015 	stw	ra,0(sp)
    8358:	d9800115 	stw	r6,4(sp)
    835c:	d9c00215 	stw	r7,8(sp)
    8360:	20800217 	ldw	r2,8(r4)
    8364:	00c00074 	movhi	r3,1
    8368:	18e2d604 	addi	r3,r3,-29864
    836c:	280d883a 	mov	r6,r5
    8370:	10c00115 	stw	r3,4(r2)
    8374:	100b883a 	mov	r5,r2
    8378:	d9c00104 	addi	r7,sp,4
    837c:	00084000 	call	8400 <___vfprintf_internal_r>
    8380:	dfc00017 	ldw	ra,0(sp)
    8384:	dec00304 	addi	sp,sp,12
    8388:	f800283a 	ret

0000838c <printf>:
    838c:	defffc04 	addi	sp,sp,-16
    8390:	dfc00015 	stw	ra,0(sp)
    8394:	d9400115 	stw	r5,4(sp)
    8398:	d9800215 	stw	r6,8(sp)
    839c:	d9c00315 	stw	r7,12(sp)
    83a0:	00800074 	movhi	r2,1
    83a4:	10a48204 	addi	r2,r2,-28152
    83a8:	10800017 	ldw	r2,0(r2)
    83ac:	00c00074 	movhi	r3,1
    83b0:	18e2d604 	addi	r3,r3,-29864
    83b4:	200b883a 	mov	r5,r4
    83b8:	10800217 	ldw	r2,8(r2)
    83bc:	d9800104 	addi	r6,sp,4
    83c0:	10c00115 	stw	r3,4(r2)
    83c4:	1009883a 	mov	r4,r2
    83c8:	0008b340 	call	8b34 <__vfprintf_internal>
    83cc:	dfc00017 	ldw	ra,0(sp)
    83d0:	dec00404 	addi	sp,sp,16
    83d4:	f800283a 	ret

000083d8 <strlen>:
    83d8:	20800007 	ldb	r2,0(r4)
    83dc:	10000626 	beq	r2,zero,83f8 <strlen+0x20>
    83e0:	2005883a 	mov	r2,r4
    83e4:	10800044 	addi	r2,r2,1
    83e8:	10c00007 	ldb	r3,0(r2)
    83ec:	183ffd1e 	bne	r3,zero,83e4 <strlen+0xc>
    83f0:	1105c83a 	sub	r2,r2,r4
    83f4:	f800283a 	ret
    83f8:	0005883a 	mov	r2,zero
    83fc:	f800283a 	ret

00008400 <___vfprintf_internal_r>:
    8400:	deffe004 	addi	sp,sp,-128
    8404:	d8c00804 	addi	r3,sp,32
    8408:	ddc01d15 	stw	r23,116(sp)
    840c:	dd401b15 	stw	r21,108(sp)
    8410:	dd001a15 	stw	r20,104(sp)
    8414:	dcc01915 	stw	r19,100(sp)
    8418:	dc801815 	stw	r18,96(sp)
    841c:	dc001615 	stw	r16,88(sp)
    8420:	dfc01f15 	stw	ra,124(sp)
    8424:	df001e15 	stw	fp,120(sp)
    8428:	dd801c15 	stw	r22,112(sp)
    842c:	dc401715 	stw	r17,92(sp)
    8430:	d9000f15 	stw	r4,60(sp)
    8434:	d9c00e15 	stw	r7,56(sp)
    8438:	3021883a 	mov	r16,r6
    843c:	0025883a 	mov	r18,zero
    8440:	d8001415 	stw	zero,80(sp)
    8444:	d8000d15 	stw	zero,52(sp)
    8448:	0029883a 	mov	r20,zero
    844c:	d8000b15 	stw	zero,44(sp)
    8450:	d8000c15 	stw	zero,48(sp)
    8454:	d8001315 	stw	zero,76(sp)
    8458:	d8001015 	stw	zero,64(sp)
    845c:	002b883a 	mov	r21,zero
    8460:	04c00044 	movi	r19,1
    8464:	d8c00a15 	stw	r3,40(sp)
    8468:	282f883a 	mov	r23,r5
    846c:	80c00003 	ldbu	r3,0(r16)
    8470:	84000044 	addi	r16,r16,1
    8474:	18803fcc 	andi	r2,r3,255
    8478:	1080201c 	xori	r2,r2,128
    847c:	10bfe004 	addi	r2,r2,-128
    8480:	10001426 	beq	r2,zero,84d4 <___vfprintf_internal_r+0xd4>
    8484:	acc03026 	beq	r21,r19,8548 <___vfprintf_internal_r+0x148>
    8488:	9d401f16 	blt	r19,r21,8508 <___vfprintf_internal_r+0x108>
    848c:	a83ff71e 	bne	r21,zero,846c <___vfprintf_internal_r+0x6c>
    8490:	01000944 	movi	r4,37
    8494:	1100d926 	beq	r2,r4,87fc <___vfprintf_internal_r+0x3fc>
    8498:	b8800117 	ldw	r2,4(r23)
    849c:	d9000f17 	ldw	r4,60(sp)
    84a0:	d8c00905 	stb	r3,36(sp)
    84a4:	b80b883a 	mov	r5,r23
    84a8:	d9800904 	addi	r6,sp,36
    84ac:	01c00044 	movi	r7,1
    84b0:	103ee83a 	callr	r2
    84b4:	1000a31e 	bne	r2,zero,8744 <___vfprintf_internal_r+0x344>
    84b8:	80c00003 	ldbu	r3,0(r16)
    84bc:	94800044 	addi	r18,r18,1
    84c0:	84000044 	addi	r16,r16,1
    84c4:	18803fcc 	andi	r2,r3,255
    84c8:	1080201c 	xori	r2,r2,128
    84cc:	10bfe004 	addi	r2,r2,-128
    84d0:	103fec1e 	bne	r2,zero,8484 <___vfprintf_internal_r+0x84>
    84d4:	9005883a 	mov	r2,r18
    84d8:	dfc01f17 	ldw	ra,124(sp)
    84dc:	df001e17 	ldw	fp,120(sp)
    84e0:	ddc01d17 	ldw	r23,116(sp)
    84e4:	dd801c17 	ldw	r22,112(sp)
    84e8:	dd401b17 	ldw	r21,108(sp)
    84ec:	dd001a17 	ldw	r20,104(sp)
    84f0:	dcc01917 	ldw	r19,100(sp)
    84f4:	dc801817 	ldw	r18,96(sp)
    84f8:	dc401717 	ldw	r17,92(sp)
    84fc:	dc001617 	ldw	r16,88(sp)
    8500:	dec02004 	addi	sp,sp,128
    8504:	f800283a 	ret
    8508:	01000084 	movi	r4,2
    850c:	a9001226 	beq	r21,r4,8558 <___vfprintf_internal_r+0x158>
    8510:	010000c4 	movi	r4,3
    8514:	a93fd51e 	bne	r21,r4,846c <___vfprintf_internal_r+0x6c>
    8518:	1c7ff404 	addi	r17,r3,-48
    851c:	8c403fcc 	andi	r17,r17,255
    8520:	01000244 	movi	r4,9
    8524:	24401b36 	bltu	r4,r17,8594 <___vfprintf_internal_r+0x194>
    8528:	d9000b17 	ldw	r4,44(sp)
    852c:	00bfffc4 	movi	r2,-1
    8530:	2080ea26 	beq	r4,r2,88dc <___vfprintf_internal_r+0x4dc>
    8534:	01400284 	movi	r5,10
    8538:	00083000 	call	8300 <__mulsi3>
    853c:	88a3883a 	add	r17,r17,r2
    8540:	dc400b15 	stw	r17,44(sp)
    8544:	003fc906 	br	846c <___vfprintf_internal_r+0x6c>
    8548:	01000c04 	movi	r4,48
    854c:	1100de26 	beq	r2,r4,88c8 <___vfprintf_internal_r+0x4c8>
    8550:	01000944 	movi	r4,37
    8554:	1100fd26 	beq	r2,r4,894c <___vfprintf_internal_r+0x54c>
    8558:	1c7ff404 	addi	r17,r3,-48
    855c:	8c403fcc 	andi	r17,r17,255
    8560:	01000244 	movi	r4,9
    8564:	24400936 	bltu	r4,r17,858c <___vfprintf_internal_r+0x18c>
    8568:	d9000c17 	ldw	r4,48(sp)
    856c:	00bfffc4 	movi	r2,-1
    8570:	2080d826 	beq	r4,r2,88d4 <___vfprintf_internal_r+0x4d4>
    8574:	01400284 	movi	r5,10
    8578:	00083000 	call	8300 <__mulsi3>
    857c:	88a3883a 	add	r17,r17,r2
    8580:	dc400c15 	stw	r17,48(sp)
    8584:	05400084 	movi	r21,2
    8588:	003fb806 	br	846c <___vfprintf_internal_r+0x6c>
    858c:	01000b84 	movi	r4,46
    8590:	1100a726 	beq	r2,r4,8830 <___vfprintf_internal_r+0x430>
    8594:	01401b04 	movi	r5,108
    8598:	1140a326 	beq	r2,r5,8828 <___vfprintf_internal_r+0x428>
    859c:	d9000b17 	ldw	r4,44(sp)
    85a0:	00bfffc4 	movi	r2,-1
    85a4:	2080e626 	beq	r4,r2,8940 <___vfprintf_internal_r+0x540>
    85a8:	d8001015 	stw	zero,64(sp)
    85ac:	18ffea04 	addi	r3,r3,-88
    85b0:	18c03fcc 	andi	r3,r3,255
    85b4:	00800804 	movi	r2,32
    85b8:	10c0022e 	bgeu	r2,r3,85c4 <___vfprintf_internal_r+0x1c4>
    85bc:	002b883a 	mov	r21,zero
    85c0:	003faa06 	br	846c <___vfprintf_internal_r+0x6c>
    85c4:	18c7883a 	add	r3,r3,r3
    85c8:	18c7883a 	add	r3,r3,r3
    85cc:	01400074 	movhi	r5,1
    85d0:	29617804 	addi	r5,r5,-31264
    85d4:	1947883a 	add	r3,r3,r5
    85d8:	18800017 	ldw	r2,0(r3)
    85dc:	1000683a 	jmp	r2
    85e0:	00008978 	rdprs	zero,zero,549
    85e4:	000085bc 	xorhi	zero,zero,534
    85e8:	000085bc 	xorhi	zero,zero,534
    85ec:	000085bc 	xorhi	zero,zero,534
    85f0:	000085bc 	xorhi	zero,zero,534
    85f4:	000085bc 	xorhi	zero,zero,534
    85f8:	000085bc 	xorhi	zero,zero,534
    85fc:	000085bc 	xorhi	zero,zero,534
    8600:	000085bc 	xorhi	zero,zero,534
    8604:	000085bc 	xorhi	zero,zero,534
    8608:	000085bc 	xorhi	zero,zero,534
    860c:	00008988 	cmpgei	zero,zero,550
    8610:	00008664 	muli	zero,zero,537
    8614:	000085bc 	xorhi	zero,zero,534
    8618:	000085bc 	xorhi	zero,zero,534
    861c:	000085bc 	xorhi	zero,zero,534
    8620:	000085bc 	xorhi	zero,zero,534
    8624:	00008664 	muli	zero,zero,537
    8628:	000085bc 	xorhi	zero,zero,534
    862c:	000085bc 	xorhi	zero,zero,534
    8630:	000085bc 	xorhi	zero,zero,534
    8634:	000085bc 	xorhi	zero,zero,534
    8638:	000085bc 	xorhi	zero,zero,534
    863c:	0000874c 	andi	zero,zero,541
    8640:	000085bc 	xorhi	zero,zero,534
    8644:	000085bc 	xorhi	zero,zero,534
    8648:	000085bc 	xorhi	zero,zero,534
    864c:	000089d4 	movui	zero,551
    8650:	000085bc 	xorhi	zero,zero,534
    8654:	00008750 	cmplti	zero,zero,541
    8658:	000085bc 	xorhi	zero,zero,534
    865c:	000085bc 	xorhi	zero,zero,534
    8660:	00008980 	call	898 <__alt_mem_memory-0x7768>
    8664:	d8c00d17 	ldw	r3,52(sp)
    8668:	18003926 	beq	r3,zero,8750 <___vfprintf_internal_r+0x350>
    866c:	d9000e17 	ldw	r4,56(sp)
    8670:	00c00044 	movi	r3,1
    8674:	25400017 	ldw	r21,0(r4)
    8678:	21000104 	addi	r4,r4,4
    867c:	d9000e15 	stw	r4,56(sp)
    8680:	d8c00d15 	stw	r3,52(sp)
    8684:	a8012116 	blt	r21,zero,8b0c <___vfprintf_internal_r+0x70c>
    8688:	d8001215 	stw	zero,72(sp)
    868c:	d823883a 	mov	r17,sp
    8690:	a800371e 	bne	r21,zero,8770 <___vfprintf_internal_r+0x370>
    8694:	d9400b17 	ldw	r5,44(sp)
    8698:	d809883a 	mov	r4,sp
    869c:	01400b0e 	bge	zero,r5,86cc <___vfprintf_internal_r+0x2cc>
    86a0:	d8800b17 	ldw	r2,44(sp)
    86a4:	d823883a 	mov	r17,sp
    86a8:	00c00c04 	movi	r3,48
    86ac:	00000206 	br	86b8 <___vfprintf_internal_r+0x2b8>
    86b0:	d9400a17 	ldw	r5,40(sp)
    86b4:	89400426 	beq	r17,r5,86c8 <___vfprintf_internal_r+0x2c8>
    86b8:	88c00005 	stb	r3,0(r17)
    86bc:	10bfffc4 	addi	r2,r2,-1
    86c0:	8c400044 	addi	r17,r17,1
    86c4:	103ffa1e 	bne	r2,zero,86b0 <___vfprintf_internal_r+0x2b0>
    86c8:	892bc83a 	sub	r21,r17,r4
    86cc:	d8c01217 	ldw	r3,72(sp)
    86d0:	d9000c17 	ldw	r4,48(sp)
    86d4:	a8c5883a 	add	r2,r21,r3
    86d8:	d8c01017 	ldw	r3,64(sp)
    86dc:	2085c83a 	sub	r2,r4,r2
    86e0:	d8801115 	stw	r2,68(sp)
    86e4:	18007f26 	beq	r3,zero,88e4 <___vfprintf_internal_r+0x4e4>
    86e8:	d8c01217 	ldw	r3,72(sp)
    86ec:	1800fa1e 	bne	r3,zero,8ad8 <___vfprintf_internal_r+0x6d8>
    86f0:	d8c01117 	ldw	r3,68(sp)
    86f4:	00c0620e 	bge	zero,r3,8880 <___vfprintf_internal_r+0x480>
    86f8:	00800c04 	movi	r2,48
    86fc:	d88008c5 	stb	r2,35(sp)
    8700:	b805883a 	mov	r2,r23
    8704:	dc001215 	stw	r16,72(sp)
    8708:	882f883a 	mov	r23,r17
    870c:	1f3fffc4 	addi	fp,r3,-1
    8710:	05bfffc4 	movi	r22,-1
    8714:	dc000f17 	ldw	r16,60(sp)
    8718:	1023883a 	mov	r17,r2
    871c:	00000206 	br	8728 <___vfprintf_internal_r+0x328>
    8720:	e73fffc4 	addi	fp,fp,-1
    8724:	e580fc26 	beq	fp,r22,8b18 <___vfprintf_internal_r+0x718>
    8728:	88800117 	ldw	r2,4(r17)
    872c:	8009883a 	mov	r4,r16
    8730:	880b883a 	mov	r5,r17
    8734:	d98008c4 	addi	r6,sp,35
    8738:	01c00044 	movi	r7,1
    873c:	103ee83a 	callr	r2
    8740:	103ff726 	beq	r2,zero,8720 <___vfprintf_internal_r+0x320>
    8744:	04bfffc4 	movi	r18,-1
    8748:	003f6206 	br	84d4 <___vfprintf_internal_r+0xd4>
    874c:	05000204 	movi	r20,8
    8750:	d9400e17 	ldw	r5,56(sp)
    8754:	2d400017 	ldw	r21,0(r5)
    8758:	29400104 	addi	r5,r5,4
    875c:	d9400e15 	stw	r5,56(sp)
    8760:	d8000d15 	stw	zero,52(sp)
    8764:	d8001215 	stw	zero,72(sp)
    8768:	d823883a 	mov	r17,sp
    876c:	a83fc926 	beq	r21,zero,8694 <___vfprintf_internal_r+0x294>
    8770:	05800244 	movi	r22,9
    8774:	dc001115 	stw	r16,68(sp)
    8778:	df001417 	ldw	fp,80(sp)
    877c:	00000506 	br	8794 <___vfprintf_internal_r+0x394>
    8780:	15400c04 	addi	r21,r2,48
    8784:	8d400005 	stb	r21,0(r17)
    8788:	802b883a 	mov	r21,r16
    878c:	8c400044 	addi	r17,r17,1
    8790:	80000f26 	beq	r16,zero,87d0 <___vfprintf_internal_r+0x3d0>
    8794:	a809883a 	mov	r4,r21
    8798:	a00b883a 	mov	r5,r20
    879c:	0008dc40 	call	8dc4 <__udivsi3>
    87a0:	a009883a 	mov	r4,r20
    87a4:	100b883a 	mov	r5,r2
    87a8:	1021883a 	mov	r16,r2
    87ac:	00083000 	call	8300 <__mulsi3>
    87b0:	a885c83a 	sub	r2,r21,r2
    87b4:	b0bff20e 	bge	r22,r2,8780 <___vfprintf_internal_r+0x380>
    87b8:	e0000e26 	beq	fp,zero,87f4 <___vfprintf_internal_r+0x3f4>
    87bc:	15400dc4 	addi	r21,r2,55
    87c0:	8d400005 	stb	r21,0(r17)
    87c4:	802b883a 	mov	r21,r16
    87c8:	8c400044 	addi	r17,r17,1
    87cc:	803ff11e 	bne	r16,zero,8794 <___vfprintf_internal_r+0x394>
    87d0:	d9000b17 	ldw	r4,44(sp)
    87d4:	8eebc83a 	sub	r21,r17,sp
    87d8:	dc001117 	ldw	r16,68(sp)
    87dc:	2545c83a 	sub	r2,r4,r21
    87e0:	d809883a 	mov	r4,sp
    87e4:	00bfb90e 	bge	zero,r2,86cc <___vfprintf_internal_r+0x2cc>
    87e8:	d8c00a17 	ldw	r3,40(sp)
    87ec:	88ffae36 	bltu	r17,r3,86a8 <___vfprintf_internal_r+0x2a8>
    87f0:	003fb606 	br	86cc <___vfprintf_internal_r+0x2cc>
    87f4:	154015c4 	addi	r21,r2,87
    87f8:	003fe206 	br	8784 <___vfprintf_internal_r+0x384>
    87fc:	00c00044 	movi	r3,1
    8800:	013fffc4 	movi	r4,-1
    8804:	d8c00d15 	stw	r3,52(sp)
    8808:	d9000b15 	stw	r4,44(sp)
    880c:	d8001415 	stw	zero,80(sp)
    8810:	05000284 	movi	r20,10
    8814:	d9000c15 	stw	r4,48(sp)
    8818:	d8001315 	stw	zero,76(sp)
    881c:	d8001015 	stw	zero,64(sp)
    8820:	182b883a 	mov	r21,r3
    8824:	003f1106 	br	846c <___vfprintf_internal_r+0x6c>
    8828:	00c00044 	movi	r3,1
    882c:	d8c01315 	stw	r3,76(sp)
    8830:	054000c4 	movi	r21,3
    8834:	003f0d06 	br	846c <___vfprintf_internal_r+0x6c>
    8838:	d8c01117 	ldw	r3,68(sp)
    883c:	dc001517 	ldw	r16,84(sp)
    8840:	8805883a 	mov	r2,r17
    8844:	90e5883a 	add	r18,r18,r3
    8848:	b823883a 	mov	r17,r23
    884c:	102f883a 	mov	r23,r2
    8850:	d8c01217 	ldw	r3,72(sp)
    8854:	18000a26 	beq	r3,zero,8880 <___vfprintf_internal_r+0x480>
    8858:	b8800117 	ldw	r2,4(r23)
    885c:	d9000f17 	ldw	r4,60(sp)
    8860:	00c00b44 	movi	r3,45
    8864:	d8c00905 	stb	r3,36(sp)
    8868:	b80b883a 	mov	r5,r23
    886c:	d9800904 	addi	r6,sp,36
    8870:	01c00044 	movi	r7,1
    8874:	103ee83a 	callr	r2
    8878:	103fb21e 	bne	r2,zero,8744 <___vfprintf_internal_r+0x344>
    887c:	94800044 	addi	r18,r18,1
    8880:	8d6dc83a 	sub	r22,r17,r21
    8884:	057f4d0e 	bge	zero,r21,85bc <___vfprintf_internal_r+0x1bc>
    8888:	dd400f17 	ldw	r21,60(sp)
    888c:	00000206 	br	8898 <___vfprintf_internal_r+0x498>
    8890:	94800044 	addi	r18,r18,1
    8894:	8dbf4926 	beq	r17,r22,85bc <___vfprintf_internal_r+0x1bc>
    8898:	8c7fffc4 	addi	r17,r17,-1
    889c:	88c00003 	ldbu	r3,0(r17)
    88a0:	b8800117 	ldw	r2,4(r23)
    88a4:	a809883a 	mov	r4,r21
    88a8:	d8c00905 	stb	r3,36(sp)
    88ac:	b80b883a 	mov	r5,r23
    88b0:	d9800904 	addi	r6,sp,36
    88b4:	01c00044 	movi	r7,1
    88b8:	103ee83a 	callr	r2
    88bc:	103ff426 	beq	r2,zero,8890 <___vfprintf_internal_r+0x490>
    88c0:	04bfffc4 	movi	r18,-1
    88c4:	003f0306 	br	84d4 <___vfprintf_internal_r+0xd4>
    88c8:	dd401015 	stw	r21,64(sp)
    88cc:	05400084 	movi	r21,2
    88d0:	003ee606 	br	846c <___vfprintf_internal_r+0x6c>
    88d4:	0005883a 	mov	r2,zero
    88d8:	003f2806 	br	857c <___vfprintf_internal_r+0x17c>
    88dc:	0005883a 	mov	r2,zero
    88e0:	003f1606 	br	853c <___vfprintf_internal_r+0x13c>
    88e4:	d8c01117 	ldw	r3,68(sp)
    88e8:	00ffd90e 	bge	zero,r3,8850 <___vfprintf_internal_r+0x450>
    88ec:	00800804 	movi	r2,32
    88f0:	d8800885 	stb	r2,34(sp)
    88f4:	b805883a 	mov	r2,r23
    88f8:	dc001515 	stw	r16,84(sp)
    88fc:	882f883a 	mov	r23,r17
    8900:	1f3fffc4 	addi	fp,r3,-1
    8904:	05bfffc4 	movi	r22,-1
    8908:	dc000f17 	ldw	r16,60(sp)
    890c:	1023883a 	mov	r17,r2
    8910:	00000206 	br	891c <___vfprintf_internal_r+0x51c>
    8914:	e73fffc4 	addi	fp,fp,-1
    8918:	e5bfc726 	beq	fp,r22,8838 <___vfprintf_internal_r+0x438>
    891c:	88800117 	ldw	r2,4(r17)
    8920:	8009883a 	mov	r4,r16
    8924:	880b883a 	mov	r5,r17
    8928:	d9800884 	addi	r6,sp,34
    892c:	01c00044 	movi	r7,1
    8930:	103ee83a 	callr	r2
    8934:	103ff726 	beq	r2,zero,8914 <___vfprintf_internal_r+0x514>
    8938:	04bfffc4 	movi	r18,-1
    893c:	003ee506 	br	84d4 <___vfprintf_internal_r+0xd4>
    8940:	01000044 	movi	r4,1
    8944:	d9000b15 	stw	r4,44(sp)
    8948:	003f1806 	br	85ac <___vfprintf_internal_r+0x1ac>
    894c:	b8c00117 	ldw	r3,4(r23)
    8950:	d9000f17 	ldw	r4,60(sp)
    8954:	d8800905 	stb	r2,36(sp)
    8958:	b80b883a 	mov	r5,r23
    895c:	d9800904 	addi	r6,sp,36
    8960:	a80f883a 	mov	r7,r21
    8964:	183ee83a 	callr	r3
    8968:	103f761e 	bne	r2,zero,8744 <___vfprintf_internal_r+0x344>
    896c:	94800044 	addi	r18,r18,1
    8970:	002b883a 	mov	r21,zero
    8974:	003ebd06 	br	846c <___vfprintf_internal_r+0x6c>
    8978:	00c00044 	movi	r3,1
    897c:	d8c01415 	stw	r3,80(sp)
    8980:	05000404 	movi	r20,16
    8984:	003f7206 	br	8750 <___vfprintf_internal_r+0x350>
    8988:	d9000c17 	ldw	r4,48(sp)
    898c:	9900420e 	bge	r19,r4,8a98 <___vfprintf_internal_r+0x698>
    8990:	df000f17 	ldw	fp,60(sp)
    8994:	25bfffc4 	addi	r22,r4,-1
    8998:	00800804 	movi	r2,32
    899c:	d8800845 	stb	r2,33(sp)
    89a0:	b023883a 	mov	r17,r22
    89a4:	057fffc4 	movi	r21,-1
    89a8:	8c7fffc4 	addi	r17,r17,-1
    89ac:	8d403926 	beq	r17,r21,8a94 <___vfprintf_internal_r+0x694>
    89b0:	b8800117 	ldw	r2,4(r23)
    89b4:	e009883a 	mov	r4,fp
    89b8:	b80b883a 	mov	r5,r23
    89bc:	d9800844 	addi	r6,sp,33
    89c0:	01c00044 	movi	r7,1
    89c4:	103ee83a 	callr	r2
    89c8:	103ff726 	beq	r2,zero,89a8 <___vfprintf_internal_r+0x5a8>
    89cc:	04bfffc4 	movi	r18,-1
    89d0:	003ec006 	br	84d4 <___vfprintf_internal_r+0xd4>
    89d4:	d9000e17 	ldw	r4,56(sp)
    89d8:	d8c00e17 	ldw	r3,56(sp)
    89dc:	21000017 	ldw	r4,0(r4)
    89e0:	18c00104 	addi	r3,r3,4
    89e4:	d8c00e15 	stw	r3,56(sp)
    89e8:	d9001215 	stw	r4,72(sp)
    89ec:	00083d80 	call	83d8 <strlen>
    89f0:	d9000c17 	ldw	r4,48(sp)
    89f4:	102d883a 	mov	r22,r2
    89f8:	20b9c83a 	sub	fp,r4,r2
    89fc:	07001b0e 	bge	zero,fp,8a6c <___vfprintf_internal_r+0x66c>
    8a00:	00800804 	movi	r2,32
    8a04:	d8800805 	stb	r2,32(sp)
    8a08:	b805883a 	mov	r2,r23
    8a0c:	dc001115 	stw	r16,68(sp)
    8a10:	b02f883a 	mov	r23,r22
    8a14:	e47fffc4 	addi	r17,fp,-1
    8a18:	902d883a 	mov	r22,r18
    8a1c:	057fffc4 	movi	r21,-1
    8a20:	dc000f17 	ldw	r16,60(sp)
    8a24:	1025883a 	mov	r18,r2
    8a28:	00000206 	br	8a34 <___vfprintf_internal_r+0x634>
    8a2c:	8c7fffc4 	addi	r17,r17,-1
    8a30:	8d400826 	beq	r17,r21,8a54 <___vfprintf_internal_r+0x654>
    8a34:	90800117 	ldw	r2,4(r18)
    8a38:	8009883a 	mov	r4,r16
    8a3c:	900b883a 	mov	r5,r18
    8a40:	d9800804 	addi	r6,sp,32
    8a44:	01c00044 	movi	r7,1
    8a48:	103ee83a 	callr	r2
    8a4c:	103ff726 	beq	r2,zero,8a2c <___vfprintf_internal_r+0x62c>
    8a50:	003f3c06 	br	8744 <___vfprintf_internal_r+0x344>
    8a54:	dc001117 	ldw	r16,68(sp)
    8a58:	9005883a 	mov	r2,r18
    8a5c:	b025883a 	mov	r18,r22
    8a60:	9725883a 	add	r18,r18,fp
    8a64:	b82d883a 	mov	r22,r23
    8a68:	102f883a 	mov	r23,r2
    8a6c:	b8800117 	ldw	r2,4(r23)
    8a70:	d9000f17 	ldw	r4,60(sp)
    8a74:	d9801217 	ldw	r6,72(sp)
    8a78:	b80b883a 	mov	r5,r23
    8a7c:	b00f883a 	mov	r7,r22
    8a80:	103ee83a 	callr	r2
    8a84:	103f2f1e 	bne	r2,zero,8744 <___vfprintf_internal_r+0x344>
    8a88:	95a5883a 	add	r18,r18,r22
    8a8c:	002b883a 	mov	r21,zero
    8a90:	003e7606 	br	846c <___vfprintf_internal_r+0x6c>
    8a94:	95a5883a 	add	r18,r18,r22
    8a98:	d9400e17 	ldw	r5,56(sp)
    8a9c:	b8800117 	ldw	r2,4(r23)
    8aa0:	d9000f17 	ldw	r4,60(sp)
    8aa4:	28c00017 	ldw	r3,0(r5)
    8aa8:	d9800904 	addi	r6,sp,36
    8aac:	b80b883a 	mov	r5,r23
    8ab0:	d8c00905 	stb	r3,36(sp)
    8ab4:	d8c00e17 	ldw	r3,56(sp)
    8ab8:	01c00044 	movi	r7,1
    8abc:	1c400104 	addi	r17,r3,4
    8ac0:	103ee83a 	callr	r2
    8ac4:	103f1f1e 	bne	r2,zero,8744 <___vfprintf_internal_r+0x344>
    8ac8:	94800044 	addi	r18,r18,1
    8acc:	dc400e15 	stw	r17,56(sp)
    8ad0:	002b883a 	mov	r21,zero
    8ad4:	003e6506 	br	846c <___vfprintf_internal_r+0x6c>
    8ad8:	b8800117 	ldw	r2,4(r23)
    8adc:	d9000f17 	ldw	r4,60(sp)
    8ae0:	00c00b44 	movi	r3,45
    8ae4:	d8c00905 	stb	r3,36(sp)
    8ae8:	b80b883a 	mov	r5,r23
    8aec:	d9800904 	addi	r6,sp,36
    8af0:	01c00044 	movi	r7,1
    8af4:	103ee83a 	callr	r2
    8af8:	103f121e 	bne	r2,zero,8744 <___vfprintf_internal_r+0x344>
    8afc:	d8c01117 	ldw	r3,68(sp)
    8b00:	94800044 	addi	r18,r18,1
    8b04:	00fefc16 	blt	zero,r3,86f8 <___vfprintf_internal_r+0x2f8>
    8b08:	003f5d06 	br	8880 <___vfprintf_internal_r+0x480>
    8b0c:	056bc83a 	sub	r21,zero,r21
    8b10:	d8c01215 	stw	r3,72(sp)
    8b14:	003f1406 	br	8768 <___vfprintf_internal_r+0x368>
    8b18:	d8c01117 	ldw	r3,68(sp)
    8b1c:	8805883a 	mov	r2,r17
    8b20:	dc001217 	ldw	r16,72(sp)
    8b24:	b823883a 	mov	r17,r23
    8b28:	90e5883a 	add	r18,r18,r3
    8b2c:	102f883a 	mov	r23,r2
    8b30:	003f5306 	br	8880 <___vfprintf_internal_r+0x480>

00008b34 <__vfprintf_internal>:
    8b34:	00800074 	movhi	r2,1
    8b38:	10a48204 	addi	r2,r2,-28152
    8b3c:	2007883a 	mov	r3,r4
    8b40:	11000017 	ldw	r4,0(r2)
    8b44:	2805883a 	mov	r2,r5
    8b48:	300f883a 	mov	r7,r6
    8b4c:	180b883a 	mov	r5,r3
    8b50:	100d883a 	mov	r6,r2
    8b54:	00084001 	jmpi	8400 <___vfprintf_internal_r>

00008b58 <__sfvwrite_small_dev>:
    8b58:	2880000b 	ldhu	r2,0(r5)
    8b5c:	defffa04 	addi	sp,sp,-24
    8b60:	dcc00315 	stw	r19,12(sp)
    8b64:	10c0020c 	andi	r3,r2,8
    8b68:	18ffffcc 	andi	r3,r3,65535
    8b6c:	18e0001c 	xori	r3,r3,32768
    8b70:	dc800215 	stw	r18,8(sp)
    8b74:	dc400115 	stw	r17,4(sp)
    8b78:	dfc00515 	stw	ra,20(sp)
    8b7c:	dd000415 	stw	r20,16(sp)
    8b80:	dc000015 	stw	r16,0(sp)
    8b84:	18e00004 	addi	r3,r3,-32768
    8b88:	2825883a 	mov	r18,r5
    8b8c:	2027883a 	mov	r19,r4
    8b90:	3023883a 	mov	r17,r6
    8b94:	18002626 	beq	r3,zero,8c30 <__sfvwrite_small_dev+0xd8>
    8b98:	2940008f 	ldh	r5,2(r5)
    8b9c:	28001016 	blt	r5,zero,8be0 <__sfvwrite_small_dev+0x88>
    8ba0:	01c01a0e 	bge	zero,r7,8c0c <__sfvwrite_small_dev+0xb4>
    8ba4:	3821883a 	mov	r16,r7
    8ba8:	05010004 	movi	r20,1024
    8bac:	00000306 	br	8bbc <__sfvwrite_small_dev+0x64>
    8bb0:	88a3883a 	add	r17,r17,r2
    8bb4:	0400150e 	bge	zero,r16,8c0c <__sfvwrite_small_dev+0xb4>
    8bb8:	9140008f 	ldh	r5,2(r18)
    8bbc:	880d883a 	mov	r6,r17
    8bc0:	9809883a 	mov	r4,r19
    8bc4:	800f883a 	mov	r7,r16
    8bc8:	a400010e 	bge	r20,r16,8bd0 <__sfvwrite_small_dev+0x78>
    8bcc:	01c10004 	movi	r7,1024
    8bd0:	0008c380 	call	8c38 <_write_r>
    8bd4:	80a1c83a 	sub	r16,r16,r2
    8bd8:	00bff516 	blt	zero,r2,8bb0 <__sfvwrite_small_dev+0x58>
    8bdc:	9080000b 	ldhu	r2,0(r18)
    8be0:	10801014 	ori	r2,r2,64
    8be4:	9080000d 	sth	r2,0(r18)
    8be8:	00bfffc4 	movi	r2,-1
    8bec:	dfc00517 	ldw	ra,20(sp)
    8bf0:	dd000417 	ldw	r20,16(sp)
    8bf4:	dcc00317 	ldw	r19,12(sp)
    8bf8:	dc800217 	ldw	r18,8(sp)
    8bfc:	dc400117 	ldw	r17,4(sp)
    8c00:	dc000017 	ldw	r16,0(sp)
    8c04:	dec00604 	addi	sp,sp,24
    8c08:	f800283a 	ret
    8c0c:	0005883a 	mov	r2,zero
    8c10:	dfc00517 	ldw	ra,20(sp)
    8c14:	dd000417 	ldw	r20,16(sp)
    8c18:	dcc00317 	ldw	r19,12(sp)
    8c1c:	dc800217 	ldw	r18,8(sp)
    8c20:	dc400117 	ldw	r17,4(sp)
    8c24:	dc000017 	ldw	r16,0(sp)
    8c28:	dec00604 	addi	sp,sp,24
    8c2c:	f800283a 	ret
    8c30:	00bfffc4 	movi	r2,-1
    8c34:	003fed06 	br	8bec <__sfvwrite_small_dev+0x94>

00008c38 <_write_r>:
    8c38:	defffd04 	addi	sp,sp,-12
    8c3c:	dc400115 	stw	r17,4(sp)
    8c40:	dc000015 	stw	r16,0(sp)
    8c44:	2023883a 	mov	r17,r4
    8c48:	04000074 	movhi	r16,1
    8c4c:	8424c204 	addi	r16,r16,-27896
    8c50:	2809883a 	mov	r4,r5
    8c54:	300b883a 	mov	r5,r6
    8c58:	380d883a 	mov	r6,r7
    8c5c:	dfc00215 	stw	ra,8(sp)
    8c60:	80000015 	stw	zero,0(r16)
    8c64:	0008f400 	call	8f40 <write>
    8c68:	00ffffc4 	movi	r3,-1
    8c6c:	10c00526 	beq	r2,r3,8c84 <_write_r+0x4c>
    8c70:	dfc00217 	ldw	ra,8(sp)
    8c74:	dc400117 	ldw	r17,4(sp)
    8c78:	dc000017 	ldw	r16,0(sp)
    8c7c:	dec00304 	addi	sp,sp,12
    8c80:	f800283a 	ret
    8c84:	80c00017 	ldw	r3,0(r16)
    8c88:	183ff926 	beq	r3,zero,8c70 <_write_r+0x38>
    8c8c:	88c00015 	stw	r3,0(r17)
    8c90:	dfc00217 	ldw	ra,8(sp)
    8c94:	dc400117 	ldw	r17,4(sp)
    8c98:	dc000017 	ldw	r16,0(sp)
    8c9c:	dec00304 	addi	sp,sp,12
    8ca0:	f800283a 	ret

00008ca4 <udivmodsi4>:
    8ca4:	2005883a 	mov	r2,r4
    8ca8:	2900182e 	bgeu	r5,r4,8d0c <udivmodsi4+0x68>
    8cac:	28001716 	blt	r5,zero,8d0c <udivmodsi4+0x68>
    8cb0:	01000804 	movi	r4,32
    8cb4:	00c00044 	movi	r3,1
    8cb8:	00000206 	br	8cc4 <udivmodsi4+0x20>
    8cbc:	20001126 	beq	r4,zero,8d04 <udivmodsi4+0x60>
    8cc0:	28000516 	blt	r5,zero,8cd8 <udivmodsi4+0x34>
    8cc4:	294b883a 	add	r5,r5,r5
    8cc8:	213fffc4 	addi	r4,r4,-1
    8ccc:	18c7883a 	add	r3,r3,r3
    8cd0:	28bffa36 	bltu	r5,r2,8cbc <udivmodsi4+0x18>
    8cd4:	18000b26 	beq	r3,zero,8d04 <udivmodsi4+0x60>
    8cd8:	0009883a 	mov	r4,zero
    8cdc:	11400236 	bltu	r2,r5,8ce8 <udivmodsi4+0x44>
    8ce0:	1145c83a 	sub	r2,r2,r5
    8ce4:	20c8b03a 	or	r4,r4,r3
    8ce8:	1806d07a 	srli	r3,r3,1
    8cec:	280ad07a 	srli	r5,r5,1
    8cf0:	183ffa1e 	bne	r3,zero,8cdc <udivmodsi4+0x38>
    8cf4:	3000021e 	bne	r6,zero,8d00 <udivmodsi4+0x5c>
    8cf8:	2005883a 	mov	r2,r4
    8cfc:	f800283a 	ret
    8d00:	f800283a 	ret
    8d04:	0009883a 	mov	r4,zero
    8d08:	003ffa06 	br	8cf4 <udivmodsi4+0x50>
    8d0c:	00c00044 	movi	r3,1
    8d10:	0009883a 	mov	r4,zero
    8d14:	003ff106 	br	8cdc <udivmodsi4+0x38>

00008d18 <__divsi3>:
    8d18:	defffe04 	addi	sp,sp,-8
    8d1c:	dfc00115 	stw	ra,4(sp)
    8d20:	dc000015 	stw	r16,0(sp)
    8d24:	20000a16 	blt	r4,zero,8d50 <__divsi3+0x38>
    8d28:	0021883a 	mov	r16,zero
    8d2c:	28000b16 	blt	r5,zero,8d5c <__divsi3+0x44>
    8d30:	000d883a 	mov	r6,zero
    8d34:	0008ca40 	call	8ca4 <udivmodsi4>
    8d38:	80000126 	beq	r16,zero,8d40 <__divsi3+0x28>
    8d3c:	0085c83a 	sub	r2,zero,r2
    8d40:	dfc00117 	ldw	ra,4(sp)
    8d44:	dc000017 	ldw	r16,0(sp)
    8d48:	dec00204 	addi	sp,sp,8
    8d4c:	f800283a 	ret
    8d50:	0109c83a 	sub	r4,zero,r4
    8d54:	04000044 	movi	r16,1
    8d58:	283ff50e 	bge	r5,zero,8d30 <__divsi3+0x18>
    8d5c:	014bc83a 	sub	r5,zero,r5
    8d60:	8400005c 	xori	r16,r16,1
    8d64:	003ff206 	br	8d30 <__divsi3+0x18>

00008d68 <__modsi3>:
    8d68:	deffff04 	addi	sp,sp,-4
    8d6c:	dfc00015 	stw	ra,0(sp)
    8d70:	20000516 	blt	r4,zero,8d88 <__modsi3+0x20>
    8d74:	28000c16 	blt	r5,zero,8da8 <__modsi3+0x40>
    8d78:	01800044 	movi	r6,1
    8d7c:	dfc00017 	ldw	ra,0(sp)
    8d80:	dec00104 	addi	sp,sp,4
    8d84:	0008ca41 	jmpi	8ca4 <udivmodsi4>
    8d88:	0109c83a 	sub	r4,zero,r4
    8d8c:	28000b16 	blt	r5,zero,8dbc <__modsi3+0x54>
    8d90:	01800044 	movi	r6,1
    8d94:	0008ca40 	call	8ca4 <udivmodsi4>
    8d98:	0085c83a 	sub	r2,zero,r2
    8d9c:	dfc00017 	ldw	ra,0(sp)
    8da0:	dec00104 	addi	sp,sp,4
    8da4:	f800283a 	ret
    8da8:	014bc83a 	sub	r5,zero,r5
    8dac:	01800044 	movi	r6,1
    8db0:	dfc00017 	ldw	ra,0(sp)
    8db4:	dec00104 	addi	sp,sp,4
    8db8:	0008ca41 	jmpi	8ca4 <udivmodsi4>
    8dbc:	014bc83a 	sub	r5,zero,r5
    8dc0:	003ff306 	br	8d90 <__modsi3+0x28>

00008dc4 <__udivsi3>:
    8dc4:	000d883a 	mov	r6,zero
    8dc8:	0008ca41 	jmpi	8ca4 <udivmodsi4>

00008dcc <__umodsi3>:
    8dcc:	01800044 	movi	r6,1
    8dd0:	0008ca41 	jmpi	8ca4 <udivmodsi4>

00008dd4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8dd4:	deffff04 	addi	sp,sp,-4
    8dd8:	dfc00015 	stw	ra,0(sp)
    8ddc:	00c00074 	movhi	r3,1
    8de0:	18e44804 	addi	r3,r3,-28384
    8de4:	01000074 	movhi	r4,1
    8de8:	21248504 	addi	r4,r4,-28140

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8dec:	1900061e 	bne	r3,r4,8e08 <alt_load+0x34>
    8df0:	00c00074 	movhi	r3,1
    8df4:	18e00804 	addi	r3,r3,-32736
    8df8:	01000074 	movhi	r4,1
    8dfc:	21200804 	addi	r4,r4,-32736
    8e00:	1900151e 	bne	r3,r4,8e58 <alt_load+0x84>
    8e04:	00000e06 	br	8e40 <alt_load+0x6c>
 * alt_load() is called when the code is executing from flash. In this case
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
    8e08:	01400074 	movhi	r5,1
    8e0c:	29648504 	addi	r5,r5,-28140
    8e10:	00bfff04 	movi	r2,-4
    8e14:	28cbc83a 	sub	r5,r5,r3
    8e18:	288a703a 	and	r5,r5,r2
    8e1c:	0005883a 	mov	r2,zero
    8e20:	00000506 	br	8e38 <alt_load+0x64>
    8e24:	208f883a 	add	r7,r4,r2
  {
    while( to != end )
    {
      *to++ = *from++;
    8e28:	39c00017 	ldw	r7,0(r7)
    8e2c:	188d883a 	add	r6,r3,r2
    8e30:	10800104 	addi	r2,r2,4
    8e34:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8e38:	117ffa1e 	bne	r2,r5,8e24 <alt_load+0x50>
    8e3c:	003fec06 	br	8df0 <alt_load+0x1c>
    8e40:	00c00074 	movhi	r3,1
    8e44:	18e42604 	addi	r3,r3,-28520
    8e48:	01000074 	movhi	r4,1
    8e4c:	21242604 	addi	r4,r4,-28520

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8e50:	1900131e 	bne	r3,r4,8ea0 <alt_load+0xcc>
    8e54:	00000e06 	br	8e90 <alt_load+0xbc>
    8e58:	01400074 	movhi	r5,1
    8e5c:	29600804 	addi	r5,r5,-32736
    8e60:	00bfff04 	movi	r2,-4
    8e64:	28cbc83a 	sub	r5,r5,r3
    8e68:	288a703a 	and	r5,r5,r2
    8e6c:	0005883a 	mov	r2,zero
    8e70:	00000506 	br	8e88 <alt_load+0xb4>
    8e74:	208f883a 	add	r7,r4,r2
  {
    while( to != end )
    {
      *to++ = *from++;
    8e78:	39c00017 	ldw	r7,0(r7)
    8e7c:	188d883a 	add	r6,r3,r2
    8e80:	10800104 	addi	r2,r2,4
    8e84:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8e88:	117ffa1e 	bne	r2,r5,8e74 <alt_load+0xa0>
    8e8c:	003fec06 	br	8e40 <alt_load+0x6c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8e90:	00090880 	call	9088 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    8e94:	dfc00017 	ldw	ra,0(sp)
    8e98:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    8e9c:	000908c1 	jmpi	908c <alt_icache_flush_all>
 * alt_load() is called when the code is executing from flash. In this case
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
    8ea0:	01400074 	movhi	r5,1
    8ea4:	29644804 	addi	r5,r5,-28384
    8ea8:	00bfff04 	movi	r2,-4
    8eac:	28cbc83a 	sub	r5,r5,r3
    8eb0:	288a703a 	and	r5,r5,r2
    8eb4:	0005883a 	mov	r2,zero
    8eb8:	00000506 	br	8ed0 <alt_load+0xfc>
    8ebc:	208f883a 	add	r7,r4,r2
    {
      *to++ = *from++;
    8ec0:	39c00017 	ldw	r7,0(r7)
    8ec4:	188d883a 	add	r6,r3,r2
    8ec8:	10800104 	addi	r2,r2,4
    8ecc:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8ed0:	117ffa1e 	bne	r2,r5,8ebc <alt_load+0xe8>
    8ed4:	003fee06 	br	8e90 <alt_load+0xbc>

00008ed8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8ed8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8edc:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8ee0:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8ee4:	0008fa80 	call	8fa8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8ee8:	0008fc80 	call	8fc8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8eec:	d1204517 	ldw	r4,-32492(gp)
    8ef0:	d1604417 	ldw	r5,-32496(gp)
    8ef4:	d1a04317 	ldw	r6,-32500(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8ef8:	dfc00017 	ldw	ra,0(sp)
    8efc:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8f00:	00082001 	jmpi	8200 <main>

00008f04 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    8f04:	defffe04 	addi	sp,sp,-8
    8f08:	dc000015 	stw	r16,0(sp)
    8f0c:	dfc00115 	stw	ra,4(sp)
    8f10:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8f14:	00083d80 	call	83d8 <strlen>
    8f18:	01000074 	movhi	r4,1
    8f1c:	21248304 	addi	r4,r4,-28148
    8f20:	800b883a 	mov	r5,r16
    8f24:	100d883a 	mov	r6,r2
    8f28:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
}
    8f2c:	dfc00117 	ldw	ra,4(sp)
    8f30:	dc000017 	ldw	r16,0(sp)
    8f34:	dec00204 	addi	sp,sp,8
int 
alt_putstr(const char* str)
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8f38:	0008fcc1 	jmpi	8fcc <altera_avalon_jtag_uart_write>

00008f3c <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    8f3c:	00090001 	jmpi	9000 <alt_busy_sleep>

00008f40 <write>:
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    8f40:	deffff04 	addi	sp,sp,-4
    8f44:	dfc00015 	stw	ra,0(sp)
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    8f48:	00800044 	movi	r2,1
    8f4c:	20800226 	beq	r4,r2,8f58 <write+0x18>
    8f50:	00800084 	movi	r2,2
    8f54:	2080061e 	bne	r4,r2,8f70 <write+0x30>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    8f58:	01000074 	movhi	r4,1
    8f5c:	21248304 	addi	r4,r4,-28148
    8f60:	000f883a 	mov	r7,zero
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
        return -1;
    }
}
    8f64:	dfc00017 	ldw	ra,0(sp)
    8f68:	dec00104 	addi	sp,sp,4
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    8f6c:	0008fcc1 	jmpi	8fcc <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    8f70:	00800074 	movhi	r2,1
    8f74:	10a48404 	addi	r2,r2,-28144
    8f78:	10800017 	ldw	r2,0(r2)
    8f7c:	10000226 	beq	r2,zero,8f88 <write+0x48>
    8f80:	103ee83a 	callr	r2
    8f84:	00000206 	br	8f90 <write+0x50>
    8f88:	00800074 	movhi	r2,1
    8f8c:	10a4c204 	addi	r2,r2,-27896
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    8f90:	00c01444 	movi	r3,81
    8f94:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    8f98:	00bfffc4 	movi	r2,-1
    8f9c:	dfc00017 	ldw	ra,0(sp)
    8fa0:	dec00104 	addi	sp,sp,4
    8fa4:	f800283a 	ret

00008fa8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8fa8:	deffff04 	addi	sp,sp,-4
    8fac:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS, Nios);
    8fb0:	00090900 	call	9090 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8fb4:	00800044 	movi	r2,1
    8fb8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8fbc:	dfc00017 	ldw	ra,0(sp)
    8fc0:	dec00104 	addi	sp,sp,4
    8fc4:	f800283a 	ret

00008fc8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8fc8:	f800283a 	ret

00008fcc <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    8fcc:	20c00017 	ldw	r3,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8fd0:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    8fd4:	2989883a 	add	r4,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8fd8:	19800104 	addi	r6,r3,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    8fdc:	00000606 	br	8ff8 <altera_avalon_jtag_uart_write+0x2c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8fe0:	31c00037 	ldwio	r7,0(r6)
    8fe4:	39ffffec 	andhi	r7,r7,65535
    8fe8:	383ffd26 	beq	r7,zero,8fe0 <altera_avalon_jtag_uart_write+0x14>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    8fec:	29c00007 	ldb	r7,0(r5)
    8ff0:	29400044 	addi	r5,r5,1
    8ff4:	19c00035 	stwio	r7,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    8ff8:	293ff936 	bltu	r5,r4,8fe0 <altera_avalon_jtag_uart_write+0x14>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    8ffc:	f800283a 	ret

00009000 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    9000:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    9004:	014666b4 	movhi	r5,6554
    9008:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    900c:	dc000015 	stw	r16,0(sp)
    9010:	dfc00115 	stw	ra,4(sp)
    9014:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    9018:	0008dc40 	call	8dc4 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    901c:	10001026 	beq	r2,zero,9060 <alt_busy_sleep+0x60>
    9020:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    9024:	01600034 	movhi	r5,32768
    9028:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    902c:	013999b4 	movhi	r4,58982
    9030:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    9034:	297fffc4 	addi	r5,r5,-1
    9038:	283ffe1e 	bne	r5,zero,9034 <alt_busy_sleep+0x34>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    903c:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    9040:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    9044:	18bffb16 	blt	r3,r2,9034 <alt_busy_sleep+0x34>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    9048:	8009883a 	mov	r4,r16
    904c:	01400144 	movi	r5,5
    9050:	00083000 	call	8300 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    9054:	10bfffc4 	addi	r2,r2,-1
    9058:	103ffe1e 	bne	r2,zero,9054 <alt_busy_sleep+0x54>
    905c:	00000506 	br	9074 <alt_busy_sleep+0x74>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    9060:	8009883a 	mov	r4,r16
    9064:	01400144 	movi	r5,5
    9068:	00083000 	call	8300 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    906c:	10bfffc4 	addi	r2,r2,-1
    9070:	00bffe16 	blt	zero,r2,906c <alt_busy_sleep+0x6c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    9074:	0005883a 	mov	r2,zero
    9078:	dfc00117 	ldw	ra,4(sp)
    907c:	dc000017 	ldw	r16,0(sp)
    9080:	dec00204 	addi	sp,sp,8
    9084:	f800283a 	ret

00009088 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    9088:	f800283a 	ret

0000908c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    908c:	f800283a 	ret

00009090 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    9090:	000170fa 	wrctl	ienable,zero
    9094:	f800283a 	ret
