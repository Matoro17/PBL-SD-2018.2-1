
LCD_pbl.elf:     file format elf32-littlenios2
LCD_pbl.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x0000253c memsz 0x0000253c flags r-x
    LOAD off    0x0000355c vaddr 0x0000a55c paddr 0x0000a830 align 2**12
         filesz 0x000002d4 memsz 0x000002d4 flags rw-
    LOAD off    0x00003b04 vaddr 0x0000ab04 paddr 0x0000ab04 align 2**12
         filesz 0x00000000 memsz 0x0000009c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00002498  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0000a4b8  0000a4b8  000034b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000002d4  0000a55c  0000a830  0000355c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000009c  0000ab04  0000ab04  00003b04  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  00003830  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000570  00000000  00000000  00003858  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000088f0  00000000  00000000  00003dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000029bc  00000000  00000000  0000c6b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000031a2  00000000  00000000  0000f074  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000008a8  00000000  00000000  00012218  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000178c  00000000  00000000  00012ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000020ba  00000000  00000000  0001424c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_alt_sim_info 00000040  00000000  00000000  00016308  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000001f0  00000000  00000000  00016348  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .thread_model 00000003  00000000  00000000  00017cf2  2**0
                  CONTENTS, READONLY
 16 .cpu          00000004  00000000  00000000  00017cf5  2**0
                  CONTENTS, READONLY
 17 .qsys         00000001  00000000  00000000  00017cf9  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  00017cfa  2**0
                  CONTENTS, READONLY
 19 .stderr_dev   00000004  00000000  00000000  00017cfb  2**0
                  CONTENTS, READONLY
 20 .stdin_dev    00000004  00000000  00000000  00017cff  2**0
                  CONTENTS, READONLY
 21 .stdout_dev   00000004  00000000  00000000  00017d03  2**0
                  CONTENTS, READONLY
 22 .sopc_system_name 00000004  00000000  00000000  00017d07  2**0
                  CONTENTS, READONLY
 23 .quartus_project_dir 00000039  00000000  00000000  00017d0b  2**0
                  CONTENTS, READONLY
 24 .sopcinfo     0003d5f4  00000000  00000000  00017d44  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .text	00000000 .text
0000a4b8 l    d  .rodata	00000000 .rodata
0000a55c l    d  .rwdata	00000000 .rwdata
0000ab04 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../LCD_pbl_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000a55c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00008d8c l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 alt_load.c
00008ebc l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00009094 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000091d4 l     F .text	00000038 alt_dev_reg
0000a63c l     O .rwdata	0000002c Jtag
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00009614 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000974c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00009778 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000993c l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00009a94 l     F .text	00000050 alt_get_errno
00009ae4 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00008fa8 g     F .text	00000078 alt_main
0000a830 g       *ABS*	00000000 __flash_rwdata_start
00008474 g     F .text	0000004c printf
00009020 g     F .text	00000044 alt_putstr
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000ab04 g     O .bss	00000004 errno
0000ab0c g     O .bss	00000004 alt_argv
00012810 g       *ABS*	00000000 _gp
00009064 g     F .text	00000030 usleep
0000a690 g     O .rwdata	00000180 alt_fd_list
00009dcc g     F .text	00000090 alt_find_dev
00008410 g     F .text	00000028 memcpy
00009a1c g     F .text	00000078 alt_io_redirect
0000a4b8 g       *ABS*	00000000 __DTOR_END__
00009334 g     F .text	000000f4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00008438 g     F .text	0000003c _printf_r
00008eac g     F .text	00000008 __udivsi3
0000a828 g     O .rwdata	00000004 alt_max_fd
0000a810 g     O .rwdata	00000004 _global_impure_ptr
0000aba0 g       *ABS*	00000000 __bss_end
0000a668 g     O .rwdata	00000028 alt_dev_null
00009730 g     F .text	0000001c alt_dcache_flush_all
0000a830 g       *ABS*	00000000 __ram_rwdata_end
0000a820 g     O .rwdata	00000008 alt_dev_list
000090e4 g     F .text	000000f0 write
0000a55c g       *ABS*	00000000 __ram_rodata_end
00008eb4 g     F .text	00000008 __umodsi3
0000aba0 g       *ABS*	00000000 end
000081c8 g     F .text	000000cc printalcd
0000a4b8 g       *ABS*	00000000 __CTOR_LIST__
0000d388 g       *ABS*	00000000 __alt_stack_pointer
00009428 g     F .text	00000098 altera_avalon_jtag_uart_write
000084e8 g     F .text	00000734 ___vfprintf_internal_r
0000a2a4 g     F .text	000001d8 __call_exitprocs
00008020 g     F .text	0000003c _start
00009240 g     F .text	00000034 alt_sys_init
0000a11c g     F .text	00000188 __register_exitproc
000083e8 g     F .text	00000028 __mulsi3
0000a55c g       *ABS*	00000000 __ram_rwdata_start
0000a4b8 g       *ABS*	00000000 __ram_rodata_start
00009274 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00009f70 g     F .text	000000d4 alt_get_fd
000094c0 g     F .text	00000154 alt_busy_sleep
0000a0d4 g     F .text	00000048 memcmp
0000aba0 g       *ABS*	00000000 __alt_stack_base
00009e5c g     F .text	00000114 alt_find_file
000097c8 g     F .text	000000a0 alt_dev_llist_insert
00008c40 g     F .text	000000e0 __sfvwrite_small_dev
0000ab04 g       *ABS*	00000000 __bss_start
000082e4 g     F .text	00000104 lcd_init
0000805c g     F .text	0000016c main
0000ab10 g     O .bss	00000004 alt_envp
000092d4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000ab14 g     O .bss	0000008c _atexit0
0000a82c g     O .rwdata	00000004 alt_errno
00008e00 g     F .text	00000050 __divsi3
0000a4b8 g       *ABS*	00000000 __CTOR_END__
0000a4b8 g       *ABS*	00000000 __flash_rodata_start
0000a4b8 g       *ABS*	00000000 __DTOR_LIST__
0000920c g     F .text	00000034 alt_irq_init
00009d2c g     F .text	00000080 alt_release_fd
0000a044 g     F .text	00000014 atexit
00008d20 g     F .text	0000006c _write_r
0000a814 g     O .rwdata	00000004 _impure_ptr
0000ab08 g     O .bss	00000004 alt_argc
000098c4 g     F .text	0000005c _do_dtors
0000a818 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000a830 g       *ABS*	00000000 _edata
00008294 g     F .text	00000050 espera
0000aba0 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00008000 g       *ABS*	00000000 __alt_mem_memory
00009dac g     F .text	00000020 altera_nios2_qsys_irq_init
0000a058 g     F .text	00000020 exit
00008e50 g     F .text	0000005c __modsi3
0000d388 g       *ABS*	00000000 __alt_data_end
0000a47c g     F .text	0000003c _exit
000084c0 g     F .text	00000028 strlen
00009bd4 g     F .text	00000158 open
00009920 g     F .text	0000001c alt_icache_flush_all
0000a078 g     F .text	0000005c fputs
00008c1c g     F .text	00000024 __vfprintf_internal
00009868 g     F .text	0000005c _do_ctors
00009664 g     F .text	000000cc close
00008f28 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def4e214 	ori	sp,sp,54152
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d68a0414 	ori	gp,gp,10256
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10aac114 	ori	r2,r2,43780

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18eae814 	ori	r3,r3,43936

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	0008f280 	call	8f28 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	0008fa80 	call	8fa8 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <alt_after_alt_main>

0000805c <main>:
#define LCD_RD_STATUS_REG 1
#define LCD_WR_DATA_REG 2
#define LCD_RD_DATA_REG 3

int main()
{
    805c:	deffe504 	addi	sp,sp,-108
    8060:	dfc01a15 	stw	ra,104(sp)
    8064:	df001915 	stw	fp,100(sp)
    8068:	df001904 	addi	fp,sp,100

	lcd_init();
    806c:	00082e40 	call	82e4 <lcd_init>
	char options[5][15] = {"1 opcao","2 opcao","3 opcao","4 opcao","5 opcao"};
    8070:	00800074 	movhi	r2,1
    8074:	10a93ac4 	addi	r2,r2,-23317
    8078:	e13fea04 	addi	r4,fp,-88
    807c:	1007883a 	mov	r3,r2
    8080:	008012c4 	movi	r2,75
    8084:	180b883a 	mov	r5,r3
    8088:	100d883a 	mov	r6,r2
    808c:	00084100 	call	8410 <memcpy>

	alt_putstr("Hello from Nios II!\n");
    8090:	01000074 	movhi	r4,1
    8094:	21292e04 	addi	r4,r4,-23368
    8098:	00090200 	call	9020 <alt_putstr>

	char palavra[] = "outra coisa";
    809c:	00801bc4 	movi	r2,111
    80a0:	e0bffcc5 	stb	r2,-13(fp)
    80a4:	00801d44 	movi	r2,117
    80a8:	e0bffd05 	stb	r2,-12(fp)
    80ac:	00801d04 	movi	r2,116
    80b0:	e0bffd45 	stb	r2,-11(fp)
    80b4:	00801c84 	movi	r2,114
    80b8:	e0bffd85 	stb	r2,-10(fp)
    80bc:	00801844 	movi	r2,97
    80c0:	e0bffdc5 	stb	r2,-9(fp)
    80c4:	00800804 	movi	r2,32
    80c8:	e0bffe05 	stb	r2,-8(fp)
    80cc:	008018c4 	movi	r2,99
    80d0:	e0bffe45 	stb	r2,-7(fp)
    80d4:	00801bc4 	movi	r2,111
    80d8:	e0bffe85 	stb	r2,-6(fp)
    80dc:	00801a44 	movi	r2,105
    80e0:	e0bffec5 	stb	r2,-5(fp)
    80e4:	00801cc4 	movi	r2,115
    80e8:	e0bfff05 	stb	r2,-4(fp)
    80ec:	00801844 	movi	r2,97
    80f0:	e0bfff45 	stb	r2,-3(fp)
    80f4:	e03fff85 	stb	zero,-2(fp)
	printalcd(palavra);
    80f8:	e0bffcc4 	addi	r2,fp,-13
    80fc:	1009883a 	mov	r4,r2
    8100:	00081c80 	call	81c8 <printalcd>
	unsigned int input1, input2, output;

	int pos =0;
    8104:	e03fe715 	stw	zero,-100(fp)
	printalcd(options,pos);
    8108:	e0bfea04 	addi	r2,fp,-88
    810c:	1009883a 	mov	r4,r2
    8110:	e17fe717 	ldw	r5,-100(fp)
    8114:	00081c80 	call	81c8 <printalcd>
    8118:	00000106 	br	8120 <main+0xc4>
			IOWR(LED_BASE,1,pos);
			IOWR(LED_BASE,0,pos);
		}


	}
    811c:	0001883a 	nop
	printalcd(options,pos);
	int button, button2;
	while (1){

		//input1 = IORD_ALTERA_AVALON_PIO_DATA(PUSHBUTON_BASE)&0x3;
		button = IORD_ALTERA_AVALON_PIO_DATA(PUSHBUTON_BASE) & 0x07;
    8120:	00800074 	movhi	r2,1
    8124:	10840804 	addi	r2,r2,4128
    8128:	10800037 	ldwio	r2,0(r2)
    812c:	108001cc 	andi	r2,r2,7
    8130:	e0bfe815 	stw	r2,-96(fp)

		printf("%i", button);
    8134:	01000074 	movhi	r4,1
    8138:	21293404 	addi	r4,r4,-23344
    813c:	e17fe817 	ldw	r5,-96(fp)
    8140:	00084740 	call	8474 <printf>
		espera(10);
    8144:	01000284 	movi	r4,10
    8148:	00082940 	call	8294 <espera>

		if(button == 0){
    814c:	e0bfe817 	ldw	r2,-96(fp)
    8150:	10000f1e 	bne	r2,zero,8190 <main+0x134>
			printf("APERTOU 1 ");
    8154:	01000074 	movhi	r4,1
    8158:	21293504 	addi	r4,r4,-23340
    815c:	00084740 	call	8474 <printf>
			if(pos < 4){
    8160:	e0bfe717 	ldw	r2,-100(fp)
    8164:	10800108 	cmpgei	r2,r2,4
    8168:	1000041e 	bne	r2,zero,817c <main+0x120>
				pos++;
    816c:	e0bfe717 	ldw	r2,-100(fp)
    8170:	10800044 	addi	r2,r2,1
    8174:	e0bfe715 	stw	r2,-100(fp)
    8178:	00000106 	br	8180 <main+0x124>
			}else{
				pos = 0;
    817c:	e03fe715 	stw	zero,-100(fp)
			}
			printalcd(options,pos);
    8180:	e0bfea04 	addi	r2,fp,-88
    8184:	1009883a 	mov	r4,r2
    8188:	e17fe717 	ldw	r5,-100(fp)
    818c:	00081c80 	call	81c8 <printalcd>
		}
		if(button2 == 0){
    8190:	e0bfe917 	ldw	r2,-92(fp)
    8194:	103fe11e 	bne	r2,zero,811c <main+0xc0>
			printf("APERTOU 2 ");
    8198:	01000074 	movhi	r4,1
    819c:	21293804 	addi	r4,r4,-23328
    81a0:	00084740 	call	8474 <printf>
			IOWR(LED_BASE,1,pos);
    81a4:	00800074 	movhi	r2,1
    81a8:	10840d04 	addi	r2,r2,4148
    81ac:	e0ffe717 	ldw	r3,-100(fp)
    81b0:	10c00035 	stwio	r3,0(r2)
			IOWR(LED_BASE,0,pos);
    81b4:	00800074 	movhi	r2,1
    81b8:	10840c04 	addi	r2,r2,4144
    81bc:	e0ffe717 	ldw	r3,-100(fp)
    81c0:	10c00035 	stwio	r3,0(r2)
		}


	}
    81c4:	003fd506 	br	811c <main+0xc0>

000081c8 <printalcd>:
}

/*
 * Metodo para escrever palavras no LCD
 */
void printalcd(char word[][15], int lugar){
    81c8:	defffa04 	addi	sp,sp,-24
    81cc:	dfc00515 	stw	ra,20(sp)
    81d0:	df000415 	stw	fp,16(sp)
    81d4:	dc000315 	stw	r16,12(sp)
    81d8:	df000304 	addi	fp,sp,12
    81dc:	e13ffe15 	stw	r4,-8(fp)
    81e0:	e17fff15 	stw	r5,-4(fp)
	int i;
	/* Set the Cursor to the home position */
	 IOWR(LCD_16207_0_BASE, LCD_WR_COMMAND_REG, 0x02);
    81e4:	00c00084 	movi	r3,2
    81e8:	00800074 	movhi	r2,1
    81ec:	10840404 	addi	r2,r2,4112
    81f0:	10c00035 	stwio	r3,0(r2)
	 usleep(2000);
    81f4:	0101f404 	movi	r4,2000
    81f8:	00090640 	call	9064 <usleep>

	 /* Display clear */
	 IOWR(LCD_16207_0_BASE, LCD_WR_COMMAND_REG, 0x01);
    81fc:	00c00044 	movi	r3,1
    8200:	00800074 	movhi	r2,1
    8204:	10840404 	addi	r2,r2,4112
    8208:	10c00035 	stwio	r3,0(r2)
	 usleep(2000);
    820c:	0101f404 	movi	r4,2000
    8210:	00090640 	call	9064 <usleep>

	//printf("%i",strlen(word));
	for(i=0;i<strlen(word);i++){
    8214:	e03ffd15 	stw	zero,-12(fp)
    8218:	00001406 	br	826c <printalcd+0xa4>
		IOWR(LCD_16207_0_BASE, 2, word[lugar][i]);
    821c:	e0bfff17 	ldw	r2,-4(fp)
    8220:	1009883a 	mov	r4,r2
    8224:	014003c4 	movi	r5,15
    8228:	00083e80 	call	83e8 <__mulsi3>
    822c:	e0fffe17 	ldw	r3,-8(fp)
    8230:	1887883a 	add	r3,r3,r2
    8234:	e0bffd17 	ldw	r2,-12(fp)
    8238:	1885883a 	add	r2,r3,r2
    823c:	10800003 	ldbu	r2,0(r2)
    8240:	10c03fcc 	andi	r3,r2,255
    8244:	18c0201c 	xori	r3,r3,128
    8248:	18ffe004 	addi	r3,r3,-128
    824c:	00800074 	movhi	r2,1
    8250:	10840604 	addi	r2,r2,4120
    8254:	10c00035 	stwio	r3,0(r2)
		usleep(100);
    8258:	01001904 	movi	r4,100
    825c:	00090640 	call	9064 <usleep>
	 /* Display clear */
	 IOWR(LCD_16207_0_BASE, LCD_WR_COMMAND_REG, 0x01);
	 usleep(2000);

	//printf("%i",strlen(word));
	for(i=0;i<strlen(word);i++){
    8260:	e0bffd17 	ldw	r2,-12(fp)
    8264:	10800044 	addi	r2,r2,1
    8268:	e0bffd15 	stw	r2,-12(fp)
    826c:	e43ffd17 	ldw	r16,-12(fp)
    8270:	e13ffe17 	ldw	r4,-8(fp)
    8274:	00084c00 	call	84c0 <strlen>
    8278:	80bfe836 	bltu	r16,r2,821c <printalcd+0x54>
		IOWR(LCD_16207_0_BASE, 2, word[lugar][i]);
		usleep(100);
	}
}
    827c:	e037883a 	mov	sp,fp
    8280:	dfc00217 	ldw	ra,8(sp)
    8284:	df000117 	ldw	fp,4(sp)
    8288:	dc000017 	ldw	r16,0(sp)
    828c:	dec00304 	addi	sp,sp,12
    8290:	f800283a 	ret

00008294 <espera>:

void espera(int a){
    8294:	defffc04 	addi	sp,sp,-16
    8298:	dfc00315 	stw	ra,12(sp)
    829c:	df000215 	stw	fp,8(sp)
    82a0:	df000204 	addi	fp,sp,8
    82a4:	e13fff15 	stw	r4,-4(fp)
	volatile int i = 0;
    82a8:	e03ffe15 	stw	zero,-8(fp)
	while(i<a*50000){
    82ac:	00000306 	br	82bc <espera+0x28>
		i++;
    82b0:	e0bffe17 	ldw	r2,-8(fp)
    82b4:	10800044 	addi	r2,r2,1
    82b8:	e0bffe15 	stw	r2,-8(fp)
	}
}

void espera(int a){
	volatile int i = 0;
	while(i<a*50000){
    82bc:	e13fff17 	ldw	r4,-4(fp)
    82c0:	0170d414 	movui	r5,50000
    82c4:	00083e80 	call	83e8 <__mulsi3>
    82c8:	e0fffe17 	ldw	r3,-8(fp)
    82cc:	18bff816 	blt	r3,r2,82b0 <espera+0x1c>
		i++;
	}
}
    82d0:	e037883a 	mov	sp,fp
    82d4:	dfc00117 	ldw	ra,4(sp)
    82d8:	df000017 	ldw	fp,0(sp)
    82dc:	dec00204 	addi	sp,sp,8
    82e0:	f800283a 	ret

000082e4 <lcd_init>:


void lcd_init( void) {
    82e4:	defffe04 	addi	sp,sp,-8
    82e8:	dfc00115 	stw	ra,4(sp)
    82ec:	df000015 	stw	fp,0(sp)
    82f0:	d839883a 	mov	fp,sp

 usleep(15000); /* Wait for more than 15 ms before init */
    82f4:	010ea604 	movi	r4,15000
    82f8:	00090640 	call	9064 <usleep>
 /* Set function code four times -- 8-bit, 2 line, 5x7 mode */
 IOWR(LCD_16207_0_BASE, LCD_WR_COMMAND_REG, 0x38);
    82fc:	00c00e04 	movi	r3,56
    8300:	00800074 	movhi	r2,1
    8304:	10840404 	addi	r2,r2,4112
    8308:	10c00035 	stwio	r3,0(r2)
 usleep(4100); /* Wait for more than 4.1 ms */
    830c:	01040104 	movi	r4,4100
    8310:	00090640 	call	9064 <usleep>
 IOWR(LCD_16207_0_BASE, LCD_WR_COMMAND_REG, 0x38);
    8314:	00c00e04 	movi	r3,56
    8318:	00800074 	movhi	r2,1
    831c:	10840404 	addi	r2,r2,4112
    8320:	10c00035 	stwio	r3,0(r2)
 usleep(100); /* Wait for more than 100 us */
    8324:	01001904 	movi	r4,100
    8328:	00090640 	call	9064 <usleep>
 IOWR(LCD_16207_0_BASE, LCD_WR_COMMAND_REG, 0x38);
    832c:	00c00e04 	movi	r3,56
    8330:	00800074 	movhi	r2,1
    8334:	10840404 	addi	r2,r2,4112
    8338:	10c00035 	stwio	r3,0(r2)
 usleep(5000); /* Wait for more than 100 us */
    833c:	0104e204 	movi	r4,5000
    8340:	00090640 	call	9064 <usleep>
 IOWR(LCD_16207_0_BASE, LCD_WR_COMMAND_REG, 0x38);
    8344:	00c00e04 	movi	r3,56
    8348:	00800074 	movhi	r2,1
    834c:	10840404 	addi	r2,r2,4112
    8350:	10c00035 	stwio	r3,0(r2)
 usleep(100); /* Wait for more than 100 us */
    8354:	01001904 	movi	r4,100
    8358:	00090640 	call	9064 <usleep>

 /* Set Display to OFF*/
 IOWR(LCD_16207_0_BASE, LCD_WR_COMMAND_REG, 0x08);
    835c:	00c00204 	movi	r3,8
    8360:	00800074 	movhi	r2,1
    8364:	10840404 	addi	r2,r2,4112
    8368:	10c00035 	stwio	r3,0(r2)
 usleep(100);
    836c:	01001904 	movi	r4,100
    8370:	00090640 	call	9064 <usleep>

 /* Set Display to ON */
 IOWR(LCD_16207_0_BASE, LCD_WR_COMMAND_REG, 0x0C);
    8374:	00c00304 	movi	r3,12
    8378:	00800074 	movhi	r2,1
    837c:	10840404 	addi	r2,r2,4112
    8380:	10c00035 	stwio	r3,0(r2)
 usleep(100);
    8384:	01001904 	movi	r4,100
    8388:	00090640 	call	9064 <usleep>

 /* Set Entry Mode -- Cursor increment, display doesn't shift */
 IOWR(LCD_16207_0_BASE, LCD_WR_COMMAND_REG, 0x06);
    838c:	00c00184 	movi	r3,6
    8390:	00800074 	movhi	r2,1
    8394:	10840404 	addi	r2,r2,4112
    8398:	10c00035 	stwio	r3,0(r2)
 usleep(100);
    839c:	01001904 	movi	r4,100
    83a0:	00090640 	call	9064 <usleep>

 /* Set the Cursor to the home position */
 IOWR(LCD_16207_0_BASE, LCD_WR_COMMAND_REG, 0x02);
    83a4:	00c00084 	movi	r3,2
    83a8:	00800074 	movhi	r2,1
    83ac:	10840404 	addi	r2,r2,4112
    83b0:	10c00035 	stwio	r3,0(r2)
 usleep(2000);
    83b4:	0101f404 	movi	r4,2000
    83b8:	00090640 	call	9064 <usleep>

 /* Display clear */
 IOWR(LCD_16207_0_BASE, LCD_WR_COMMAND_REG, 0x01);
    83bc:	00c00044 	movi	r3,1
    83c0:	00800074 	movhi	r2,1
    83c4:	10840404 	addi	r2,r2,4112
    83c8:	10c00035 	stwio	r3,0(r2)
 usleep(2000);
    83cc:	0101f404 	movi	r4,2000
    83d0:	00090640 	call	9064 <usleep>
}
    83d4:	e037883a 	mov	sp,fp
    83d8:	dfc00117 	ldw	ra,4(sp)
    83dc:	df000017 	ldw	fp,0(sp)
    83e0:	dec00204 	addi	sp,sp,8
    83e4:	f800283a 	ret

000083e8 <__mulsi3>:
    83e8:	0005883a 	mov	r2,zero
    83ec:	20000726 	beq	r4,zero,840c <__mulsi3+0x24>
    83f0:	20c0004c 	andi	r3,r4,1
    83f4:	2008d07a 	srli	r4,r4,1
    83f8:	18000126 	beq	r3,zero,8400 <__mulsi3+0x18>
    83fc:	1145883a 	add	r2,r2,r5
    8400:	294b883a 	add	r5,r5,r5
    8404:	203ffa1e 	bne	r4,zero,83f0 <__mulsi3+0x8>
    8408:	f800283a 	ret
    840c:	f800283a 	ret

00008410 <memcpy>:
    8410:	2005883a 	mov	r2,r4
    8414:	30000726 	beq	r6,zero,8434 <memcpy+0x24>
    8418:	218d883a 	add	r6,r4,r6
    841c:	2007883a 	mov	r3,r4
    8420:	29c00003 	ldbu	r7,0(r5)
    8424:	18c00044 	addi	r3,r3,1
    8428:	29400044 	addi	r5,r5,1
    842c:	19ffffc5 	stb	r7,-1(r3)
    8430:	19bffb1e 	bne	r3,r6,8420 <memcpy+0x10>
    8434:	f800283a 	ret

00008438 <_printf_r>:
    8438:	defffd04 	addi	sp,sp,-12
    843c:	dfc00015 	stw	ra,0(sp)
    8440:	d9800115 	stw	r6,4(sp)
    8444:	d9c00215 	stw	r7,8(sp)
    8448:	20800217 	ldw	r2,8(r4)
    844c:	00c00074 	movhi	r3,1
    8450:	18e31004 	addi	r3,r3,-29632
    8454:	280d883a 	mov	r6,r5
    8458:	10c00115 	stw	r3,4(r2)
    845c:	100b883a 	mov	r5,r2
    8460:	d9c00104 	addi	r7,sp,4
    8464:	00084e80 	call	84e8 <___vfprintf_internal_r>
    8468:	dfc00017 	ldw	ra,0(sp)
    846c:	dec00304 	addi	sp,sp,12
    8470:	f800283a 	ret

00008474 <printf>:
    8474:	defffc04 	addi	sp,sp,-16
    8478:	dfc00015 	stw	ra,0(sp)
    847c:	d9400115 	stw	r5,4(sp)
    8480:	d9800215 	stw	r6,8(sp)
    8484:	d9c00315 	stw	r7,12(sp)
    8488:	00800074 	movhi	r2,1
    848c:	10aa0504 	addi	r2,r2,-22508
    8490:	10800017 	ldw	r2,0(r2)
    8494:	00c00074 	movhi	r3,1
    8498:	18e31004 	addi	r3,r3,-29632
    849c:	200b883a 	mov	r5,r4
    84a0:	10800217 	ldw	r2,8(r2)
    84a4:	d9800104 	addi	r6,sp,4
    84a8:	10c00115 	stw	r3,4(r2)
    84ac:	1009883a 	mov	r4,r2
    84b0:	0008c1c0 	call	8c1c <__vfprintf_internal>
    84b4:	dfc00017 	ldw	ra,0(sp)
    84b8:	dec00404 	addi	sp,sp,16
    84bc:	f800283a 	ret

000084c0 <strlen>:
    84c0:	20800007 	ldb	r2,0(r4)
    84c4:	10000626 	beq	r2,zero,84e0 <strlen+0x20>
    84c8:	2005883a 	mov	r2,r4
    84cc:	10800044 	addi	r2,r2,1
    84d0:	10c00007 	ldb	r3,0(r2)
    84d4:	183ffd1e 	bne	r3,zero,84cc <strlen+0xc>
    84d8:	1105c83a 	sub	r2,r2,r4
    84dc:	f800283a 	ret
    84e0:	0005883a 	mov	r2,zero
    84e4:	f800283a 	ret

000084e8 <___vfprintf_internal_r>:
    84e8:	deffe004 	addi	sp,sp,-128
    84ec:	d8c00804 	addi	r3,sp,32
    84f0:	ddc01d15 	stw	r23,116(sp)
    84f4:	dd401b15 	stw	r21,108(sp)
    84f8:	dd001a15 	stw	r20,104(sp)
    84fc:	dcc01915 	stw	r19,100(sp)
    8500:	dc801815 	stw	r18,96(sp)
    8504:	dc001615 	stw	r16,88(sp)
    8508:	dfc01f15 	stw	ra,124(sp)
    850c:	df001e15 	stw	fp,120(sp)
    8510:	dd801c15 	stw	r22,112(sp)
    8514:	dc401715 	stw	r17,92(sp)
    8518:	d9000f15 	stw	r4,60(sp)
    851c:	d9c00e15 	stw	r7,56(sp)
    8520:	3021883a 	mov	r16,r6
    8524:	0025883a 	mov	r18,zero
    8528:	d8001415 	stw	zero,80(sp)
    852c:	d8000d15 	stw	zero,52(sp)
    8530:	0029883a 	mov	r20,zero
    8534:	d8000b15 	stw	zero,44(sp)
    8538:	d8000c15 	stw	zero,48(sp)
    853c:	d8001315 	stw	zero,76(sp)
    8540:	d8001015 	stw	zero,64(sp)
    8544:	002b883a 	mov	r21,zero
    8548:	04c00044 	movi	r19,1
    854c:	d8c00a15 	stw	r3,40(sp)
    8550:	282f883a 	mov	r23,r5
    8554:	80c00003 	ldbu	r3,0(r16)
    8558:	84000044 	addi	r16,r16,1
    855c:	18803fcc 	andi	r2,r3,255
    8560:	1080201c 	xori	r2,r2,128
    8564:	10bfe004 	addi	r2,r2,-128
    8568:	10001426 	beq	r2,zero,85bc <___vfprintf_internal_r+0xd4>
    856c:	acc03026 	beq	r21,r19,8630 <___vfprintf_internal_r+0x148>
    8570:	9d401f16 	blt	r19,r21,85f0 <___vfprintf_internal_r+0x108>
    8574:	a83ff71e 	bne	r21,zero,8554 <___vfprintf_internal_r+0x6c>
    8578:	01000944 	movi	r4,37
    857c:	1100d926 	beq	r2,r4,88e4 <___vfprintf_internal_r+0x3fc>
    8580:	b8800117 	ldw	r2,4(r23)
    8584:	d9000f17 	ldw	r4,60(sp)
    8588:	d8c00905 	stb	r3,36(sp)
    858c:	b80b883a 	mov	r5,r23
    8590:	d9800904 	addi	r6,sp,36
    8594:	01c00044 	movi	r7,1
    8598:	103ee83a 	callr	r2
    859c:	1000a31e 	bne	r2,zero,882c <___vfprintf_internal_r+0x344>
    85a0:	80c00003 	ldbu	r3,0(r16)
    85a4:	94800044 	addi	r18,r18,1
    85a8:	84000044 	addi	r16,r16,1
    85ac:	18803fcc 	andi	r2,r3,255
    85b0:	1080201c 	xori	r2,r2,128
    85b4:	10bfe004 	addi	r2,r2,-128
    85b8:	103fec1e 	bne	r2,zero,856c <___vfprintf_internal_r+0x84>
    85bc:	9005883a 	mov	r2,r18
    85c0:	dfc01f17 	ldw	ra,124(sp)
    85c4:	df001e17 	ldw	fp,120(sp)
    85c8:	ddc01d17 	ldw	r23,116(sp)
    85cc:	dd801c17 	ldw	r22,112(sp)
    85d0:	dd401b17 	ldw	r21,108(sp)
    85d4:	dd001a17 	ldw	r20,104(sp)
    85d8:	dcc01917 	ldw	r19,100(sp)
    85dc:	dc801817 	ldw	r18,96(sp)
    85e0:	dc401717 	ldw	r17,92(sp)
    85e4:	dc001617 	ldw	r16,88(sp)
    85e8:	dec02004 	addi	sp,sp,128
    85ec:	f800283a 	ret
    85f0:	01000084 	movi	r4,2
    85f4:	a9001226 	beq	r21,r4,8640 <___vfprintf_internal_r+0x158>
    85f8:	010000c4 	movi	r4,3
    85fc:	a93fd51e 	bne	r21,r4,8554 <___vfprintf_internal_r+0x6c>
    8600:	1c7ff404 	addi	r17,r3,-48
    8604:	8c403fcc 	andi	r17,r17,255
    8608:	01000244 	movi	r4,9
    860c:	24401b36 	bltu	r4,r17,867c <___vfprintf_internal_r+0x194>
    8610:	d9000b17 	ldw	r4,44(sp)
    8614:	00bfffc4 	movi	r2,-1
    8618:	2080ea26 	beq	r4,r2,89c4 <___vfprintf_internal_r+0x4dc>
    861c:	01400284 	movi	r5,10
    8620:	00083e80 	call	83e8 <__mulsi3>
    8624:	88a3883a 	add	r17,r17,r2
    8628:	dc400b15 	stw	r17,44(sp)
    862c:	003fc906 	br	8554 <___vfprintf_internal_r+0x6c>
    8630:	01000c04 	movi	r4,48
    8634:	1100de26 	beq	r2,r4,89b0 <___vfprintf_internal_r+0x4c8>
    8638:	01000944 	movi	r4,37
    863c:	1100fd26 	beq	r2,r4,8a34 <___vfprintf_internal_r+0x54c>
    8640:	1c7ff404 	addi	r17,r3,-48
    8644:	8c403fcc 	andi	r17,r17,255
    8648:	01000244 	movi	r4,9
    864c:	24400936 	bltu	r4,r17,8674 <___vfprintf_internal_r+0x18c>
    8650:	d9000c17 	ldw	r4,48(sp)
    8654:	00bfffc4 	movi	r2,-1
    8658:	2080d826 	beq	r4,r2,89bc <___vfprintf_internal_r+0x4d4>
    865c:	01400284 	movi	r5,10
    8660:	00083e80 	call	83e8 <__mulsi3>
    8664:	88a3883a 	add	r17,r17,r2
    8668:	dc400c15 	stw	r17,48(sp)
    866c:	05400084 	movi	r21,2
    8670:	003fb806 	br	8554 <___vfprintf_internal_r+0x6c>
    8674:	01000b84 	movi	r4,46
    8678:	1100a726 	beq	r2,r4,8918 <___vfprintf_internal_r+0x430>
    867c:	01401b04 	movi	r5,108
    8680:	1140a326 	beq	r2,r5,8910 <___vfprintf_internal_r+0x428>
    8684:	d9000b17 	ldw	r4,44(sp)
    8688:	00bfffc4 	movi	r2,-1
    868c:	2080e626 	beq	r4,r2,8a28 <___vfprintf_internal_r+0x540>
    8690:	d8001015 	stw	zero,64(sp)
    8694:	18ffea04 	addi	r3,r3,-88
    8698:	18c03fcc 	andi	r3,r3,255
    869c:	00800804 	movi	r2,32
    86a0:	10c0022e 	bgeu	r2,r3,86ac <___vfprintf_internal_r+0x1c4>
    86a4:	002b883a 	mov	r21,zero
    86a8:	003faa06 	br	8554 <___vfprintf_internal_r+0x6c>
    86ac:	18c7883a 	add	r3,r3,r3
    86b0:	18c7883a 	add	r3,r3,r3
    86b4:	01400074 	movhi	r5,1
    86b8:	2961b204 	addi	r5,r5,-31032
    86bc:	1947883a 	add	r3,r3,r5
    86c0:	18800017 	ldw	r2,0(r3)
    86c4:	1000683a 	jmp	r2
    86c8:	00008a60 	cmpeqi	zero,zero,553
    86cc:	000086a4 	muli	zero,zero,538
    86d0:	000086a4 	muli	zero,zero,538
    86d4:	000086a4 	muli	zero,zero,538
    86d8:	000086a4 	muli	zero,zero,538
    86dc:	000086a4 	muli	zero,zero,538
    86e0:	000086a4 	muli	zero,zero,538
    86e4:	000086a4 	muli	zero,zero,538
    86e8:	000086a4 	muli	zero,zero,538
    86ec:	000086a4 	muli	zero,zero,538
    86f0:	000086a4 	muli	zero,zero,538
    86f4:	00008a70 	cmpltui	zero,zero,553
    86f8:	0000874c 	andi	zero,zero,541
    86fc:	000086a4 	muli	zero,zero,538
    8700:	000086a4 	muli	zero,zero,538
    8704:	000086a4 	muli	zero,zero,538
    8708:	000086a4 	muli	zero,zero,538
    870c:	0000874c 	andi	zero,zero,541
    8710:	000086a4 	muli	zero,zero,538
    8714:	000086a4 	muli	zero,zero,538
    8718:	000086a4 	muli	zero,zero,538
    871c:	000086a4 	muli	zero,zero,538
    8720:	000086a4 	muli	zero,zero,538
    8724:	00008834 	movhi	zero,544
    8728:	000086a4 	muli	zero,zero,538
    872c:	000086a4 	muli	zero,zero,538
    8730:	000086a4 	muli	zero,zero,538
    8734:	00008abc 	xorhi	zero,zero,554
    8738:	000086a4 	muli	zero,zero,538
    873c:	00008838 	rdprs	zero,zero,544
    8740:	000086a4 	muli	zero,zero,538
    8744:	000086a4 	muli	zero,zero,538
    8748:	00008a68 	cmpgeui	zero,zero,553
    874c:	d8c00d17 	ldw	r3,52(sp)
    8750:	18003926 	beq	r3,zero,8838 <___vfprintf_internal_r+0x350>
    8754:	d9000e17 	ldw	r4,56(sp)
    8758:	00c00044 	movi	r3,1
    875c:	25400017 	ldw	r21,0(r4)
    8760:	21000104 	addi	r4,r4,4
    8764:	d9000e15 	stw	r4,56(sp)
    8768:	d8c00d15 	stw	r3,52(sp)
    876c:	a8012116 	blt	r21,zero,8bf4 <___vfprintf_internal_r+0x70c>
    8770:	d8001215 	stw	zero,72(sp)
    8774:	d823883a 	mov	r17,sp
    8778:	a800371e 	bne	r21,zero,8858 <___vfprintf_internal_r+0x370>
    877c:	d9400b17 	ldw	r5,44(sp)
    8780:	d809883a 	mov	r4,sp
    8784:	01400b0e 	bge	zero,r5,87b4 <___vfprintf_internal_r+0x2cc>
    8788:	d8800b17 	ldw	r2,44(sp)
    878c:	d823883a 	mov	r17,sp
    8790:	00c00c04 	movi	r3,48
    8794:	00000206 	br	87a0 <___vfprintf_internal_r+0x2b8>
    8798:	d9400a17 	ldw	r5,40(sp)
    879c:	89400426 	beq	r17,r5,87b0 <___vfprintf_internal_r+0x2c8>
    87a0:	88c00005 	stb	r3,0(r17)
    87a4:	10bfffc4 	addi	r2,r2,-1
    87a8:	8c400044 	addi	r17,r17,1
    87ac:	103ffa1e 	bne	r2,zero,8798 <___vfprintf_internal_r+0x2b0>
    87b0:	892bc83a 	sub	r21,r17,r4
    87b4:	d8c01217 	ldw	r3,72(sp)
    87b8:	d9000c17 	ldw	r4,48(sp)
    87bc:	a8c5883a 	add	r2,r21,r3
    87c0:	d8c01017 	ldw	r3,64(sp)
    87c4:	2085c83a 	sub	r2,r4,r2
    87c8:	d8801115 	stw	r2,68(sp)
    87cc:	18007f26 	beq	r3,zero,89cc <___vfprintf_internal_r+0x4e4>
    87d0:	d8c01217 	ldw	r3,72(sp)
    87d4:	1800fa1e 	bne	r3,zero,8bc0 <___vfprintf_internal_r+0x6d8>
    87d8:	d8c01117 	ldw	r3,68(sp)
    87dc:	00c0620e 	bge	zero,r3,8968 <___vfprintf_internal_r+0x480>
    87e0:	00800c04 	movi	r2,48
    87e4:	d88008c5 	stb	r2,35(sp)
    87e8:	b805883a 	mov	r2,r23
    87ec:	dc001215 	stw	r16,72(sp)
    87f0:	882f883a 	mov	r23,r17
    87f4:	1f3fffc4 	addi	fp,r3,-1
    87f8:	05bfffc4 	movi	r22,-1
    87fc:	dc000f17 	ldw	r16,60(sp)
    8800:	1023883a 	mov	r17,r2
    8804:	00000206 	br	8810 <___vfprintf_internal_r+0x328>
    8808:	e73fffc4 	addi	fp,fp,-1
    880c:	e580fc26 	beq	fp,r22,8c00 <___vfprintf_internal_r+0x718>
    8810:	88800117 	ldw	r2,4(r17)
    8814:	8009883a 	mov	r4,r16
    8818:	880b883a 	mov	r5,r17
    881c:	d98008c4 	addi	r6,sp,35
    8820:	01c00044 	movi	r7,1
    8824:	103ee83a 	callr	r2
    8828:	103ff726 	beq	r2,zero,8808 <___vfprintf_internal_r+0x320>
    882c:	04bfffc4 	movi	r18,-1
    8830:	003f6206 	br	85bc <___vfprintf_internal_r+0xd4>
    8834:	05000204 	movi	r20,8
    8838:	d9400e17 	ldw	r5,56(sp)
    883c:	2d400017 	ldw	r21,0(r5)
    8840:	29400104 	addi	r5,r5,4
    8844:	d9400e15 	stw	r5,56(sp)
    8848:	d8000d15 	stw	zero,52(sp)
    884c:	d8001215 	stw	zero,72(sp)
    8850:	d823883a 	mov	r17,sp
    8854:	a83fc926 	beq	r21,zero,877c <___vfprintf_internal_r+0x294>
    8858:	05800244 	movi	r22,9
    885c:	dc001115 	stw	r16,68(sp)
    8860:	df001417 	ldw	fp,80(sp)
    8864:	00000506 	br	887c <___vfprintf_internal_r+0x394>
    8868:	15400c04 	addi	r21,r2,48
    886c:	8d400005 	stb	r21,0(r17)
    8870:	802b883a 	mov	r21,r16
    8874:	8c400044 	addi	r17,r17,1
    8878:	80000f26 	beq	r16,zero,88b8 <___vfprintf_internal_r+0x3d0>
    887c:	a809883a 	mov	r4,r21
    8880:	a00b883a 	mov	r5,r20
    8884:	0008eac0 	call	8eac <__udivsi3>
    8888:	a009883a 	mov	r4,r20
    888c:	100b883a 	mov	r5,r2
    8890:	1021883a 	mov	r16,r2
    8894:	00083e80 	call	83e8 <__mulsi3>
    8898:	a885c83a 	sub	r2,r21,r2
    889c:	b0bff20e 	bge	r22,r2,8868 <___vfprintf_internal_r+0x380>
    88a0:	e0000e26 	beq	fp,zero,88dc <___vfprintf_internal_r+0x3f4>
    88a4:	15400dc4 	addi	r21,r2,55
    88a8:	8d400005 	stb	r21,0(r17)
    88ac:	802b883a 	mov	r21,r16
    88b0:	8c400044 	addi	r17,r17,1
    88b4:	803ff11e 	bne	r16,zero,887c <___vfprintf_internal_r+0x394>
    88b8:	d9000b17 	ldw	r4,44(sp)
    88bc:	8eebc83a 	sub	r21,r17,sp
    88c0:	dc001117 	ldw	r16,68(sp)
    88c4:	2545c83a 	sub	r2,r4,r21
    88c8:	d809883a 	mov	r4,sp
    88cc:	00bfb90e 	bge	zero,r2,87b4 <___vfprintf_internal_r+0x2cc>
    88d0:	d8c00a17 	ldw	r3,40(sp)
    88d4:	88ffae36 	bltu	r17,r3,8790 <___vfprintf_internal_r+0x2a8>
    88d8:	003fb606 	br	87b4 <___vfprintf_internal_r+0x2cc>
    88dc:	154015c4 	addi	r21,r2,87
    88e0:	003fe206 	br	886c <___vfprintf_internal_r+0x384>
    88e4:	00c00044 	movi	r3,1
    88e8:	013fffc4 	movi	r4,-1
    88ec:	d8c00d15 	stw	r3,52(sp)
    88f0:	d9000b15 	stw	r4,44(sp)
    88f4:	d8001415 	stw	zero,80(sp)
    88f8:	05000284 	movi	r20,10
    88fc:	d9000c15 	stw	r4,48(sp)
    8900:	d8001315 	stw	zero,76(sp)
    8904:	d8001015 	stw	zero,64(sp)
    8908:	182b883a 	mov	r21,r3
    890c:	003f1106 	br	8554 <___vfprintf_internal_r+0x6c>
    8910:	00c00044 	movi	r3,1
    8914:	d8c01315 	stw	r3,76(sp)
    8918:	054000c4 	movi	r21,3
    891c:	003f0d06 	br	8554 <___vfprintf_internal_r+0x6c>
    8920:	d8c01117 	ldw	r3,68(sp)
    8924:	dc001517 	ldw	r16,84(sp)
    8928:	8805883a 	mov	r2,r17
    892c:	90e5883a 	add	r18,r18,r3
    8930:	b823883a 	mov	r17,r23
    8934:	102f883a 	mov	r23,r2
    8938:	d8c01217 	ldw	r3,72(sp)
    893c:	18000a26 	beq	r3,zero,8968 <___vfprintf_internal_r+0x480>
    8940:	b8800117 	ldw	r2,4(r23)
    8944:	d9000f17 	ldw	r4,60(sp)
    8948:	00c00b44 	movi	r3,45
    894c:	d8c00905 	stb	r3,36(sp)
    8950:	b80b883a 	mov	r5,r23
    8954:	d9800904 	addi	r6,sp,36
    8958:	01c00044 	movi	r7,1
    895c:	103ee83a 	callr	r2
    8960:	103fb21e 	bne	r2,zero,882c <___vfprintf_internal_r+0x344>
    8964:	94800044 	addi	r18,r18,1
    8968:	8d6dc83a 	sub	r22,r17,r21
    896c:	057f4d0e 	bge	zero,r21,86a4 <___vfprintf_internal_r+0x1bc>
    8970:	dd400f17 	ldw	r21,60(sp)
    8974:	00000206 	br	8980 <___vfprintf_internal_r+0x498>
    8978:	94800044 	addi	r18,r18,1
    897c:	8dbf4926 	beq	r17,r22,86a4 <___vfprintf_internal_r+0x1bc>
    8980:	8c7fffc4 	addi	r17,r17,-1
    8984:	88c00003 	ldbu	r3,0(r17)
    8988:	b8800117 	ldw	r2,4(r23)
    898c:	a809883a 	mov	r4,r21
    8990:	d8c00905 	stb	r3,36(sp)
    8994:	b80b883a 	mov	r5,r23
    8998:	d9800904 	addi	r6,sp,36
    899c:	01c00044 	movi	r7,1
    89a0:	103ee83a 	callr	r2
    89a4:	103ff426 	beq	r2,zero,8978 <___vfprintf_internal_r+0x490>
    89a8:	04bfffc4 	movi	r18,-1
    89ac:	003f0306 	br	85bc <___vfprintf_internal_r+0xd4>
    89b0:	dd401015 	stw	r21,64(sp)
    89b4:	05400084 	movi	r21,2
    89b8:	003ee606 	br	8554 <___vfprintf_internal_r+0x6c>
    89bc:	0005883a 	mov	r2,zero
    89c0:	003f2806 	br	8664 <___vfprintf_internal_r+0x17c>
    89c4:	0005883a 	mov	r2,zero
    89c8:	003f1606 	br	8624 <___vfprintf_internal_r+0x13c>
    89cc:	d8c01117 	ldw	r3,68(sp)
    89d0:	00ffd90e 	bge	zero,r3,8938 <___vfprintf_internal_r+0x450>
    89d4:	00800804 	movi	r2,32
    89d8:	d8800885 	stb	r2,34(sp)
    89dc:	b805883a 	mov	r2,r23
    89e0:	dc001515 	stw	r16,84(sp)
    89e4:	882f883a 	mov	r23,r17
    89e8:	1f3fffc4 	addi	fp,r3,-1
    89ec:	05bfffc4 	movi	r22,-1
    89f0:	dc000f17 	ldw	r16,60(sp)
    89f4:	1023883a 	mov	r17,r2
    89f8:	00000206 	br	8a04 <___vfprintf_internal_r+0x51c>
    89fc:	e73fffc4 	addi	fp,fp,-1
    8a00:	e5bfc726 	beq	fp,r22,8920 <___vfprintf_internal_r+0x438>
    8a04:	88800117 	ldw	r2,4(r17)
    8a08:	8009883a 	mov	r4,r16
    8a0c:	880b883a 	mov	r5,r17
    8a10:	d9800884 	addi	r6,sp,34
    8a14:	01c00044 	movi	r7,1
    8a18:	103ee83a 	callr	r2
    8a1c:	103ff726 	beq	r2,zero,89fc <___vfprintf_internal_r+0x514>
    8a20:	04bfffc4 	movi	r18,-1
    8a24:	003ee506 	br	85bc <___vfprintf_internal_r+0xd4>
    8a28:	01000044 	movi	r4,1
    8a2c:	d9000b15 	stw	r4,44(sp)
    8a30:	003f1806 	br	8694 <___vfprintf_internal_r+0x1ac>
    8a34:	b8c00117 	ldw	r3,4(r23)
    8a38:	d9000f17 	ldw	r4,60(sp)
    8a3c:	d8800905 	stb	r2,36(sp)
    8a40:	b80b883a 	mov	r5,r23
    8a44:	d9800904 	addi	r6,sp,36
    8a48:	a80f883a 	mov	r7,r21
    8a4c:	183ee83a 	callr	r3
    8a50:	103f761e 	bne	r2,zero,882c <___vfprintf_internal_r+0x344>
    8a54:	94800044 	addi	r18,r18,1
    8a58:	002b883a 	mov	r21,zero
    8a5c:	003ebd06 	br	8554 <___vfprintf_internal_r+0x6c>
    8a60:	00c00044 	movi	r3,1
    8a64:	d8c01415 	stw	r3,80(sp)
    8a68:	05000404 	movi	r20,16
    8a6c:	003f7206 	br	8838 <___vfprintf_internal_r+0x350>
    8a70:	d9000c17 	ldw	r4,48(sp)
    8a74:	9900420e 	bge	r19,r4,8b80 <___vfprintf_internal_r+0x698>
    8a78:	df000f17 	ldw	fp,60(sp)
    8a7c:	25bfffc4 	addi	r22,r4,-1
    8a80:	00800804 	movi	r2,32
    8a84:	d8800845 	stb	r2,33(sp)
    8a88:	b023883a 	mov	r17,r22
    8a8c:	057fffc4 	movi	r21,-1
    8a90:	8c7fffc4 	addi	r17,r17,-1
    8a94:	8d403926 	beq	r17,r21,8b7c <___vfprintf_internal_r+0x694>
    8a98:	b8800117 	ldw	r2,4(r23)
    8a9c:	e009883a 	mov	r4,fp
    8aa0:	b80b883a 	mov	r5,r23
    8aa4:	d9800844 	addi	r6,sp,33
    8aa8:	01c00044 	movi	r7,1
    8aac:	103ee83a 	callr	r2
    8ab0:	103ff726 	beq	r2,zero,8a90 <___vfprintf_internal_r+0x5a8>
    8ab4:	04bfffc4 	movi	r18,-1
    8ab8:	003ec006 	br	85bc <___vfprintf_internal_r+0xd4>
    8abc:	d9000e17 	ldw	r4,56(sp)
    8ac0:	d8c00e17 	ldw	r3,56(sp)
    8ac4:	21000017 	ldw	r4,0(r4)
    8ac8:	18c00104 	addi	r3,r3,4
    8acc:	d8c00e15 	stw	r3,56(sp)
    8ad0:	d9001215 	stw	r4,72(sp)
    8ad4:	00084c00 	call	84c0 <strlen>
    8ad8:	d9000c17 	ldw	r4,48(sp)
    8adc:	102d883a 	mov	r22,r2
    8ae0:	20b9c83a 	sub	fp,r4,r2
    8ae4:	07001b0e 	bge	zero,fp,8b54 <___vfprintf_internal_r+0x66c>
    8ae8:	00800804 	movi	r2,32
    8aec:	d8800805 	stb	r2,32(sp)
    8af0:	b805883a 	mov	r2,r23
    8af4:	dc001115 	stw	r16,68(sp)
    8af8:	b02f883a 	mov	r23,r22
    8afc:	e47fffc4 	addi	r17,fp,-1
    8b00:	902d883a 	mov	r22,r18
    8b04:	057fffc4 	movi	r21,-1
    8b08:	dc000f17 	ldw	r16,60(sp)
    8b0c:	1025883a 	mov	r18,r2
    8b10:	00000206 	br	8b1c <___vfprintf_internal_r+0x634>
    8b14:	8c7fffc4 	addi	r17,r17,-1
    8b18:	8d400826 	beq	r17,r21,8b3c <___vfprintf_internal_r+0x654>
    8b1c:	90800117 	ldw	r2,4(r18)
    8b20:	8009883a 	mov	r4,r16
    8b24:	900b883a 	mov	r5,r18
    8b28:	d9800804 	addi	r6,sp,32
    8b2c:	01c00044 	movi	r7,1
    8b30:	103ee83a 	callr	r2
    8b34:	103ff726 	beq	r2,zero,8b14 <___vfprintf_internal_r+0x62c>
    8b38:	003f3c06 	br	882c <___vfprintf_internal_r+0x344>
    8b3c:	dc001117 	ldw	r16,68(sp)
    8b40:	9005883a 	mov	r2,r18
    8b44:	b025883a 	mov	r18,r22
    8b48:	9725883a 	add	r18,r18,fp
    8b4c:	b82d883a 	mov	r22,r23
    8b50:	102f883a 	mov	r23,r2
    8b54:	b8800117 	ldw	r2,4(r23)
    8b58:	d9000f17 	ldw	r4,60(sp)
    8b5c:	d9801217 	ldw	r6,72(sp)
    8b60:	b80b883a 	mov	r5,r23
    8b64:	b00f883a 	mov	r7,r22
    8b68:	103ee83a 	callr	r2
    8b6c:	103f2f1e 	bne	r2,zero,882c <___vfprintf_internal_r+0x344>
    8b70:	95a5883a 	add	r18,r18,r22
    8b74:	002b883a 	mov	r21,zero
    8b78:	003e7606 	br	8554 <___vfprintf_internal_r+0x6c>
    8b7c:	95a5883a 	add	r18,r18,r22
    8b80:	d9400e17 	ldw	r5,56(sp)
    8b84:	b8800117 	ldw	r2,4(r23)
    8b88:	d9000f17 	ldw	r4,60(sp)
    8b8c:	28c00017 	ldw	r3,0(r5)
    8b90:	d9800904 	addi	r6,sp,36
    8b94:	b80b883a 	mov	r5,r23
    8b98:	d8c00905 	stb	r3,36(sp)
    8b9c:	d8c00e17 	ldw	r3,56(sp)
    8ba0:	01c00044 	movi	r7,1
    8ba4:	1c400104 	addi	r17,r3,4
    8ba8:	103ee83a 	callr	r2
    8bac:	103f1f1e 	bne	r2,zero,882c <___vfprintf_internal_r+0x344>
    8bb0:	94800044 	addi	r18,r18,1
    8bb4:	dc400e15 	stw	r17,56(sp)
    8bb8:	002b883a 	mov	r21,zero
    8bbc:	003e6506 	br	8554 <___vfprintf_internal_r+0x6c>
    8bc0:	b8800117 	ldw	r2,4(r23)
    8bc4:	d9000f17 	ldw	r4,60(sp)
    8bc8:	00c00b44 	movi	r3,45
    8bcc:	d8c00905 	stb	r3,36(sp)
    8bd0:	b80b883a 	mov	r5,r23
    8bd4:	d9800904 	addi	r6,sp,36
    8bd8:	01c00044 	movi	r7,1
    8bdc:	103ee83a 	callr	r2
    8be0:	103f121e 	bne	r2,zero,882c <___vfprintf_internal_r+0x344>
    8be4:	d8c01117 	ldw	r3,68(sp)
    8be8:	94800044 	addi	r18,r18,1
    8bec:	00fefc16 	blt	zero,r3,87e0 <___vfprintf_internal_r+0x2f8>
    8bf0:	003f5d06 	br	8968 <___vfprintf_internal_r+0x480>
    8bf4:	056bc83a 	sub	r21,zero,r21
    8bf8:	d8c01215 	stw	r3,72(sp)
    8bfc:	003f1406 	br	8850 <___vfprintf_internal_r+0x368>
    8c00:	d8c01117 	ldw	r3,68(sp)
    8c04:	8805883a 	mov	r2,r17
    8c08:	dc001217 	ldw	r16,72(sp)
    8c0c:	b823883a 	mov	r17,r23
    8c10:	90e5883a 	add	r18,r18,r3
    8c14:	102f883a 	mov	r23,r2
    8c18:	003f5306 	br	8968 <___vfprintf_internal_r+0x480>

00008c1c <__vfprintf_internal>:
    8c1c:	00800074 	movhi	r2,1
    8c20:	10aa0504 	addi	r2,r2,-22508
    8c24:	2007883a 	mov	r3,r4
    8c28:	11000017 	ldw	r4,0(r2)
    8c2c:	2805883a 	mov	r2,r5
    8c30:	300f883a 	mov	r7,r6
    8c34:	180b883a 	mov	r5,r3
    8c38:	100d883a 	mov	r6,r2
    8c3c:	00084e81 	jmpi	84e8 <___vfprintf_internal_r>

00008c40 <__sfvwrite_small_dev>:
    8c40:	2880000b 	ldhu	r2,0(r5)
    8c44:	defffa04 	addi	sp,sp,-24
    8c48:	dcc00315 	stw	r19,12(sp)
    8c4c:	10c0020c 	andi	r3,r2,8
    8c50:	18ffffcc 	andi	r3,r3,65535
    8c54:	18e0001c 	xori	r3,r3,32768
    8c58:	dc800215 	stw	r18,8(sp)
    8c5c:	dc400115 	stw	r17,4(sp)
    8c60:	dfc00515 	stw	ra,20(sp)
    8c64:	dd000415 	stw	r20,16(sp)
    8c68:	dc000015 	stw	r16,0(sp)
    8c6c:	18e00004 	addi	r3,r3,-32768
    8c70:	2825883a 	mov	r18,r5
    8c74:	2027883a 	mov	r19,r4
    8c78:	3023883a 	mov	r17,r6
    8c7c:	18002626 	beq	r3,zero,8d18 <__sfvwrite_small_dev+0xd8>
    8c80:	2940008f 	ldh	r5,2(r5)
    8c84:	28001016 	blt	r5,zero,8cc8 <__sfvwrite_small_dev+0x88>
    8c88:	01c01a0e 	bge	zero,r7,8cf4 <__sfvwrite_small_dev+0xb4>
    8c8c:	3821883a 	mov	r16,r7
    8c90:	05010004 	movi	r20,1024
    8c94:	00000306 	br	8ca4 <__sfvwrite_small_dev+0x64>
    8c98:	88a3883a 	add	r17,r17,r2
    8c9c:	0400150e 	bge	zero,r16,8cf4 <__sfvwrite_small_dev+0xb4>
    8ca0:	9140008f 	ldh	r5,2(r18)
    8ca4:	880d883a 	mov	r6,r17
    8ca8:	9809883a 	mov	r4,r19
    8cac:	800f883a 	mov	r7,r16
    8cb0:	a400010e 	bge	r20,r16,8cb8 <__sfvwrite_small_dev+0x78>
    8cb4:	01c10004 	movi	r7,1024
    8cb8:	0008d200 	call	8d20 <_write_r>
    8cbc:	80a1c83a 	sub	r16,r16,r2
    8cc0:	00bff516 	blt	zero,r2,8c98 <__sfvwrite_small_dev+0x58>
    8cc4:	9080000b 	ldhu	r2,0(r18)
    8cc8:	10801014 	ori	r2,r2,64
    8ccc:	9080000d 	sth	r2,0(r18)
    8cd0:	00bfffc4 	movi	r2,-1
    8cd4:	dfc00517 	ldw	ra,20(sp)
    8cd8:	dd000417 	ldw	r20,16(sp)
    8cdc:	dcc00317 	ldw	r19,12(sp)
    8ce0:	dc800217 	ldw	r18,8(sp)
    8ce4:	dc400117 	ldw	r17,4(sp)
    8ce8:	dc000017 	ldw	r16,0(sp)
    8cec:	dec00604 	addi	sp,sp,24
    8cf0:	f800283a 	ret
    8cf4:	0005883a 	mov	r2,zero
    8cf8:	dfc00517 	ldw	ra,20(sp)
    8cfc:	dd000417 	ldw	r20,16(sp)
    8d00:	dcc00317 	ldw	r19,12(sp)
    8d04:	dc800217 	ldw	r18,8(sp)
    8d08:	dc400117 	ldw	r17,4(sp)
    8d0c:	dc000017 	ldw	r16,0(sp)
    8d10:	dec00604 	addi	sp,sp,24
    8d14:	f800283a 	ret
    8d18:	00bfffc4 	movi	r2,-1
    8d1c:	003fed06 	br	8cd4 <__sfvwrite_small_dev+0x94>

00008d20 <_write_r>:
    8d20:	defffd04 	addi	sp,sp,-12
    8d24:	dc400115 	stw	r17,4(sp)
    8d28:	dc000015 	stw	r16,0(sp)
    8d2c:	2023883a 	mov	r17,r4
    8d30:	04000074 	movhi	r16,1
    8d34:	842ac104 	addi	r16,r16,-21756
    8d38:	2809883a 	mov	r4,r5
    8d3c:	300b883a 	mov	r5,r6
    8d40:	380d883a 	mov	r6,r7
    8d44:	dfc00215 	stw	ra,8(sp)
    8d48:	80000015 	stw	zero,0(r16)
    8d4c:	00090e40 	call	90e4 <write>
    8d50:	00ffffc4 	movi	r3,-1
    8d54:	10c00526 	beq	r2,r3,8d6c <_write_r+0x4c>
    8d58:	dfc00217 	ldw	ra,8(sp)
    8d5c:	dc400117 	ldw	r17,4(sp)
    8d60:	dc000017 	ldw	r16,0(sp)
    8d64:	dec00304 	addi	sp,sp,12
    8d68:	f800283a 	ret
    8d6c:	80c00017 	ldw	r3,0(r16)
    8d70:	183ff926 	beq	r3,zero,8d58 <_write_r+0x38>
    8d74:	88c00015 	stw	r3,0(r17)
    8d78:	dfc00217 	ldw	ra,8(sp)
    8d7c:	dc400117 	ldw	r17,4(sp)
    8d80:	dc000017 	ldw	r16,0(sp)
    8d84:	dec00304 	addi	sp,sp,12
    8d88:	f800283a 	ret

00008d8c <udivmodsi4>:
    8d8c:	2005883a 	mov	r2,r4
    8d90:	2900182e 	bgeu	r5,r4,8df4 <udivmodsi4+0x68>
    8d94:	28001716 	blt	r5,zero,8df4 <udivmodsi4+0x68>
    8d98:	01000804 	movi	r4,32
    8d9c:	00c00044 	movi	r3,1
    8da0:	00000206 	br	8dac <udivmodsi4+0x20>
    8da4:	20001126 	beq	r4,zero,8dec <udivmodsi4+0x60>
    8da8:	28000516 	blt	r5,zero,8dc0 <udivmodsi4+0x34>
    8dac:	294b883a 	add	r5,r5,r5
    8db0:	213fffc4 	addi	r4,r4,-1
    8db4:	18c7883a 	add	r3,r3,r3
    8db8:	28bffa36 	bltu	r5,r2,8da4 <udivmodsi4+0x18>
    8dbc:	18000b26 	beq	r3,zero,8dec <udivmodsi4+0x60>
    8dc0:	0009883a 	mov	r4,zero
    8dc4:	11400236 	bltu	r2,r5,8dd0 <udivmodsi4+0x44>
    8dc8:	1145c83a 	sub	r2,r2,r5
    8dcc:	20c8b03a 	or	r4,r4,r3
    8dd0:	1806d07a 	srli	r3,r3,1
    8dd4:	280ad07a 	srli	r5,r5,1
    8dd8:	183ffa1e 	bne	r3,zero,8dc4 <udivmodsi4+0x38>
    8ddc:	3000021e 	bne	r6,zero,8de8 <udivmodsi4+0x5c>
    8de0:	2005883a 	mov	r2,r4
    8de4:	f800283a 	ret
    8de8:	f800283a 	ret
    8dec:	0009883a 	mov	r4,zero
    8df0:	003ffa06 	br	8ddc <udivmodsi4+0x50>
    8df4:	00c00044 	movi	r3,1
    8df8:	0009883a 	mov	r4,zero
    8dfc:	003ff106 	br	8dc4 <udivmodsi4+0x38>

00008e00 <__divsi3>:
    8e00:	defffe04 	addi	sp,sp,-8
    8e04:	dfc00115 	stw	ra,4(sp)
    8e08:	dc000015 	stw	r16,0(sp)
    8e0c:	20000a16 	blt	r4,zero,8e38 <__divsi3+0x38>
    8e10:	0021883a 	mov	r16,zero
    8e14:	28000b16 	blt	r5,zero,8e44 <__divsi3+0x44>
    8e18:	000d883a 	mov	r6,zero
    8e1c:	0008d8c0 	call	8d8c <udivmodsi4>
    8e20:	80000126 	beq	r16,zero,8e28 <__divsi3+0x28>
    8e24:	0085c83a 	sub	r2,zero,r2
    8e28:	dfc00117 	ldw	ra,4(sp)
    8e2c:	dc000017 	ldw	r16,0(sp)
    8e30:	dec00204 	addi	sp,sp,8
    8e34:	f800283a 	ret
    8e38:	0109c83a 	sub	r4,zero,r4
    8e3c:	04000044 	movi	r16,1
    8e40:	283ff50e 	bge	r5,zero,8e18 <__divsi3+0x18>
    8e44:	014bc83a 	sub	r5,zero,r5
    8e48:	8400005c 	xori	r16,r16,1
    8e4c:	003ff206 	br	8e18 <__divsi3+0x18>

00008e50 <__modsi3>:
    8e50:	deffff04 	addi	sp,sp,-4
    8e54:	dfc00015 	stw	ra,0(sp)
    8e58:	20000516 	blt	r4,zero,8e70 <__modsi3+0x20>
    8e5c:	28000c16 	blt	r5,zero,8e90 <__modsi3+0x40>
    8e60:	01800044 	movi	r6,1
    8e64:	dfc00017 	ldw	ra,0(sp)
    8e68:	dec00104 	addi	sp,sp,4
    8e6c:	0008d8c1 	jmpi	8d8c <udivmodsi4>
    8e70:	0109c83a 	sub	r4,zero,r4
    8e74:	28000b16 	blt	r5,zero,8ea4 <__modsi3+0x54>
    8e78:	01800044 	movi	r6,1
    8e7c:	0008d8c0 	call	8d8c <udivmodsi4>
    8e80:	0085c83a 	sub	r2,zero,r2
    8e84:	dfc00017 	ldw	ra,0(sp)
    8e88:	dec00104 	addi	sp,sp,4
    8e8c:	f800283a 	ret
    8e90:	014bc83a 	sub	r5,zero,r5
    8e94:	01800044 	movi	r6,1
    8e98:	dfc00017 	ldw	ra,0(sp)
    8e9c:	dec00104 	addi	sp,sp,4
    8ea0:	0008d8c1 	jmpi	8d8c <udivmodsi4>
    8ea4:	014bc83a 	sub	r5,zero,r5
    8ea8:	003ff306 	br	8e78 <__modsi3+0x28>

00008eac <__udivsi3>:
    8eac:	000d883a 	mov	r6,zero
    8eb0:	0008d8c1 	jmpi	8d8c <udivmodsi4>

00008eb4 <__umodsi3>:
    8eb4:	01800044 	movi	r6,1
    8eb8:	0008d8c1 	jmpi	8d8c <udivmodsi4>

00008ebc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    8ebc:	defffc04 	addi	sp,sp,-16
    8ec0:	df000315 	stw	fp,12(sp)
    8ec4:	df000304 	addi	fp,sp,12
    8ec8:	e13ffd15 	stw	r4,-12(fp)
    8ecc:	e17ffe15 	stw	r5,-8(fp)
    8ed0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    8ed4:	e0fffe17 	ldw	r3,-8(fp)
    8ed8:	e0bffd17 	ldw	r2,-12(fp)
    8edc:	18800e26 	beq	r3,r2,8f18 <alt_load_section+0x5c>
  {
    while( to != end )
    8ee0:	00000a06 	br	8f0c <alt_load_section+0x50>
    {
      *to++ = *from++;
    8ee4:	e0bffd17 	ldw	r2,-12(fp)
    8ee8:	10c00017 	ldw	r3,0(r2)
    8eec:	e0bffe17 	ldw	r2,-8(fp)
    8ef0:	10c00015 	stw	r3,0(r2)
    8ef4:	e0bffe17 	ldw	r2,-8(fp)
    8ef8:	10800104 	addi	r2,r2,4
    8efc:	e0bffe15 	stw	r2,-8(fp)
    8f00:	e0bffd17 	ldw	r2,-12(fp)
    8f04:	10800104 	addi	r2,r2,4
    8f08:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8f0c:	e0fffe17 	ldw	r3,-8(fp)
    8f10:	e0bfff17 	ldw	r2,-4(fp)
    8f14:	18bff31e 	bne	r3,r2,8ee4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    8f18:	e037883a 	mov	sp,fp
    8f1c:	df000017 	ldw	fp,0(sp)
    8f20:	dec00104 	addi	sp,sp,4
    8f24:	f800283a 	ret

00008f28 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8f28:	defffe04 	addi	sp,sp,-8
    8f2c:	dfc00115 	stw	ra,4(sp)
    8f30:	df000015 	stw	fp,0(sp)
    8f34:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    8f38:	01000074 	movhi	r4,1
    8f3c:	212a0c04 	addi	r4,r4,-22480
    8f40:	01400074 	movhi	r5,1
    8f44:	29695704 	addi	r5,r5,-23204
    8f48:	01800074 	movhi	r6,1
    8f4c:	31aa0c04 	addi	r6,r6,-22480
    8f50:	0008ebc0 	call	8ebc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    8f54:	01000074 	movhi	r4,1
    8f58:	21200804 	addi	r4,r4,-32736
    8f5c:	01400074 	movhi	r5,1
    8f60:	29600804 	addi	r5,r5,-32736
    8f64:	01800074 	movhi	r6,1
    8f68:	31a00804 	addi	r6,r6,-32736
    8f6c:	0008ebc0 	call	8ebc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    8f70:	01000074 	movhi	r4,1
    8f74:	21292e04 	addi	r4,r4,-23368
    8f78:	01400074 	movhi	r5,1
    8f7c:	29692e04 	addi	r5,r5,-23368
    8f80:	01800074 	movhi	r6,1
    8f84:	31a95704 	addi	r6,r6,-23204
    8f88:	0008ebc0 	call	8ebc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8f8c:	00097300 	call	9730 <alt_dcache_flush_all>
  alt_icache_flush_all();
    8f90:	00099200 	call	9920 <alt_icache_flush_all>
}
    8f94:	e037883a 	mov	sp,fp
    8f98:	dfc00117 	ldw	ra,4(sp)
    8f9c:	df000017 	ldw	fp,0(sp)
    8fa0:	dec00204 	addi	sp,sp,8
    8fa4:	f800283a 	ret

00008fa8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8fa8:	defffd04 	addi	sp,sp,-12
    8fac:	dfc00215 	stw	ra,8(sp)
    8fb0:	df000115 	stw	fp,4(sp)
    8fb4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8fb8:	0009883a 	mov	r4,zero
    8fbc:	000920c0 	call	920c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    8fc0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8fc4:	00092400 	call	9240 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    8fc8:	01000074 	movhi	r4,1
    8fcc:	21294e04 	addi	r4,r4,-23240
    8fd0:	01400074 	movhi	r5,1
    8fd4:	29694e04 	addi	r5,r5,-23240
    8fd8:	01800074 	movhi	r6,1
    8fdc:	31a94e04 	addi	r6,r6,-23240
    8fe0:	0009a1c0 	call	9a1c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    8fe4:	00098680 	call	9868 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    8fe8:	01000074 	movhi	r4,1
    8fec:	21263104 	addi	r4,r4,-26428
    8ff0:	000a0440 	call	a044 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    8ff4:	d120be17 	ldw	r4,-32008(gp)
    8ff8:	d0e0bf17 	ldw	r3,-32004(gp)
    8ffc:	d0a0c017 	ldw	r2,-32000(gp)
    9000:	180b883a 	mov	r5,r3
    9004:	100d883a 	mov	r6,r2
    9008:	000805c0 	call	805c <main>
    900c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    9010:	01000044 	movi	r4,1
    9014:	00096640 	call	9664 <close>
  exit (result);
    9018:	e13fff17 	ldw	r4,-4(fp)
    901c:	000a0580 	call	a058 <exit>

00009020 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    9020:	defffd04 	addi	sp,sp,-12
    9024:	dfc00215 	stw	ra,8(sp)
    9028:	df000115 	stw	fp,4(sp)
    902c:	df000104 	addi	fp,sp,4
    9030:	e13fff15 	stw	r4,-4(fp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
    9034:	00800074 	movhi	r2,1
    9038:	10aa0504 	addi	r2,r2,-22508
    903c:	10800017 	ldw	r2,0(r2)
    9040:	10800217 	ldw	r2,8(r2)
    9044:	e13fff17 	ldw	r4,-4(fp)
    9048:	100b883a 	mov	r5,r2
    904c:	000a0780 	call	a078 <fputs>
#endif
}
    9050:	e037883a 	mov	sp,fp
    9054:	dfc00117 	ldw	ra,4(sp)
    9058:	df000017 	ldw	fp,0(sp)
    905c:	dec00204 	addi	sp,sp,8
    9060:	f800283a 	ret

00009064 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    9064:	defffd04 	addi	sp,sp,-12
    9068:	dfc00215 	stw	ra,8(sp)
    906c:	df000115 	stw	fp,4(sp)
    9070:	df000104 	addi	fp,sp,4
    9074:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    9078:	e13fff17 	ldw	r4,-4(fp)
    907c:	00094c00 	call	94c0 <alt_busy_sleep>
}
    9080:	e037883a 	mov	sp,fp
    9084:	dfc00117 	ldw	ra,4(sp)
    9088:	df000017 	ldw	fp,0(sp)
    908c:	dec00204 	addi	sp,sp,8
    9090:	f800283a 	ret

00009094 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9094:	defffe04 	addi	sp,sp,-8
    9098:	dfc00115 	stw	ra,4(sp)
    909c:	df000015 	stw	fp,0(sp)
    90a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    90a4:	00800074 	movhi	r2,1
    90a8:	10aa0b04 	addi	r2,r2,-22484
    90ac:	10800017 	ldw	r2,0(r2)
    90b0:	10000526 	beq	r2,zero,90c8 <alt_get_errno+0x34>
    90b4:	00800074 	movhi	r2,1
    90b8:	10aa0b04 	addi	r2,r2,-22484
    90bc:	10800017 	ldw	r2,0(r2)
    90c0:	103ee83a 	callr	r2
    90c4:	00000206 	br	90d0 <alt_get_errno+0x3c>
    90c8:	00800074 	movhi	r2,1
    90cc:	10aac104 	addi	r2,r2,-21756
}
    90d0:	e037883a 	mov	sp,fp
    90d4:	dfc00117 	ldw	ra,4(sp)
    90d8:	df000017 	ldw	fp,0(sp)
    90dc:	dec00204 	addi	sp,sp,8
    90e0:	f800283a 	ret

000090e4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    90e4:	defff904 	addi	sp,sp,-28
    90e8:	dfc00615 	stw	ra,24(sp)
    90ec:	df000515 	stw	fp,20(sp)
    90f0:	df000504 	addi	fp,sp,20
    90f4:	e13ffd15 	stw	r4,-12(fp)
    90f8:	e17ffe15 	stw	r5,-8(fp)
    90fc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9100:	e0bffd17 	ldw	r2,-12(fp)
    9104:	10000716 	blt	r2,zero,9124 <write+0x40>
    9108:	e13ffd17 	ldw	r4,-12(fp)
    910c:	01400304 	movi	r5,12
    9110:	00083e80 	call	83e8 <__mulsi3>
    9114:	00c00074 	movhi	r3,1
    9118:	18e9a404 	addi	r3,r3,-22896
    911c:	10c5883a 	add	r2,r2,r3
    9120:	00000106 	br	9128 <write+0x44>
    9124:	0005883a 	mov	r2,zero
    9128:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    912c:	e0bffb17 	ldw	r2,-20(fp)
    9130:	10001f26 	beq	r2,zero,91b0 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    9134:	e0bffb17 	ldw	r2,-20(fp)
    9138:	10800217 	ldw	r2,8(r2)
    913c:	108000cc 	andi	r2,r2,3
    9140:	10001726 	beq	r2,zero,91a0 <write+0xbc>
    9144:	e0bffb17 	ldw	r2,-20(fp)
    9148:	10800017 	ldw	r2,0(r2)
    914c:	10800617 	ldw	r2,24(r2)
    9150:	10001326 	beq	r2,zero,91a0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    9154:	e0bffb17 	ldw	r2,-20(fp)
    9158:	10800017 	ldw	r2,0(r2)
    915c:	10c00617 	ldw	r3,24(r2)
    9160:	e0bfff17 	ldw	r2,-4(fp)
    9164:	e13ffb17 	ldw	r4,-20(fp)
    9168:	e17ffe17 	ldw	r5,-8(fp)
    916c:	100d883a 	mov	r6,r2
    9170:	183ee83a 	callr	r3
    9174:	e0bffc15 	stw	r2,-16(fp)
    9178:	e0bffc17 	ldw	r2,-16(fp)
    917c:	1000060e 	bge	r2,zero,9198 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    9180:	00090940 	call	9094 <alt_get_errno>
    9184:	e0fffc17 	ldw	r3,-16(fp)
    9188:	00c7c83a 	sub	r3,zero,r3
    918c:	10c00015 	stw	r3,0(r2)
        return -1;
    9190:	00bfffc4 	movi	r2,-1
    9194:	00000a06 	br	91c0 <write+0xdc>
      }
      return rval;
    9198:	e0bffc17 	ldw	r2,-16(fp)
    919c:	00000806 	br	91c0 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
    91a0:	00090940 	call	9094 <alt_get_errno>
    91a4:	00c00344 	movi	r3,13
    91a8:	10c00015 	stw	r3,0(r2)
    91ac:	00000306 	br	91bc <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    91b0:	00090940 	call	9094 <alt_get_errno>
    91b4:	00c01444 	movi	r3,81
    91b8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    91bc:	00bfffc4 	movi	r2,-1
}
    91c0:	e037883a 	mov	sp,fp
    91c4:	dfc00117 	ldw	ra,4(sp)
    91c8:	df000017 	ldw	fp,0(sp)
    91cc:	dec00204 	addi	sp,sp,8
    91d0:	f800283a 	ret

000091d4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    91d4:	defffd04 	addi	sp,sp,-12
    91d8:	dfc00215 	stw	ra,8(sp)
    91dc:	df000115 	stw	fp,4(sp)
    91e0:	df000104 	addi	fp,sp,4
    91e4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    91e8:	e13fff17 	ldw	r4,-4(fp)
    91ec:	01400074 	movhi	r5,1
    91f0:	296a0804 	addi	r5,r5,-22496
    91f4:	00097c80 	call	97c8 <alt_dev_llist_insert>
}
    91f8:	e037883a 	mov	sp,fp
    91fc:	dfc00117 	ldw	ra,4(sp)
    9200:	df000017 	ldw	fp,0(sp)
    9204:	dec00204 	addi	sp,sp,8
    9208:	f800283a 	ret

0000920c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    920c:	defffd04 	addi	sp,sp,-12
    9210:	dfc00215 	stw	ra,8(sp)
    9214:	df000115 	stw	fp,4(sp)
    9218:	df000104 	addi	fp,sp,4
    921c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS, Nios);
    9220:	0009dac0 	call	9dac <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    9224:	00800044 	movi	r2,1
    9228:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    922c:	e037883a 	mov	sp,fp
    9230:	dfc00117 	ldw	ra,4(sp)
    9234:	df000017 	ldw	fp,0(sp)
    9238:	dec00204 	addi	sp,sp,8
    923c:	f800283a 	ret

00009240 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    9240:	defffe04 	addi	sp,sp,-8
    9244:	dfc00115 	stw	ra,4(sp)
    9248:	df000015 	stw	fp,0(sp)
    924c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, Jtag);
    9250:	01000074 	movhi	r4,1
    9254:	21298f04 	addi	r4,r4,-22980
    9258:	00091d40 	call	91d4 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_16207_0, lcd_16207_0);
    925c:	0001883a 	nop
}
    9260:	e037883a 	mov	sp,fp
    9264:	dfc00117 	ldw	ra,4(sp)
    9268:	df000017 	ldw	fp,0(sp)
    926c:	dec00204 	addi	sp,sp,8
    9270:	f800283a 	ret

00009274 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    9274:	defffa04 	addi	sp,sp,-24
    9278:	dfc00515 	stw	ra,20(sp)
    927c:	df000415 	stw	fp,16(sp)
    9280:	df000404 	addi	fp,sp,16
    9284:	e13ffd15 	stw	r4,-12(fp)
    9288:	e17ffe15 	stw	r5,-8(fp)
    928c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9290:	e0bffd17 	ldw	r2,-12(fp)
    9294:	10800017 	ldw	r2,0(r2)
    9298:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    929c:	e0bffc17 	ldw	r2,-16(fp)
    92a0:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    92a4:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    92a8:	10800217 	ldw	r2,8(r2)
    92ac:	1809883a 	mov	r4,r3
    92b0:	e17ffe17 	ldw	r5,-8(fp)
    92b4:	e1bfff17 	ldw	r6,-4(fp)
    92b8:	100f883a 	mov	r7,r2
    92bc:	00093340 	call	9334 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    92c0:	e037883a 	mov	sp,fp
    92c4:	dfc00117 	ldw	ra,4(sp)
    92c8:	df000017 	ldw	fp,0(sp)
    92cc:	dec00204 	addi	sp,sp,8
    92d0:	f800283a 	ret

000092d4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    92d4:	defffa04 	addi	sp,sp,-24
    92d8:	dfc00515 	stw	ra,20(sp)
    92dc:	df000415 	stw	fp,16(sp)
    92e0:	df000404 	addi	fp,sp,16
    92e4:	e13ffd15 	stw	r4,-12(fp)
    92e8:	e17ffe15 	stw	r5,-8(fp)
    92ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    92f0:	e0bffd17 	ldw	r2,-12(fp)
    92f4:	10800017 	ldw	r2,0(r2)
    92f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    92fc:	e0bffc17 	ldw	r2,-16(fp)
    9300:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    9304:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    9308:	10800217 	ldw	r2,8(r2)
    930c:	1809883a 	mov	r4,r3
    9310:	e17ffe17 	ldw	r5,-8(fp)
    9314:	e1bfff17 	ldw	r6,-4(fp)
    9318:	100f883a 	mov	r7,r2
    931c:	00094280 	call	9428 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    9320:	e037883a 	mov	sp,fp
    9324:	dfc00117 	ldw	ra,4(sp)
    9328:	df000017 	ldw	fp,0(sp)
    932c:	dec00204 	addi	sp,sp,8
    9330:	f800283a 	ret

00009334 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    9334:	defff704 	addi	sp,sp,-36
    9338:	df000815 	stw	fp,32(sp)
    933c:	df000804 	addi	fp,sp,32
    9340:	e13ffc15 	stw	r4,-16(fp)
    9344:	e17ffd15 	stw	r5,-12(fp)
    9348:	e1bffe15 	stw	r6,-8(fp)
    934c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    9350:	e0bffc17 	ldw	r2,-16(fp)
    9354:	10800017 	ldw	r2,0(r2)
    9358:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    935c:	e0bffd17 	ldw	r2,-12(fp)
    9360:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    9364:	e0bffe17 	ldw	r2,-8(fp)
    9368:	e0fffd17 	ldw	r3,-12(fp)
    936c:	1885883a 	add	r2,r3,r2
    9370:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    9374:	00001406 	br	93c8 <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    9378:	e0bff917 	ldw	r2,-28(fp)
    937c:	10800037 	ldwio	r2,0(r2)
    9380:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    9384:	e0bffb17 	ldw	r2,-20(fp)
    9388:	10a0000c 	andi	r2,r2,32768
    938c:	10000826 	beq	r2,zero,93b0 <altera_avalon_jtag_uart_read+0x7c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    9390:	e0bffb17 	ldw	r2,-20(fp)
    9394:	1007883a 	mov	r3,r2
    9398:	e0bff817 	ldw	r2,-32(fp)
    939c:	10c00005 	stb	r3,0(r2)
    93a0:	e0bff817 	ldw	r2,-32(fp)
    93a4:	10800044 	addi	r2,r2,1
    93a8:	e0bff815 	stw	r2,-32(fp)
    93ac:	00000606 	br	93c8 <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
    93b0:	e0fff817 	ldw	r3,-32(fp)
    93b4:	e0bffd17 	ldw	r2,-12(fp)
    93b8:	1880071e 	bne	r3,r2,93d8 <altera_avalon_jtag_uart_read+0xa4>
      break;
    else if(flags & O_NONBLOCK)
    93bc:	e0bfff17 	ldw	r2,-4(fp)
    93c0:	1090000c 	andi	r2,r2,16384
    93c4:	1000061e 	bne	r2,zero,93e0 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    93c8:	e0fff817 	ldw	r3,-32(fp)
    93cc:	e0bffa17 	ldw	r2,-24(fp)
    93d0:	18bfe936 	bltu	r3,r2,9378 <altera_avalon_jtag_uart_read+0x44>
    93d4:	00000306 	br	93e4 <altera_avalon_jtag_uart_read+0xb0>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    93d8:	0001883a 	nop
    93dc:	00000106 	br	93e4 <altera_avalon_jtag_uart_read+0xb0>
    else if(flags & O_NONBLOCK)
      break;   
    93e0:	0001883a 	nop
    
  }

  if (ptr != buffer)
    93e4:	e0fff817 	ldw	r3,-32(fp)
    93e8:	e0bffd17 	ldw	r2,-12(fp)
    93ec:	18800426 	beq	r3,r2,9400 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
    93f0:	e0fff817 	ldw	r3,-32(fp)
    93f4:	e0bffd17 	ldw	r2,-12(fp)
    93f8:	1885c83a 	sub	r2,r3,r2
    93fc:	00000606 	br	9418 <altera_avalon_jtag_uart_read+0xe4>
  else if (flags & O_NONBLOCK)
    9400:	e0bfff17 	ldw	r2,-4(fp)
    9404:	1090000c 	andi	r2,r2,16384
    9408:	10000226 	beq	r2,zero,9414 <altera_avalon_jtag_uart_read+0xe0>
    return -EWOULDBLOCK;
    940c:	00bffd44 	movi	r2,-11
    9410:	00000106 	br	9418 <altera_avalon_jtag_uart_read+0xe4>
  else
    return -EIO;
    9414:	00bffec4 	movi	r2,-5
}
    9418:	e037883a 	mov	sp,fp
    941c:	df000017 	ldw	fp,0(sp)
    9420:	dec00104 	addi	sp,sp,4
    9424:	f800283a 	ret

00009428 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    9428:	defff904 	addi	sp,sp,-28
    942c:	df000615 	stw	fp,24(sp)
    9430:	df000604 	addi	fp,sp,24
    9434:	e13ffc15 	stw	r4,-16(fp)
    9438:	e17ffd15 	stw	r5,-12(fp)
    943c:	e1bffe15 	stw	r6,-8(fp)
    9440:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    9444:	e0bffc17 	ldw	r2,-16(fp)
    9448:	10800017 	ldw	r2,0(r2)
    944c:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    9450:	e0bffe17 	ldw	r2,-8(fp)
    9454:	e0fffd17 	ldw	r3,-12(fp)
    9458:	1885883a 	add	r2,r3,r2
    945c:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    9460:	00000f06 	br	94a0 <altera_avalon_jtag_uart_write+0x78>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    9464:	e0bffa17 	ldw	r2,-24(fp)
    9468:	10800104 	addi	r2,r2,4
    946c:	10800037 	ldwio	r2,0(r2)
    9470:	10bfffec 	andhi	r2,r2,65535
    9474:	10000a26 	beq	r2,zero,94a0 <altera_avalon_jtag_uart_write+0x78>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    9478:	e0bffa17 	ldw	r2,-24(fp)
    947c:	e0fffd17 	ldw	r3,-12(fp)
    9480:	18c00003 	ldbu	r3,0(r3)
    9484:	18c03fcc 	andi	r3,r3,255
    9488:	18c0201c 	xori	r3,r3,128
    948c:	18ffe004 	addi	r3,r3,-128
    9490:	e13ffd17 	ldw	r4,-12(fp)
    9494:	21000044 	addi	r4,r4,1
    9498:	e13ffd15 	stw	r4,-12(fp)
    949c:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    94a0:	e0fffd17 	ldw	r3,-12(fp)
    94a4:	e0bffb17 	ldw	r2,-20(fp)
    94a8:	18bfee36 	bltu	r3,r2,9464 <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    94ac:	e0bffe17 	ldw	r2,-8(fp)
}
    94b0:	e037883a 	mov	sp,fp
    94b4:	df000017 	ldw	fp,0(sp)
    94b8:	dec00104 	addi	sp,sp,4
    94bc:	f800283a 	ret

000094c0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    94c0:	defffa04 	addi	sp,sp,-24
    94c4:	dfc00515 	stw	ra,20(sp)
    94c8:	df000415 	stw	fp,16(sp)
    94cc:	df000404 	addi	fp,sp,16
    94d0:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    94d4:	00800244 	movi	r2,9
    94d8:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    94dc:	e13ffd17 	ldw	r4,-12(fp)
    94e0:	014003f4 	movhi	r5,15
    94e4:	29509004 	addi	r5,r5,16960
    94e8:	00083e80 	call	83e8 <__mulsi3>
    94ec:	0100bef4 	movhi	r4,763
    94f0:	213c2004 	addi	r4,r4,-3968
    94f4:	100b883a 	mov	r5,r2
    94f8:	0008eac0 	call	8eac <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    94fc:	01200034 	movhi	r4,32768
    9500:	213fffc4 	addi	r4,r4,-1
    9504:	100b883a 	mov	r5,r2
    9508:	0008eac0 	call	8eac <__udivsi3>
    950c:	e13fff17 	ldw	r4,-4(fp)
    9510:	100b883a 	mov	r5,r2
    9514:	0008eac0 	call	8eac <__udivsi3>
    9518:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    951c:	e0bffe17 	ldw	r2,-8(fp)
    9520:	10002926 	beq	r2,zero,95c8 <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
    9524:	e03ffc15 	stw	zero,-16(fp)
    9528:	00001606 	br	9584 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    952c:	00a00034 	movhi	r2,32768
    9530:	10bfffc4 	addi	r2,r2,-1
    9534:	10bfffc4 	addi	r2,r2,-1
    9538:	103ffe1e 	bne	r2,zero,9534 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    953c:	e13ffd17 	ldw	r4,-12(fp)
    9540:	014003f4 	movhi	r5,15
    9544:	29509004 	addi	r5,r5,16960
    9548:	00083e80 	call	83e8 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    954c:	0100bef4 	movhi	r4,763
    9550:	213c2004 	addi	r4,r4,-3968
    9554:	100b883a 	mov	r5,r2
    9558:	0008eac0 	call	8eac <__udivsi3>
    955c:	01200034 	movhi	r4,32768
    9560:	213fffc4 	addi	r4,r4,-1
    9564:	100b883a 	mov	r5,r2
    9568:	0008eac0 	call	8eac <__udivsi3>
    956c:	e0ffff17 	ldw	r3,-4(fp)
    9570:	1885c83a 	sub	r2,r3,r2
    9574:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    9578:	e0bffc17 	ldw	r2,-16(fp)
    957c:	10800044 	addi	r2,r2,1
    9580:	e0bffc15 	stw	r2,-16(fp)
    9584:	e0fffc17 	ldw	r3,-16(fp)
    9588:	e0bffe17 	ldw	r2,-8(fp)
    958c:	18bfe716 	blt	r3,r2,952c <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    9590:	e13ffd17 	ldw	r4,-12(fp)
    9594:	014003f4 	movhi	r5,15
    9598:	29509004 	addi	r5,r5,16960
    959c:	00083e80 	call	83e8 <__mulsi3>
    95a0:	0100bef4 	movhi	r4,763
    95a4:	213c2004 	addi	r4,r4,-3968
    95a8:	100b883a 	mov	r5,r2
    95ac:	0008eac0 	call	8eac <__udivsi3>
    95b0:	1009883a 	mov	r4,r2
    95b4:	e17fff17 	ldw	r5,-4(fp)
    95b8:	00083e80 	call	83e8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    95bc:	10bfffc4 	addi	r2,r2,-1
    95c0:	103ffe1e 	bne	r2,zero,95bc <alt_busy_sleep+0xfc>
    95c4:	00000d06 	br	95fc <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    95c8:	e13ffd17 	ldw	r4,-12(fp)
    95cc:	014003f4 	movhi	r5,15
    95d0:	29509004 	addi	r5,r5,16960
    95d4:	00083e80 	call	83e8 <__mulsi3>
    95d8:	0100bef4 	movhi	r4,763
    95dc:	213c2004 	addi	r4,r4,-3968
    95e0:	100b883a 	mov	r5,r2
    95e4:	0008eac0 	call	8eac <__udivsi3>
    95e8:	1009883a 	mov	r4,r2
    95ec:	e17fff17 	ldw	r5,-4(fp)
    95f0:	00083e80 	call	83e8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    95f4:	10bfffc4 	addi	r2,r2,-1
    95f8:	00bffe16 	blt	zero,r2,95f4 <alt_busy_sleep+0x134>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    95fc:	0005883a 	mov	r2,zero
}
    9600:	e037883a 	mov	sp,fp
    9604:	dfc00117 	ldw	ra,4(sp)
    9608:	df000017 	ldw	fp,0(sp)
    960c:	dec00204 	addi	sp,sp,8
    9610:	f800283a 	ret

00009614 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9614:	defffe04 	addi	sp,sp,-8
    9618:	dfc00115 	stw	ra,4(sp)
    961c:	df000015 	stw	fp,0(sp)
    9620:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9624:	00800074 	movhi	r2,1
    9628:	10aa0b04 	addi	r2,r2,-22484
    962c:	10800017 	ldw	r2,0(r2)
    9630:	10000526 	beq	r2,zero,9648 <alt_get_errno+0x34>
    9634:	00800074 	movhi	r2,1
    9638:	10aa0b04 	addi	r2,r2,-22484
    963c:	10800017 	ldw	r2,0(r2)
    9640:	103ee83a 	callr	r2
    9644:	00000206 	br	9650 <alt_get_errno+0x3c>
    9648:	00800074 	movhi	r2,1
    964c:	10aac104 	addi	r2,r2,-21756
}
    9650:	e037883a 	mov	sp,fp
    9654:	dfc00117 	ldw	ra,4(sp)
    9658:	df000017 	ldw	fp,0(sp)
    965c:	dec00204 	addi	sp,sp,8
    9660:	f800283a 	ret

00009664 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    9664:	defffb04 	addi	sp,sp,-20
    9668:	dfc00415 	stw	ra,16(sp)
    966c:	df000315 	stw	fp,12(sp)
    9670:	df000304 	addi	fp,sp,12
    9674:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9678:	e0bfff17 	ldw	r2,-4(fp)
    967c:	10000716 	blt	r2,zero,969c <close+0x38>
    9680:	e13fff17 	ldw	r4,-4(fp)
    9684:	01400304 	movi	r5,12
    9688:	00083e80 	call	83e8 <__mulsi3>
    968c:	00c00074 	movhi	r3,1
    9690:	18e9a404 	addi	r3,r3,-22896
    9694:	10c5883a 	add	r2,r2,r3
    9698:	00000106 	br	96a0 <close+0x3c>
    969c:	0005883a 	mov	r2,zero
    96a0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    96a4:	e0bffd17 	ldw	r2,-12(fp)
    96a8:	10001826 	beq	r2,zero,970c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    96ac:	e0bffd17 	ldw	r2,-12(fp)
    96b0:	10800017 	ldw	r2,0(r2)
    96b4:	10800417 	ldw	r2,16(r2)
    96b8:	10000626 	beq	r2,zero,96d4 <close+0x70>
    96bc:	e0bffd17 	ldw	r2,-12(fp)
    96c0:	10800017 	ldw	r2,0(r2)
    96c4:	10800417 	ldw	r2,16(r2)
    96c8:	e13ffd17 	ldw	r4,-12(fp)
    96cc:	103ee83a 	callr	r2
    96d0:	00000106 	br	96d8 <close+0x74>
    96d4:	0005883a 	mov	r2,zero
    96d8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    96dc:	e13fff17 	ldw	r4,-4(fp)
    96e0:	0009d2c0 	call	9d2c <alt_release_fd>
    if (rval < 0)
    96e4:	e0bffe17 	ldw	r2,-8(fp)
    96e8:	1000060e 	bge	r2,zero,9704 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    96ec:	00096140 	call	9614 <alt_get_errno>
    96f0:	e0fffe17 	ldw	r3,-8(fp)
    96f4:	00c7c83a 	sub	r3,zero,r3
    96f8:	10c00015 	stw	r3,0(r2)
      return -1;
    96fc:	00bfffc4 	movi	r2,-1
    9700:	00000606 	br	971c <close+0xb8>
    }
    return 0;
    9704:	0005883a 	mov	r2,zero
    9708:	00000406 	br	971c <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    970c:	00096140 	call	9614 <alt_get_errno>
    9710:	00c01444 	movi	r3,81
    9714:	10c00015 	stw	r3,0(r2)
    return -1;
    9718:	00bfffc4 	movi	r2,-1
  }
}
    971c:	e037883a 	mov	sp,fp
    9720:	dfc00117 	ldw	ra,4(sp)
    9724:	df000017 	ldw	fp,0(sp)
    9728:	dec00204 	addi	sp,sp,8
    972c:	f800283a 	ret

00009730 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    9730:	deffff04 	addi	sp,sp,-4
    9734:	df000015 	stw	fp,0(sp)
    9738:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    973c:	e037883a 	mov	sp,fp
    9740:	df000017 	ldw	fp,0(sp)
    9744:	dec00104 	addi	sp,sp,4
    9748:	f800283a 	ret

0000974c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    974c:	defffc04 	addi	sp,sp,-16
    9750:	df000315 	stw	fp,12(sp)
    9754:	df000304 	addi	fp,sp,12
    9758:	e13ffd15 	stw	r4,-12(fp)
    975c:	e17ffe15 	stw	r5,-8(fp)
    9760:	e1bfff15 	stw	r6,-4(fp)
  return len;
    9764:	e0bfff17 	ldw	r2,-4(fp)
}
    9768:	e037883a 	mov	sp,fp
    976c:	df000017 	ldw	fp,0(sp)
    9770:	dec00104 	addi	sp,sp,4
    9774:	f800283a 	ret

00009778 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9778:	defffe04 	addi	sp,sp,-8
    977c:	dfc00115 	stw	ra,4(sp)
    9780:	df000015 	stw	fp,0(sp)
    9784:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9788:	00800074 	movhi	r2,1
    978c:	10aa0b04 	addi	r2,r2,-22484
    9790:	10800017 	ldw	r2,0(r2)
    9794:	10000526 	beq	r2,zero,97ac <alt_get_errno+0x34>
    9798:	00800074 	movhi	r2,1
    979c:	10aa0b04 	addi	r2,r2,-22484
    97a0:	10800017 	ldw	r2,0(r2)
    97a4:	103ee83a 	callr	r2
    97a8:	00000206 	br	97b4 <alt_get_errno+0x3c>
    97ac:	00800074 	movhi	r2,1
    97b0:	10aac104 	addi	r2,r2,-21756
}
    97b4:	e037883a 	mov	sp,fp
    97b8:	dfc00117 	ldw	ra,4(sp)
    97bc:	df000017 	ldw	fp,0(sp)
    97c0:	dec00204 	addi	sp,sp,8
    97c4:	f800283a 	ret

000097c8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    97c8:	defffa04 	addi	sp,sp,-24
    97cc:	dfc00515 	stw	ra,20(sp)
    97d0:	df000415 	stw	fp,16(sp)
    97d4:	df000404 	addi	fp,sp,16
    97d8:	e13ffe15 	stw	r4,-8(fp)
    97dc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    97e0:	e0bffe17 	ldw	r2,-8(fp)
    97e4:	10000326 	beq	r2,zero,97f4 <alt_dev_llist_insert+0x2c>
    97e8:	e0bffe17 	ldw	r2,-8(fp)
    97ec:	10800217 	ldw	r2,8(r2)
    97f0:	1000051e 	bne	r2,zero,9808 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
    97f4:	00097780 	call	9778 <alt_get_errno>
    97f8:	00c00584 	movi	r3,22
    97fc:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    9800:	00bffa84 	movi	r2,-22
    9804:	00001306 	br	9854 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    9808:	e0bffe17 	ldw	r2,-8(fp)
    980c:	e0ffff17 	ldw	r3,-4(fp)
    9810:	e0fffc15 	stw	r3,-16(fp)
    9814:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    9818:	e0bffd17 	ldw	r2,-12(fp)
    981c:	e0fffc17 	ldw	r3,-16(fp)
    9820:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    9824:	e0bffc17 	ldw	r2,-16(fp)
    9828:	10c00017 	ldw	r3,0(r2)
    982c:	e0bffd17 	ldw	r2,-12(fp)
    9830:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    9834:	e0bffc17 	ldw	r2,-16(fp)
    9838:	10800017 	ldw	r2,0(r2)
    983c:	e0fffd17 	ldw	r3,-12(fp)
    9840:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    9844:	e0bffc17 	ldw	r2,-16(fp)
    9848:	e0fffd17 	ldw	r3,-12(fp)
    984c:	10c00015 	stw	r3,0(r2)

  return 0;  
    9850:	0005883a 	mov	r2,zero
}
    9854:	e037883a 	mov	sp,fp
    9858:	dfc00117 	ldw	ra,4(sp)
    985c:	df000017 	ldw	fp,0(sp)
    9860:	dec00204 	addi	sp,sp,8
    9864:	f800283a 	ret

00009868 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    9868:	defffd04 	addi	sp,sp,-12
    986c:	dfc00215 	stw	ra,8(sp)
    9870:	df000115 	stw	fp,4(sp)
    9874:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    9878:	00800074 	movhi	r2,1
    987c:	10a92d04 	addi	r2,r2,-23372
    9880:	e0bfff15 	stw	r2,-4(fp)
    9884:	00000606 	br	98a0 <_do_ctors+0x38>
        (*ctor) (); 
    9888:	e0bfff17 	ldw	r2,-4(fp)
    988c:	10800017 	ldw	r2,0(r2)
    9890:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    9894:	e0bfff17 	ldw	r2,-4(fp)
    9898:	10bfff04 	addi	r2,r2,-4
    989c:	e0bfff15 	stw	r2,-4(fp)
    98a0:	e0ffff17 	ldw	r3,-4(fp)
    98a4:	00800074 	movhi	r2,1
    98a8:	10a92e04 	addi	r2,r2,-23368
    98ac:	18bff62e 	bgeu	r3,r2,9888 <_do_ctors+0x20>
        (*ctor) (); 
}
    98b0:	e037883a 	mov	sp,fp
    98b4:	dfc00117 	ldw	ra,4(sp)
    98b8:	df000017 	ldw	fp,0(sp)
    98bc:	dec00204 	addi	sp,sp,8
    98c0:	f800283a 	ret

000098c4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    98c4:	defffd04 	addi	sp,sp,-12
    98c8:	dfc00215 	stw	ra,8(sp)
    98cc:	df000115 	stw	fp,4(sp)
    98d0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    98d4:	00800074 	movhi	r2,1
    98d8:	10a92d04 	addi	r2,r2,-23372
    98dc:	e0bfff15 	stw	r2,-4(fp)
    98e0:	00000606 	br	98fc <_do_dtors+0x38>
        (*dtor) (); 
    98e4:	e0bfff17 	ldw	r2,-4(fp)
    98e8:	10800017 	ldw	r2,0(r2)
    98ec:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    98f0:	e0bfff17 	ldw	r2,-4(fp)
    98f4:	10bfff04 	addi	r2,r2,-4
    98f8:	e0bfff15 	stw	r2,-4(fp)
    98fc:	e0ffff17 	ldw	r3,-4(fp)
    9900:	00800074 	movhi	r2,1
    9904:	10a92e04 	addi	r2,r2,-23368
    9908:	18bff62e 	bgeu	r3,r2,98e4 <_do_dtors+0x20>
        (*dtor) (); 
}
    990c:	e037883a 	mov	sp,fp
    9910:	dfc00117 	ldw	ra,4(sp)
    9914:	df000017 	ldw	fp,0(sp)
    9918:	dec00204 	addi	sp,sp,8
    991c:	f800283a 	ret

00009920 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    9920:	deffff04 	addi	sp,sp,-4
    9924:	df000015 	stw	fp,0(sp)
    9928:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    992c:	e037883a 	mov	sp,fp
    9930:	df000017 	ldw	fp,0(sp)
    9934:	dec00104 	addi	sp,sp,4
    9938:	f800283a 	ret

0000993c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    993c:	defff804 	addi	sp,sp,-32
    9940:	dfc00715 	stw	ra,28(sp)
    9944:	df000615 	stw	fp,24(sp)
    9948:	dc000515 	stw	r16,20(sp)
    994c:	df000504 	addi	fp,sp,20
    9950:	e13ffc15 	stw	r4,-16(fp)
    9954:	e17ffd15 	stw	r5,-12(fp)
    9958:	e1bffe15 	stw	r6,-8(fp)
    995c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    9960:	e13ffd17 	ldw	r4,-12(fp)
    9964:	e17ffe17 	ldw	r5,-8(fp)
    9968:	e1bfff17 	ldw	r6,-4(fp)
    996c:	0009bd40 	call	9bd4 <open>
    9970:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    9974:	e0bffb17 	ldw	r2,-20(fp)
    9978:	10002216 	blt	r2,zero,9a04 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    997c:	04000074 	movhi	r16,1
    9980:	8429a404 	addi	r16,r16,-22896
    9984:	e0bffb17 	ldw	r2,-20(fp)
    9988:	1009883a 	mov	r4,r2
    998c:	01400304 	movi	r5,12
    9990:	00083e80 	call	83e8 <__mulsi3>
    9994:	8085883a 	add	r2,r16,r2
    9998:	10c00017 	ldw	r3,0(r2)
    999c:	e0bffc17 	ldw	r2,-16(fp)
    99a0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    99a4:	04000074 	movhi	r16,1
    99a8:	8429a404 	addi	r16,r16,-22896
    99ac:	e0bffb17 	ldw	r2,-20(fp)
    99b0:	1009883a 	mov	r4,r2
    99b4:	01400304 	movi	r5,12
    99b8:	00083e80 	call	83e8 <__mulsi3>
    99bc:	8085883a 	add	r2,r16,r2
    99c0:	10800104 	addi	r2,r2,4
    99c4:	10c00017 	ldw	r3,0(r2)
    99c8:	e0bffc17 	ldw	r2,-16(fp)
    99cc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    99d0:	04000074 	movhi	r16,1
    99d4:	8429a404 	addi	r16,r16,-22896
    99d8:	e0bffb17 	ldw	r2,-20(fp)
    99dc:	1009883a 	mov	r4,r2
    99e0:	01400304 	movi	r5,12
    99e4:	00083e80 	call	83e8 <__mulsi3>
    99e8:	8085883a 	add	r2,r16,r2
    99ec:	10800204 	addi	r2,r2,8
    99f0:	10c00017 	ldw	r3,0(r2)
    99f4:	e0bffc17 	ldw	r2,-16(fp)
    99f8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    99fc:	e13ffb17 	ldw	r4,-20(fp)
    9a00:	0009d2c0 	call	9d2c <alt_release_fd>
  }
} 
    9a04:	e037883a 	mov	sp,fp
    9a08:	dfc00217 	ldw	ra,8(sp)
    9a0c:	df000117 	ldw	fp,4(sp)
    9a10:	dc000017 	ldw	r16,0(sp)
    9a14:	dec00304 	addi	sp,sp,12
    9a18:	f800283a 	ret

00009a1c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    9a1c:	defffb04 	addi	sp,sp,-20
    9a20:	dfc00415 	stw	ra,16(sp)
    9a24:	df000315 	stw	fp,12(sp)
    9a28:	df000304 	addi	fp,sp,12
    9a2c:	e13ffd15 	stw	r4,-12(fp)
    9a30:	e17ffe15 	stw	r5,-8(fp)
    9a34:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    9a38:	01000074 	movhi	r4,1
    9a3c:	2129a704 	addi	r4,r4,-22884
    9a40:	e17ffd17 	ldw	r5,-12(fp)
    9a44:	01800044 	movi	r6,1
    9a48:	01c07fc4 	movi	r7,511
    9a4c:	000993c0 	call	993c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    9a50:	01000074 	movhi	r4,1
    9a54:	2129a404 	addi	r4,r4,-22896
    9a58:	e17ffe17 	ldw	r5,-8(fp)
    9a5c:	000d883a 	mov	r6,zero
    9a60:	01c07fc4 	movi	r7,511
    9a64:	000993c0 	call	993c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    9a68:	01000074 	movhi	r4,1
    9a6c:	2129aa04 	addi	r4,r4,-22872
    9a70:	e17fff17 	ldw	r5,-4(fp)
    9a74:	01800044 	movi	r6,1
    9a78:	01c07fc4 	movi	r7,511
    9a7c:	000993c0 	call	993c <alt_open_fd>
}  
    9a80:	e037883a 	mov	sp,fp
    9a84:	dfc00117 	ldw	ra,4(sp)
    9a88:	df000017 	ldw	fp,0(sp)
    9a8c:	dec00204 	addi	sp,sp,8
    9a90:	f800283a 	ret

00009a94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9a94:	defffe04 	addi	sp,sp,-8
    9a98:	dfc00115 	stw	ra,4(sp)
    9a9c:	df000015 	stw	fp,0(sp)
    9aa0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9aa4:	00800074 	movhi	r2,1
    9aa8:	10aa0b04 	addi	r2,r2,-22484
    9aac:	10800017 	ldw	r2,0(r2)
    9ab0:	10000526 	beq	r2,zero,9ac8 <alt_get_errno+0x34>
    9ab4:	00800074 	movhi	r2,1
    9ab8:	10aa0b04 	addi	r2,r2,-22484
    9abc:	10800017 	ldw	r2,0(r2)
    9ac0:	103ee83a 	callr	r2
    9ac4:	00000206 	br	9ad0 <alt_get_errno+0x3c>
    9ac8:	00800074 	movhi	r2,1
    9acc:	10aac104 	addi	r2,r2,-21756
}
    9ad0:	e037883a 	mov	sp,fp
    9ad4:	dfc00117 	ldw	ra,4(sp)
    9ad8:	df000017 	ldw	fp,0(sp)
    9adc:	dec00204 	addi	sp,sp,8
    9ae0:	f800283a 	ret

00009ae4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    9ae4:	defffb04 	addi	sp,sp,-20
    9ae8:	dfc00415 	stw	ra,16(sp)
    9aec:	df000315 	stw	fp,12(sp)
    9af0:	dc000215 	stw	r16,8(sp)
    9af4:	df000204 	addi	fp,sp,8
    9af8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    9afc:	e0bfff17 	ldw	r2,-4(fp)
    9b00:	10800217 	ldw	r2,8(r2)
    9b04:	10d00034 	orhi	r3,r2,16384
    9b08:	e0bfff17 	ldw	r2,-4(fp)
    9b0c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9b10:	e03ffe15 	stw	zero,-8(fp)
    9b14:	00002206 	br	9ba0 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9b18:	04000074 	movhi	r16,1
    9b1c:	8429a404 	addi	r16,r16,-22896
    9b20:	e0bffe17 	ldw	r2,-8(fp)
    9b24:	1009883a 	mov	r4,r2
    9b28:	01400304 	movi	r5,12
    9b2c:	00083e80 	call	83e8 <__mulsi3>
    9b30:	8085883a 	add	r2,r16,r2
    9b34:	10c00017 	ldw	r3,0(r2)
    9b38:	e0bfff17 	ldw	r2,-4(fp)
    9b3c:	10800017 	ldw	r2,0(r2)
    9b40:	1880141e 	bne	r3,r2,9b94 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    9b44:	04000074 	movhi	r16,1
    9b48:	8429a404 	addi	r16,r16,-22896
    9b4c:	e0bffe17 	ldw	r2,-8(fp)
    9b50:	1009883a 	mov	r4,r2
    9b54:	01400304 	movi	r5,12
    9b58:	00083e80 	call	83e8 <__mulsi3>
    9b5c:	8085883a 	add	r2,r16,r2
    9b60:	10800204 	addi	r2,r2,8
    9b64:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9b68:	10000a0e 	bge	r2,zero,9b94 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    9b6c:	e13ffe17 	ldw	r4,-8(fp)
    9b70:	01400304 	movi	r5,12
    9b74:	00083e80 	call	83e8 <__mulsi3>
    9b78:	00c00074 	movhi	r3,1
    9b7c:	18e9a404 	addi	r3,r3,-22896
    9b80:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    9b84:	e0bfff17 	ldw	r2,-4(fp)
    9b88:	18800226 	beq	r3,r2,9b94 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    9b8c:	00bffcc4 	movi	r2,-13
    9b90:	00000a06 	br	9bbc <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9b94:	e0bffe17 	ldw	r2,-8(fp)
    9b98:	10800044 	addi	r2,r2,1
    9b9c:	e0bffe15 	stw	r2,-8(fp)
    9ba0:	00800074 	movhi	r2,1
    9ba4:	10aa0a04 	addi	r2,r2,-22488
    9ba8:	10800017 	ldw	r2,0(r2)
    9bac:	1007883a 	mov	r3,r2
    9bb0:	e0bffe17 	ldw	r2,-8(fp)
    9bb4:	18bfd82e 	bgeu	r3,r2,9b18 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    9bb8:	0005883a 	mov	r2,zero
}
    9bbc:	e037883a 	mov	sp,fp
    9bc0:	dfc00217 	ldw	ra,8(sp)
    9bc4:	df000117 	ldw	fp,4(sp)
    9bc8:	dc000017 	ldw	r16,0(sp)
    9bcc:	dec00304 	addi	sp,sp,12
    9bd0:	f800283a 	ret

00009bd4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    9bd4:	defff604 	addi	sp,sp,-40
    9bd8:	dfc00915 	stw	ra,36(sp)
    9bdc:	df000815 	stw	fp,32(sp)
    9be0:	df000804 	addi	fp,sp,32
    9be4:	e13ffd15 	stw	r4,-12(fp)
    9be8:	e17ffe15 	stw	r5,-8(fp)
    9bec:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    9bf0:	00bfffc4 	movi	r2,-1
    9bf4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    9bf8:	00bffb44 	movi	r2,-19
    9bfc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    9c00:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    9c04:	e13ffd17 	ldw	r4,-12(fp)
    9c08:	01400074 	movhi	r5,1
    9c0c:	296a0804 	addi	r5,r5,-22496
    9c10:	0009dcc0 	call	9dcc <alt_find_dev>
    9c14:	e0bff815 	stw	r2,-32(fp)
    9c18:	e0bff817 	ldw	r2,-32(fp)
    9c1c:	1000051e 	bne	r2,zero,9c34 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    9c20:	e13ffd17 	ldw	r4,-12(fp)
    9c24:	0009e5c0 	call	9e5c <alt_find_file>
    9c28:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    9c2c:	00800044 	movi	r2,1
    9c30:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    9c34:	e0bff817 	ldw	r2,-32(fp)
    9c38:	10002a26 	beq	r2,zero,9ce4 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    9c3c:	e13ff817 	ldw	r4,-32(fp)
    9c40:	0009f700 	call	9f70 <alt_get_fd>
    9c44:	e0bff915 	stw	r2,-28(fp)
    9c48:	e0bff917 	ldw	r2,-28(fp)
    9c4c:	1000030e 	bge	r2,zero,9c5c <open+0x88>
    {
      status = index;
    9c50:	e0bff917 	ldw	r2,-28(fp)
    9c54:	e0bffa15 	stw	r2,-24(fp)
    9c58:	00002406 	br	9cec <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    9c5c:	e13ff917 	ldw	r4,-28(fp)
    9c60:	01400304 	movi	r5,12
    9c64:	00083e80 	call	83e8 <__mulsi3>
    9c68:	00c00074 	movhi	r3,1
    9c6c:	18e9a404 	addi	r3,r3,-22896
    9c70:	10c5883a 	add	r2,r2,r3
    9c74:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    9c78:	e0fffe17 	ldw	r3,-8(fp)
    9c7c:	00900034 	movhi	r2,16384
    9c80:	10bfffc4 	addi	r2,r2,-1
    9c84:	1886703a 	and	r3,r3,r2
    9c88:	e0bffc17 	ldw	r2,-16(fp)
    9c8c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    9c90:	e0bffb17 	ldw	r2,-20(fp)
    9c94:	1000051e 	bne	r2,zero,9cac <open+0xd8>
    9c98:	e13ffc17 	ldw	r4,-16(fp)
    9c9c:	0009ae40 	call	9ae4 <alt_file_locked>
    9ca0:	e0bffa15 	stw	r2,-24(fp)
    9ca4:	e0bffa17 	ldw	r2,-24(fp)
    9ca8:	10001016 	blt	r2,zero,9cec <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    9cac:	e0bff817 	ldw	r2,-32(fp)
    9cb0:	10800317 	ldw	r2,12(r2)
    9cb4:	10000826 	beq	r2,zero,9cd8 <open+0x104>
    9cb8:	e0bff817 	ldw	r2,-32(fp)
    9cbc:	10800317 	ldw	r2,12(r2)
    9cc0:	e13ffc17 	ldw	r4,-16(fp)
    9cc4:	e17ffd17 	ldw	r5,-12(fp)
    9cc8:	e1bffe17 	ldw	r6,-8(fp)
    9ccc:	e1ffff17 	ldw	r7,-4(fp)
    9cd0:	103ee83a 	callr	r2
    9cd4:	00000106 	br	9cdc <open+0x108>
    9cd8:	0005883a 	mov	r2,zero
    9cdc:	e0bffa15 	stw	r2,-24(fp)
    9ce0:	00000206 	br	9cec <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    9ce4:	00bffb44 	movi	r2,-19
    9ce8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    9cec:	e0bffa17 	ldw	r2,-24(fp)
    9cf0:	1000080e 	bge	r2,zero,9d14 <open+0x140>
  {
    alt_release_fd (index);  
    9cf4:	e13ff917 	ldw	r4,-28(fp)
    9cf8:	0009d2c0 	call	9d2c <alt_release_fd>
    ALT_ERRNO = -status;
    9cfc:	0009a940 	call	9a94 <alt_get_errno>
    9d00:	e0fffa17 	ldw	r3,-24(fp)
    9d04:	00c7c83a 	sub	r3,zero,r3
    9d08:	10c00015 	stw	r3,0(r2)
    return -1;
    9d0c:	00bfffc4 	movi	r2,-1
    9d10:	00000106 	br	9d18 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    9d14:	e0bff917 	ldw	r2,-28(fp)
}
    9d18:	e037883a 	mov	sp,fp
    9d1c:	dfc00117 	ldw	ra,4(sp)
    9d20:	df000017 	ldw	fp,0(sp)
    9d24:	dec00204 	addi	sp,sp,8
    9d28:	f800283a 	ret

00009d2c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    9d2c:	defffc04 	addi	sp,sp,-16
    9d30:	dfc00315 	stw	ra,12(sp)
    9d34:	df000215 	stw	fp,8(sp)
    9d38:	dc000115 	stw	r16,4(sp)
    9d3c:	df000104 	addi	fp,sp,4
    9d40:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    9d44:	e0bfff17 	ldw	r2,-4(fp)
    9d48:	108000d0 	cmplti	r2,r2,3
    9d4c:	1000111e 	bne	r2,zero,9d94 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    9d50:	04000074 	movhi	r16,1
    9d54:	8429a404 	addi	r16,r16,-22896
    9d58:	e0bfff17 	ldw	r2,-4(fp)
    9d5c:	1009883a 	mov	r4,r2
    9d60:	01400304 	movi	r5,12
    9d64:	00083e80 	call	83e8 <__mulsi3>
    9d68:	8085883a 	add	r2,r16,r2
    9d6c:	10800204 	addi	r2,r2,8
    9d70:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    9d74:	04000074 	movhi	r16,1
    9d78:	8429a404 	addi	r16,r16,-22896
    9d7c:	e0bfff17 	ldw	r2,-4(fp)
    9d80:	1009883a 	mov	r4,r2
    9d84:	01400304 	movi	r5,12
    9d88:	00083e80 	call	83e8 <__mulsi3>
    9d8c:	8085883a 	add	r2,r16,r2
    9d90:	10000015 	stw	zero,0(r2)
  }
}
    9d94:	e037883a 	mov	sp,fp
    9d98:	dfc00217 	ldw	ra,8(sp)
    9d9c:	df000117 	ldw	fp,4(sp)
    9da0:	dc000017 	ldw	r16,0(sp)
    9da4:	dec00304 	addi	sp,sp,12
    9da8:	f800283a 	ret

00009dac <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    9dac:	deffff04 	addi	sp,sp,-4
    9db0:	df000015 	stw	fp,0(sp)
    9db4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    9db8:	000170fa 	wrctl	ienable,zero
}
    9dbc:	e037883a 	mov	sp,fp
    9dc0:	df000017 	ldw	fp,0(sp)
    9dc4:	dec00104 	addi	sp,sp,4
    9dc8:	f800283a 	ret

00009dcc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    9dcc:	defffa04 	addi	sp,sp,-24
    9dd0:	dfc00515 	stw	ra,20(sp)
    9dd4:	df000415 	stw	fp,16(sp)
    9dd8:	df000404 	addi	fp,sp,16
    9ddc:	e13ffe15 	stw	r4,-8(fp)
    9de0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    9de4:	e0bfff17 	ldw	r2,-4(fp)
    9de8:	10800017 	ldw	r2,0(r2)
    9dec:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    9df0:	e13ffe17 	ldw	r4,-8(fp)
    9df4:	00084c00 	call	84c0 <strlen>
    9df8:	10800044 	addi	r2,r2,1
    9dfc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9e00:	00000d06 	br	9e38 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    9e04:	e0bffc17 	ldw	r2,-16(fp)
    9e08:	10c00217 	ldw	r3,8(r2)
    9e0c:	e0bffd17 	ldw	r2,-12(fp)
    9e10:	1809883a 	mov	r4,r3
    9e14:	e17ffe17 	ldw	r5,-8(fp)
    9e18:	100d883a 	mov	r6,r2
    9e1c:	000a0d40 	call	a0d4 <memcmp>
    9e20:	1000021e 	bne	r2,zero,9e2c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    9e24:	e0bffc17 	ldw	r2,-16(fp)
    9e28:	00000706 	br	9e48 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    9e2c:	e0bffc17 	ldw	r2,-16(fp)
    9e30:	10800017 	ldw	r2,0(r2)
    9e34:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9e38:	e0fffc17 	ldw	r3,-16(fp)
    9e3c:	e0bfff17 	ldw	r2,-4(fp)
    9e40:	18bff01e 	bne	r3,r2,9e04 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    9e44:	0005883a 	mov	r2,zero
}
    9e48:	e037883a 	mov	sp,fp
    9e4c:	dfc00117 	ldw	ra,4(sp)
    9e50:	df000017 	ldw	fp,0(sp)
    9e54:	dec00204 	addi	sp,sp,8
    9e58:	f800283a 	ret

00009e5c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    9e5c:	defffb04 	addi	sp,sp,-20
    9e60:	dfc00415 	stw	ra,16(sp)
    9e64:	df000315 	stw	fp,12(sp)
    9e68:	df000304 	addi	fp,sp,12
    9e6c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    9e70:	00800074 	movhi	r2,1
    9e74:	10aa0604 	addi	r2,r2,-22504
    9e78:	10800017 	ldw	r2,0(r2)
    9e7c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9e80:	00003106 	br	9f48 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    9e84:	e0bffd17 	ldw	r2,-12(fp)
    9e88:	10800217 	ldw	r2,8(r2)
    9e8c:	1009883a 	mov	r4,r2
    9e90:	00084c00 	call	84c0 <strlen>
    9e94:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    9e98:	e0bffd17 	ldw	r2,-12(fp)
    9e9c:	10c00217 	ldw	r3,8(r2)
    9ea0:	e0bffe17 	ldw	r2,-8(fp)
    9ea4:	10bfffc4 	addi	r2,r2,-1
    9ea8:	1885883a 	add	r2,r3,r2
    9eac:	10800003 	ldbu	r2,0(r2)
    9eb0:	10803fcc 	andi	r2,r2,255
    9eb4:	1080201c 	xori	r2,r2,128
    9eb8:	10bfe004 	addi	r2,r2,-128
    9ebc:	10800bd8 	cmpnei	r2,r2,47
    9ec0:	1000031e 	bne	r2,zero,9ed0 <alt_find_file+0x74>
    {
      len -= 1;
    9ec4:	e0bffe17 	ldw	r2,-8(fp)
    9ec8:	10bfffc4 	addi	r2,r2,-1
    9ecc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9ed0:	e0bffe17 	ldw	r2,-8(fp)
    9ed4:	e0ffff17 	ldw	r3,-4(fp)
    9ed8:	1885883a 	add	r2,r3,r2
    9edc:	10800003 	ldbu	r2,0(r2)
    9ee0:	10803fcc 	andi	r2,r2,255
    9ee4:	1080201c 	xori	r2,r2,128
    9ee8:	10bfe004 	addi	r2,r2,-128
    9eec:	10800be0 	cmpeqi	r2,r2,47
    9ef0:	1000081e 	bne	r2,zero,9f14 <alt_find_file+0xb8>
    9ef4:	e0bffe17 	ldw	r2,-8(fp)
    9ef8:	e0ffff17 	ldw	r3,-4(fp)
    9efc:	1885883a 	add	r2,r3,r2
    9f00:	10800003 	ldbu	r2,0(r2)
    9f04:	10803fcc 	andi	r2,r2,255
    9f08:	1080201c 	xori	r2,r2,128
    9f0c:	10bfe004 	addi	r2,r2,-128
    9f10:	10000a1e 	bne	r2,zero,9f3c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    9f14:	e0bffd17 	ldw	r2,-12(fp)
    9f18:	10c00217 	ldw	r3,8(r2)
    9f1c:	e0bffe17 	ldw	r2,-8(fp)
    9f20:	1809883a 	mov	r4,r3
    9f24:	e17fff17 	ldw	r5,-4(fp)
    9f28:	100d883a 	mov	r6,r2
    9f2c:	000a0d40 	call	a0d4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9f30:	1000021e 	bne	r2,zero,9f3c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    9f34:	e0bffd17 	ldw	r2,-12(fp)
    9f38:	00000806 	br	9f5c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    9f3c:	e0bffd17 	ldw	r2,-12(fp)
    9f40:	10800017 	ldw	r2,0(r2)
    9f44:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9f48:	e0fffd17 	ldw	r3,-12(fp)
    9f4c:	00800074 	movhi	r2,1
    9f50:	10aa0604 	addi	r2,r2,-22504
    9f54:	18bfcb1e 	bne	r3,r2,9e84 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    9f58:	0005883a 	mov	r2,zero
}
    9f5c:	e037883a 	mov	sp,fp
    9f60:	dfc00117 	ldw	ra,4(sp)
    9f64:	df000017 	ldw	fp,0(sp)
    9f68:	dec00204 	addi	sp,sp,8
    9f6c:	f800283a 	ret

00009f70 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    9f70:	defffa04 	addi	sp,sp,-24
    9f74:	dfc00515 	stw	ra,20(sp)
    9f78:	df000415 	stw	fp,16(sp)
    9f7c:	dc000315 	stw	r16,12(sp)
    9f80:	df000304 	addi	fp,sp,12
    9f84:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    9f88:	00bffa04 	movi	r2,-24
    9f8c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    9f90:	e03ffd15 	stw	zero,-12(fp)
    9f94:	00002106 	br	a01c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
    9f98:	04000074 	movhi	r16,1
    9f9c:	8429a404 	addi	r16,r16,-22896
    9fa0:	e0bffd17 	ldw	r2,-12(fp)
    9fa4:	1009883a 	mov	r4,r2
    9fa8:	01400304 	movi	r5,12
    9fac:	00083e80 	call	83e8 <__mulsi3>
    9fb0:	8085883a 	add	r2,r16,r2
    9fb4:	10800017 	ldw	r2,0(r2)
    9fb8:	1000151e 	bne	r2,zero,a010 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
    9fbc:	04000074 	movhi	r16,1
    9fc0:	8429a404 	addi	r16,r16,-22896
    9fc4:	e0bffd17 	ldw	r2,-12(fp)
    9fc8:	1009883a 	mov	r4,r2
    9fcc:	01400304 	movi	r5,12
    9fd0:	00083e80 	call	83e8 <__mulsi3>
    9fd4:	8085883a 	add	r2,r16,r2
    9fd8:	e0ffff17 	ldw	r3,-4(fp)
    9fdc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    9fe0:	00800074 	movhi	r2,1
    9fe4:	10aa0a04 	addi	r2,r2,-22488
    9fe8:	10c00017 	ldw	r3,0(r2)
    9fec:	e0bffd17 	ldw	r2,-12(fp)
    9ff0:	1880040e 	bge	r3,r2,a004 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
    9ff4:	00800074 	movhi	r2,1
    9ff8:	10aa0a04 	addi	r2,r2,-22488
    9ffc:	e0fffd17 	ldw	r3,-12(fp)
    a000:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    a004:	e0bffd17 	ldw	r2,-12(fp)
    a008:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    a00c:	00000606 	br	a028 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a010:	e0bffd17 	ldw	r2,-12(fp)
    a014:	10800044 	addi	r2,r2,1
    a018:	e0bffd15 	stw	r2,-12(fp)
    a01c:	e0bffd17 	ldw	r2,-12(fp)
    a020:	10800810 	cmplti	r2,r2,32
    a024:	103fdc1e 	bne	r2,zero,9f98 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    a028:	e0bffe17 	ldw	r2,-8(fp)
}
    a02c:	e037883a 	mov	sp,fp
    a030:	dfc00217 	ldw	ra,8(sp)
    a034:	df000117 	ldw	fp,4(sp)
    a038:	dc000017 	ldw	r16,0(sp)
    a03c:	dec00304 	addi	sp,sp,12
    a040:	f800283a 	ret

0000a044 <atexit>:
    a044:	200b883a 	mov	r5,r4
    a048:	000d883a 	mov	r6,zero
    a04c:	0009883a 	mov	r4,zero
    a050:	000f883a 	mov	r7,zero
    a054:	000a11c1 	jmpi	a11c <__register_exitproc>

0000a058 <exit>:
    a058:	defffe04 	addi	sp,sp,-8
    a05c:	000b883a 	mov	r5,zero
    a060:	dc000015 	stw	r16,0(sp)
    a064:	dfc00115 	stw	ra,4(sp)
    a068:	2021883a 	mov	r16,r4
    a06c:	000a2a40 	call	a2a4 <__call_exitprocs>
    a070:	8009883a 	mov	r4,r16
    a074:	000a47c0 	call	a47c <_exit>

0000a078 <fputs>:
    a078:	defffd04 	addi	sp,sp,-12
    a07c:	dfc00215 	stw	ra,8(sp)
    a080:	dc000115 	stw	r16,4(sp)
    a084:	d9400015 	stw	r5,0(sp)
    a088:	2021883a 	mov	r16,r4
    a08c:	00084c00 	call	84c0 <strlen>
    a090:	00c00074 	movhi	r3,1
    a094:	18ea0504 	addi	r3,r3,-22508
    a098:	d9400017 	ldw	r5,0(sp)
    a09c:	19000017 	ldw	r4,0(r3)
    a0a0:	00c00074 	movhi	r3,1
    a0a4:	18e31004 	addi	r3,r3,-29632
    a0a8:	28c00115 	stw	r3,4(r5)
    a0ac:	800d883a 	mov	r6,r16
    a0b0:	100f883a 	mov	r7,r2
    a0b4:	183ee83a 	callr	r3
    a0b8:	00ffffc4 	movi	r3,-1
    a0bc:	10c00126 	beq	r2,r3,a0c4 <fputs+0x4c>
    a0c0:	0005883a 	mov	r2,zero
    a0c4:	dfc00217 	ldw	ra,8(sp)
    a0c8:	dc000117 	ldw	r16,4(sp)
    a0cc:	dec00304 	addi	sp,sp,12
    a0d0:	f800283a 	ret

0000a0d4 <memcmp>:
    a0d4:	30000d26 	beq	r6,zero,a10c <memcmp+0x38>
    a0d8:	20c00003 	ldbu	r3,0(r4)
    a0dc:	28800003 	ldbu	r2,0(r5)
    a0e0:	18800c1e 	bne	r3,r2,a114 <memcmp+0x40>
    a0e4:	31bfff84 	addi	r6,r6,-2
    a0e8:	01ffffc4 	movi	r7,-1
    a0ec:	00000406 	br	a100 <memcmp+0x2c>
    a0f0:	20c00003 	ldbu	r3,0(r4)
    a0f4:	28800003 	ldbu	r2,0(r5)
    a0f8:	31bfffc4 	addi	r6,r6,-1
    a0fc:	1880051e 	bne	r3,r2,a114 <memcmp+0x40>
    a100:	21000044 	addi	r4,r4,1
    a104:	29400044 	addi	r5,r5,1
    a108:	31fff91e 	bne	r6,r7,a0f0 <memcmp+0x1c>
    a10c:	0005883a 	mov	r2,zero
    a110:	f800283a 	ret
    a114:	1885c83a 	sub	r2,r3,r2
    a118:	f800283a 	ret

0000a11c <__register_exitproc>:
    a11c:	defff904 	addi	sp,sp,-28
    a120:	00800074 	movhi	r2,1
    a124:	10aa0404 	addi	r2,r2,-22512
    a128:	dc400415 	stw	r17,16(sp)
    a12c:	14400017 	ldw	r17,0(r2)
    a130:	dc000315 	stw	r16,12(sp)
    a134:	dc800515 	stw	r18,20(sp)
    a138:	8c000c17 	ldw	r16,48(r17)
    a13c:	dfc00615 	stw	ra,24(sp)
    a140:	2025883a 	mov	r18,r4
    a144:	80004226 	beq	r16,zero,a250 <__register_exitproc+0x134>
    a148:	80800117 	ldw	r2,4(r16)
    a14c:	00c007c4 	movi	r3,31
    a150:	1880180e 	bge	r3,r2,a1b4 <__register_exitproc+0x98>
    a154:	00800034 	movhi	r2,0
    a158:	10800004 	addi	r2,r2,0
    a15c:	1000071e 	bne	r2,zero,a17c <__register_exitproc+0x60>
    a160:	00bfffc4 	movi	r2,-1
    a164:	dfc00617 	ldw	ra,24(sp)
    a168:	dc800517 	ldw	r18,20(sp)
    a16c:	dc400417 	ldw	r17,16(sp)
    a170:	dc000317 	ldw	r16,12(sp)
    a174:	dec00704 	addi	sp,sp,28
    a178:	f800283a 	ret
    a17c:	01002304 	movi	r4,140
    a180:	d9400015 	stw	r5,0(sp)
    a184:	d9800115 	stw	r6,4(sp)
    a188:	d9c00215 	stw	r7,8(sp)
    a18c:	00000000 	call	0 <__alt_mem_memory-0x8000>
    a190:	1021883a 	mov	r16,r2
    a194:	d9400017 	ldw	r5,0(sp)
    a198:	d9800117 	ldw	r6,4(sp)
    a19c:	d9c00217 	ldw	r7,8(sp)
    a1a0:	103fef26 	beq	r2,zero,a160 <__register_exitproc+0x44>
    a1a4:	88800c17 	ldw	r2,48(r17)
    a1a8:	80000115 	stw	zero,4(r16)
    a1ac:	80800015 	stw	r2,0(r16)
    a1b0:	8c000c15 	stw	r16,48(r17)
    a1b4:	90001726 	beq	r18,zero,a214 <__register_exitproc+0xf8>
    a1b8:	80802217 	ldw	r2,136(r16)
    a1bc:	10002826 	beq	r2,zero,a260 <__register_exitproc+0x144>
    a1c0:	12804017 	ldw	r10,256(r2)
    a1c4:	80c00117 	ldw	r3,4(r16)
    a1c8:	02400044 	movi	r9,1
    a1cc:	48d2983a 	sll	r9,r9,r3
    a1d0:	19000804 	addi	r4,r3,32
    a1d4:	18d1883a 	add	r8,r3,r3
    a1d8:	2109883a 	add	r4,r4,r4
    a1dc:	4211883a 	add	r8,r8,r8
    a1e0:	2109883a 	add	r4,r4,r4
    a1e4:	1109883a 	add	r4,r2,r4
    a1e8:	1211883a 	add	r8,r2,r8
    a1ec:	5254b03a 	or	r10,r10,r9
    a1f0:	21c00015 	stw	r7,0(r4)
    a1f4:	41800015 	stw	r6,0(r8)
    a1f8:	12804015 	stw	r10,256(r2)
    a1fc:	01000084 	movi	r4,2
    a200:	9100051e 	bne	r18,r4,a218 <__register_exitproc+0xfc>
    a204:	11004117 	ldw	r4,260(r2)
    a208:	2252b03a 	or	r9,r4,r9
    a20c:	12404115 	stw	r9,260(r2)
    a210:	00000106 	br	a218 <__register_exitproc+0xfc>
    a214:	80c00117 	ldw	r3,4(r16)
    a218:	18800084 	addi	r2,r3,2
    a21c:	1085883a 	add	r2,r2,r2
    a220:	1085883a 	add	r2,r2,r2
    a224:	8085883a 	add	r2,r16,r2
    a228:	18c00044 	addi	r3,r3,1
    a22c:	11400015 	stw	r5,0(r2)
    a230:	0005883a 	mov	r2,zero
    a234:	80c00115 	stw	r3,4(r16)
    a238:	dfc00617 	ldw	ra,24(sp)
    a23c:	dc800517 	ldw	r18,20(sp)
    a240:	dc400417 	ldw	r17,16(sp)
    a244:	dc000317 	ldw	r16,12(sp)
    a248:	dec00704 	addi	sp,sp,28
    a24c:	f800283a 	ret
    a250:	04000074 	movhi	r16,1
    a254:	842ac504 	addi	r16,r16,-21740
    a258:	8c000c15 	stw	r16,48(r17)
    a25c:	003fba06 	br	a148 <__register_exitproc+0x2c>
    a260:	00800034 	movhi	r2,0
    a264:	10800004 	addi	r2,r2,0
    a268:	103fbd26 	beq	r2,zero,a160 <__register_exitproc+0x44>
    a26c:	d9400015 	stw	r5,0(sp)
    a270:	d9800115 	stw	r6,4(sp)
    a274:	d9c00215 	stw	r7,8(sp)
    a278:	01004204 	movi	r4,264
    a27c:	103ee83a 	callr	r2
    a280:	d9400017 	ldw	r5,0(sp)
    a284:	d9800117 	ldw	r6,4(sp)
    a288:	d9c00217 	ldw	r7,8(sp)
    a28c:	103fb426 	beq	r2,zero,a160 <__register_exitproc+0x44>
    a290:	10004015 	stw	zero,256(r2)
    a294:	10004115 	stw	zero,260(r2)
    a298:	80802215 	stw	r2,136(r16)
    a29c:	0015883a 	mov	r10,zero
    a2a0:	003fc806 	br	a1c4 <__register_exitproc+0xa8>

0000a2a4 <__call_exitprocs>:
    a2a4:	00800074 	movhi	r2,1
    a2a8:	10aa0404 	addi	r2,r2,-22512
    a2ac:	10800017 	ldw	r2,0(r2)
    a2b0:	defff204 	addi	sp,sp,-56
    a2b4:	df000c15 	stw	fp,48(sp)
    a2b8:	d8800015 	stw	r2,0(sp)
    a2bc:	10800c04 	addi	r2,r2,48
    a2c0:	dd400915 	stw	r21,36(sp)
    a2c4:	dfc00d15 	stw	ra,52(sp)
    a2c8:	ddc00b15 	stw	r23,44(sp)
    a2cc:	dd800a15 	stw	r22,40(sp)
    a2d0:	dd000815 	stw	r20,32(sp)
    a2d4:	dcc00715 	stw	r19,28(sp)
    a2d8:	dc800615 	stw	r18,24(sp)
    a2dc:	dc400515 	stw	r17,20(sp)
    a2e0:	dc000415 	stw	r16,16(sp)
    a2e4:	d9000115 	stw	r4,4(sp)
    a2e8:	2839883a 	mov	fp,r5
    a2ec:	d8800215 	stw	r2,8(sp)
    a2f0:	057fffc4 	movi	r21,-1
    a2f4:	d8800017 	ldw	r2,0(sp)
    a2f8:	dd800217 	ldw	r22,8(sp)
    a2fc:	15c00c17 	ldw	r23,48(r2)
    a300:	b8001b26 	beq	r23,zero,a370 <__call_exitprocs+0xcc>
    a304:	b9000117 	ldw	r4,4(r23)
    a308:	bd002217 	ldw	r20,136(r23)
    a30c:	243fffc4 	addi	r16,r4,-1
    a310:	80001416 	blt	r16,zero,a364 <__call_exitprocs+0xc0>
    a314:	244007c4 	addi	r17,r4,31
    a318:	21000044 	addi	r4,r4,1
    a31c:	8c63883a 	add	r17,r17,r17
    a320:	8427883a 	add	r19,r16,r16
    a324:	2109883a 	add	r4,r4,r4
    a328:	8c63883a 	add	r17,r17,r17
    a32c:	9ce7883a 	add	r19,r19,r19
    a330:	2109883a 	add	r4,r4,r4
    a334:	a463883a 	add	r17,r20,r17
    a338:	a4e7883a 	add	r19,r20,r19
    a33c:	b925883a 	add	r18,r23,r4
    a340:	e0001726 	beq	fp,zero,a3a0 <__call_exitprocs+0xfc>
    a344:	a0000226 	beq	r20,zero,a350 <__call_exitprocs+0xac>
    a348:	89400017 	ldw	r5,0(r17)
    a34c:	2f001426 	beq	r5,fp,a3a0 <__call_exitprocs+0xfc>
    a350:	843fffc4 	addi	r16,r16,-1
    a354:	8c7fff04 	addi	r17,r17,-4
    a358:	9cffff04 	addi	r19,r19,-4
    a35c:	94bfff04 	addi	r18,r18,-4
    a360:	857ff71e 	bne	r16,r21,a340 <__call_exitprocs+0x9c>
    a364:	00800034 	movhi	r2,0
    a368:	10800004 	addi	r2,r2,0
    a36c:	1000311e 	bne	r2,zero,a434 <__call_exitprocs+0x190>
    a370:	dfc00d17 	ldw	ra,52(sp)
    a374:	df000c17 	ldw	fp,48(sp)
    a378:	ddc00b17 	ldw	r23,44(sp)
    a37c:	dd800a17 	ldw	r22,40(sp)
    a380:	dd400917 	ldw	r21,36(sp)
    a384:	dd000817 	ldw	r20,32(sp)
    a388:	dcc00717 	ldw	r19,28(sp)
    a38c:	dc800617 	ldw	r18,24(sp)
    a390:	dc400517 	ldw	r17,20(sp)
    a394:	dc000417 	ldw	r16,16(sp)
    a398:	dec00e04 	addi	sp,sp,56
    a39c:	f800283a 	ret
    a3a0:	b9000117 	ldw	r4,4(r23)
    a3a4:	92000017 	ldw	r8,0(r18)
    a3a8:	213fffc4 	addi	r4,r4,-1
    a3ac:	24001a26 	beq	r4,r16,a418 <__call_exitprocs+0x174>
    a3b0:	90000015 	stw	zero,0(r18)
    a3b4:	403fe626 	beq	r8,zero,a350 <__call_exitprocs+0xac>
    a3b8:	ba400117 	ldw	r9,4(r23)
    a3bc:	a0001226 	beq	r20,zero,a408 <__call_exitprocs+0x164>
    a3c0:	00800044 	movi	r2,1
    a3c4:	1408983a 	sll	r4,r2,r16
    a3c8:	a1404017 	ldw	r5,256(r20)
    a3cc:	214a703a 	and	r5,r4,r5
    a3d0:	28000d26 	beq	r5,zero,a408 <__call_exitprocs+0x164>
    a3d4:	a1404117 	ldw	r5,260(r20)
    a3d8:	2148703a 	and	r4,r4,r5
    a3dc:	2000101e 	bne	r4,zero,a420 <__call_exitprocs+0x17c>
    a3e0:	99400017 	ldw	r5,0(r19)
    a3e4:	d9000117 	ldw	r4,4(sp)
    a3e8:	da400315 	stw	r9,12(sp)
    a3ec:	403ee83a 	callr	r8
    a3f0:	da400317 	ldw	r9,12(sp)
    a3f4:	b9000117 	ldw	r4,4(r23)
    a3f8:	227fbe1e 	bne	r4,r9,a2f4 <__call_exitprocs+0x50>
    a3fc:	b1000017 	ldw	r4,0(r22)
    a400:	25ffd326 	beq	r4,r23,a350 <__call_exitprocs+0xac>
    a404:	003fbb06 	br	a2f4 <__call_exitprocs+0x50>
    a408:	da400315 	stw	r9,12(sp)
    a40c:	403ee83a 	callr	r8
    a410:	da400317 	ldw	r9,12(sp)
    a414:	003ff706 	br	a3f4 <__call_exitprocs+0x150>
    a418:	bc000115 	stw	r16,4(r23)
    a41c:	003fe506 	br	a3b4 <__call_exitprocs+0x110>
    a420:	99000017 	ldw	r4,0(r19)
    a424:	da400315 	stw	r9,12(sp)
    a428:	403ee83a 	callr	r8
    a42c:	da400317 	ldw	r9,12(sp)
    a430:	003ff006 	br	a3f4 <__call_exitprocs+0x150>
    a434:	b9000117 	ldw	r4,4(r23)
    a438:	20000e1e 	bne	r4,zero,a474 <__call_exitprocs+0x1d0>
    a43c:	b9000017 	ldw	r4,0(r23)
    a440:	20000826 	beq	r4,zero,a464 <__call_exitprocs+0x1c0>
    a444:	b1000015 	stw	r4,0(r22)
    a448:	a0000226 	beq	r20,zero,a454 <__call_exitprocs+0x1b0>
    a44c:	a009883a 	mov	r4,r20
    a450:	00000000 	call	0 <__alt_mem_memory-0x8000>
    a454:	b809883a 	mov	r4,r23
    a458:	00000000 	call	0 <__alt_mem_memory-0x8000>
    a45c:	b5c00017 	ldw	r23,0(r22)
    a460:	003fa706 	br	a300 <__call_exitprocs+0x5c>
    a464:	0007883a 	mov	r3,zero
    a468:	b82d883a 	mov	r22,r23
    a46c:	182f883a 	mov	r23,r3
    a470:	003fa306 	br	a300 <__call_exitprocs+0x5c>
    a474:	b8c00017 	ldw	r3,0(r23)
    a478:	003ffb06 	br	a468 <__call_exitprocs+0x1c4>

0000a47c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    a47c:	defffc04 	addi	sp,sp,-16
    a480:	df000315 	stw	fp,12(sp)
    a484:	df000304 	addi	fp,sp,12
    a488:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    a48c:	0001883a 	nop
    a490:	e0bfff17 	ldw	r2,-4(fp)
    a494:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
    a498:	e0bffd17 	ldw	r2,-12(fp)
    a49c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    a4a0:	e0bffe17 	ldw	r2,-8(fp)
    a4a4:	10000226 	beq	r2,zero,a4b0 <_exit+0x34>
    ALT_SIM_FAIL();
    a4a8:	002af070 	cmpltui	zero,zero,43969
    a4ac:	00000106 	br	a4b4 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
    a4b0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    a4b4:	003fff06 	br	a4b4 <_exit+0x38>
